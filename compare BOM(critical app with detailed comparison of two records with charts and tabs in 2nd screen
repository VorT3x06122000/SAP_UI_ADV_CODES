app/psbomcompui/webapp/view/Home.view.xml



<!--
*Confidential and Proprietary
*Copyright  2022, HP
*All Rights Reserved
****************************************************************
 Application Name         :    Compare Factory BOM 
 RICEFW No                : 
 Release                  :    M2 Release
 Author                   :    Samudrala Sreenivas
 Date                     :    19.04.2024
 Description              :    Compare Factory BOM   
 *Descriptions: Main Screen View 
 ****************************************************************
Change Log:
    Date       |   Author      |   Defect/Incident     |   Change Description   
****************************************************************-->
<mvc:View controllerName="pumorips.bomcompare.psbomcompui.controller.Home"
    xmlns:mvc="sap.ui.core.mvc" displayBlock="true"
    xmlns="sap.m" 
    xmlns:smartFilterBar="sap.ui.comp.smartfilterbar"
	xmlns:smartTable="sap.ui.comp.smarttable" 
    xmlns:table="sap.ui.table" 
    xmlns:u="sap.ui.unified" 
    xmlns:f="sap.f" 
    xmlns:fb="sap.ui.comp.filterbar"
    xmlns:core="sap.ui.core">
    <Page id="page" title="{i18n>title}" showHeader="false">
        <content>
            <VBox fitContainer="true">
                    <smartFilterBar:SmartFilterBar 
                        id="smartFilterBarComp" showMessages="true" showClearOnFB="true" persistencyKey="SmartFilterPKey"
                        entitySet="BOMHeaderView" clear="clearFilters"
                    >
                        <smartFilterBar:controlConfiguration>
                                <smartFilterBar:ControlConfiguration key="frmDt" label="{i18n>BOM_VALID_FRM}" visibleInAdvancedArea="true">
                                    <smartFilterBar:customControl>
                                        <DatePicker id="fltrValidFrm" placeholder="e.g. Jan 01, 2024" />
                                    </smartFilterBar:customControl>
                                </smartFilterBar:ControlConfiguration>
                        </smartFilterBar:controlConfiguration>

                        <smartFilterBar:controlConfiguration>
                                <smartFilterBar:ControlConfiguration key="toDt" label="{i18n>BOM_VALID_TO}" visibleInAdvancedArea="true">
                                    <smartFilterBar:customControl>
                                        <DatePicker id="fltrValidTo" placeholder="e.g. Dec 31, 9999" />
                                    </smartFilterBar:customControl>
                                </smartFilterBar:ControlConfiguration>
                        </smartFilterBar:controlConfiguration> 
                    </smartFilterBar:SmartFilterBar>

                    <OverflowToolbar design="Transparent">
                    <Label text="{selDataModel>/sTextDyn}"/>
                    
                    <Button text="{i18n>CMPBTNSLT}" type="Transparent" press="onResetCompareParam"/>
                    </OverflowToolbar>

                    <smartTable:SmartTable id="idCompSmrtTable" smartFilterId="smartFilterBarComp" tableType="ResponsiveTable" editable="false" entitySet="BOMHeaderView" useVariantManagement="true" showVariantManagement="true" 
                        header="{i18n>BOM_HEADER}" showRowCount="true"  requestAtLeastFields="materialNumber"
                        enableAutoBinding="false" placeToolbarInTable="true" beforeRebindTable="onBeforeRebindTable" persistencyKey="SmartTablePersistencyKey" >
                        <smartTable:customToolbar>
                            <OverflowToolbar design="Transparent">
                                    <ToolbarSpacer/>
                                    <Button id="cmparBtn" text="{i18n>COMPARE}" press=".compareSelItms" enabled="false"/>	    
                            </OverflowToolbar>
                        </smartTable:customToolbar>
                        <Table id="idPMtable1" mode="MultiSelect" sticky="ColumnHeaders,HeaderToolbar" growing="true" growingScrollToLoad="true" growingThreshold="20" selectionChange="onItemSelect" >
                            <items>
                                <ColumnListItem></ColumnListItem>
                            </items>
                        </Table>
                    </smartTable:SmartTable>
            </VBox>
        </content>
    </Page>
       
    
</mvc:View>



app/psbomcompui/webapp/view/Compare.view.xml



<!--
*Confidential and Proprietary
*Copyright  2022, HP
*All Rights Reserved
****************************************************************
 Application Name         :    Compare Factory BOM 
 RICEFW No                : 
 Release                  :    M2 Release
 Author                   :    Samudrala Sreenivas
 Date                     :    19.04.2024
 Description              :    Compare Factory BOM   
 *Descriptions: Compare View 
 ****************************************************************
Change Log:
    Date       |   Author      |   Defect/Incident     |   Change Description   
****************************************************************-->
<mvc:View
    controllerName="pumorips.bomcompare.psbomcompui.controller.Compare"
    xmlns:mvc="sap.ui.core.mvc"
    displayBlock="true"
    xmlns:core="sap.ui.core"
    xmlns="sap.m"
    xmlns:smartFilterBar="sap.ui.comp.smartfilterbar"
    xmlns:smartTable="sap.ui.comp.smarttable"
    xmlns:micro="sap.suite.ui.microchart"
    xmlns:layout="sap.ui.layout"
    xmlns:ui="sap.ui.table"
    xmlns:u="sap.ui.unified"
    xmlns:f="sap.f"
    xmlns:fb="sap.ui.comp.filterbar"
>
    <Page showHeader="false">
        <content>
            <VBox fitContainer="true" height="100%">
                <HBox width="100%" justifyContent="SpaceBetween">
                    <HBox>
                        <layout:HorizontalLayout allowWrapping="true">
                            <layout:VerticalLayout class="BOMDtls" width="100%">
                                <ObjectAttribute class="odjDtl" title="{i18n>BOM_MPA_FPN_P}" text="{selDataModel>/zmpaPartno}" />

                                <ObjectAttribute class="odjDtl" title="{i18n>BOM_MPA_PN_Desc}" text="{CompDataModel>/description}" />

                                <ObjectAttribute class="odjDtl" title="{i18n>BOM_FAC}" text="{selDataModel>/factoryNumber}" />

                                <ObjectAttribute class="odjDtl" title="{i18n>BOM_BaseUOM}" text="{selDataModel>/bomqty}" />
                            </layout:VerticalLayout>

                            <layout:HorizontalLayout allowWrapping="true">
                                <layout:VerticalLayout class="BOMDtls">
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM1_VF}" text="{CompDataModel>/bom1validFrom}" />
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM1_VT}" text="{CompDataModel>/bom1validTo}" />
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM1_Version}" text="{selDataModel>/bom1Version}" />
                                </layout:VerticalLayout>
                                <layout:VerticalLayout class="BOMDtls">
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM2_VF}" text="{CompDataModel>/bom2validFrom}" />
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM2_VT}" text="{CompDataModel>/bom2validTo}" />
                                    <ObjectAttribute class="odjDtl" title="{i18n>BOM2_Version}" text="{selDataModel>/bom2Version}" />
                                </layout:VerticalLayout>
                            </layout:HorizontalLayout>
                        </layout:HorizontalLayout>
                        
                    </HBox>

                    <HBox class="hboxcharts">
                        <Label text="{i18n>COMP_BASE}" class="Compbse"/>
                        <VBox height="100px" renderType="Bare" class="sclCls">
                            <Label text="{i18n>UNQ_COMP}" class="compLbl" />

                            <micro:ComparisonMicroChart isResponsive="true" width="10rem">
                                <micro:data>
                                    <micro:ComparisonMicroChartData title="{i18n>TOTAL}" value="{CompDataModel>/totalUni}" color="purple" />

                                    <micro:ComparisonMicroChartData title="{i18n>BOM1}" value="{CompDataModel>/BOM1}" color="purple" />

                                    <micro:ComparisonMicroChartData title="{i18n>BOM2}" value="{CompDataModel>/BOM2}" color="purple" />
                                </micro:data>
                            </micro:ComparisonMicroChart>
                        </VBox>
                        <VBox height="100px" renderType="Bare" class="sclCls">
                            <Label text="{i18n>COM_COMP}" class="compLbl" />

                            <micro:ComparisonMicroChart isResponsive="true" width="10rem">
                                <micro:data>
                                    <micro:ComparisonMicroChartData title="{i18n>TOTAL}" value="{CompDataModel>/totalComp}" color="#00bfff" />

                                    <micro:ComparisonMicroChartData title="{i18n>SIM}" value="{CompDataModel>/similar}" color="green" />

                                    <micro:ComparisonMicroChartData title="{i18n>DIFF}" value="{CompDataModel>/difference}" color="red" />
                                </micro:data>
                            </micro:ComparisonMicroChart>
                        </VBox>
                    </HBox>
                    <HBox class="hbociconmain">
                    <VBox height="10px" renderType="Bare" class="iconvbx">
                            <HBox width="14rem" class="iconhbx">
                                <items>
                                    <core:Icon id="iconID1" visible="false" src="sap-icon://BusinessSuiteInAppSymbols/icon-not-equal" color="white" backgroundColor="#eb5a5a" class="sapUICustomIconComp"/>
                                    <Text text="{i18n>NOTEQ}" id="iconID11" visible="false"  class="icotext" />
                                </items>
                            </HBox>
                            <HBox width="14rem" class="iconhbx">
                                <items>
                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-outbound-delivery-inactive" id="iconID2" visible="false"  color="white" backgroundColor="#074e94" class="sapUICustomIconComp"/>
                                    <Text text="{i18n>Uniq_comp_bom1}" id="iconID22" visible="false"  class="icotext"/>
                                </items>
                            </HBox> 
                            <HBox width="14rem" class="iconhbx">
                                <items>
                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-neutral" color="white" id="iconID3" visible="false"  backgroundColor="#074e94" class="sapUICustomIconComp"/>
                                    <Text text="{i18n>Uniq_comp_bom2}" id="iconID33" visible="false"  class="icotext"/>
                                </items>
                            </HBox> 
                        </VBox>
                    </HBox>
                </HBox>

                <VBox height="100%" fitContainer="true">
                    <HBox justifyContent="SpaceBetween">
                        <SegmentedButton id="catgSegBtn" width="900px" class="segBtn">
                            <items>
                                <SegmentedButtonItem text="{i18n>UNQ_COMP}" key="unique" class="sapUniqueClass" press="uniqueSelect" />

                                <SegmentedButtonItem text="{i18n>DIFF_DATA}" key="difference" press="diffSelect" />

                                <SegmentedButtonItem text="{i18n>SIM_DATA}" key="similar" press="similarSelect" />
                                <SegmentedButtonItem text="{i18n>COMP_DATA}" key="comparison" press="compareSelect" />
                            </items>
                        </SegmentedButton>
                    </HBox>
                    <VBox class="uniqueVBox" fitContainer="true" height="100%" renderType="Bare">
                        <VBox class="uniqueVBox1" fitContainer="true" height="50%" renderType="Bare">
                            <ui:Table id="cmpUnq1Table" rows="{/BOM1}" selectionMode="None" alternateRowColors="true" enableCellFilter="true" enableColumnReordering="true"  rowMode="Auto" noData="No Data" >
                                <ui:extension>
                                    <OverflowToolbar style="Clear">
                                        <Title id="unq1Tblttl" text="{i18n>BOM1}" class="tblHdng" />

                                        <ToolbarSpacer />

                                        <Button icon="sap-icon://download" press="onUnq1DwnldSelect" />

                                        <Button icon="sap-icon://action-settings" press="onUnq1StngSelect" />
                                    </OverflowToolbar>
                                </ui:extension>

                                <ui:columns>
                                    <ui:Column sortProperty="zmpaPartno" filterProperty="zmpaPartno" width="9rem"  >
                                        <Label text="{i18n>MPA_FPN_P}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{zmpaPartno}" wrapping="true" maxLines="1" tooltip="{i18n>MPA_FPN_P}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryNumber" filterProperty="factoryNumber" width="9rem"  >
                                        <Label text="{i18n>FAC}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{factoryNumber}" wrapping="true" maxLines="1" tooltip="{i18n>FAC}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="bomVersion" filterProperty="bomVersion" width="9rem"  >
                                        <Label text="{i18n>BOM1_Version}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{bomVersion}" wrapping="true" maxLines="1" tooltip="{i18n>BOM1_Version}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="levelNo" filterProperty="levelNo" width="9rem"  >
                                        <Label text="{i18n>LEVEL_NO}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{levelNo}" wrapping="true" maxLines="1" tooltip="{i18n>LEVEL_NO}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="generatedHppn" filterProperty="generatedHppn" width="9rem">
                                        <Label text="{i18n>GEN_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{generatedHppn}" wrapping="true" maxLines="1" tooltip="{generatedHppn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="untUsg" filterProperty="untUsg" width="9rem">
                                        <Label text="{i18n>MPN_QTY}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{untUsg}" wrapping="true" maxLines="1" tooltip="{untUsg}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="hppnchildpn" filterProperty="hppnchildpn" width="9rem">
                                        <Label text="{i18n>MAT_NUM_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{hppnchildpn}" wrapping="true" maxLines="1" tooltip="{hppnchildpn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryChildPn" filterProperty="factoryChildPn" width="9rem">
                                        <Label text="{i18n>MPA_FPN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{factoryChildPn}" wrapping="true" maxLines="1" tooltip="{factoryChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="mpnChildPn" filterProperty="mpnChildPn" width="9rem">
                                        <Label text="{i18n>MPA_PN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{mpnChildPn}" wrapping="true" maxLines="1" tooltip="{mpnChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="description" filterProperty="description" width="9rem">
                                        <Label text="{i18n>MPA_PDESC_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{description}" wrapping="true" maxLines="1" tooltip="{description}" />
                                        </ui:template>
                                    </ui:Column>


                                    <ui:Column sortProperty="uomAlt" filterProperty="uomAlt" width="9rem">
                                        <Label text="{i18n>UOM}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{uomAlt}" wrapping="true" maxLines="1" tooltip="{uomAlt}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="materialType" filterProperty="materialType" width="9rem">
                                        <Label text="{i18n>MAT_TYP}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{materialType}" wrapping="true" maxLines="1" tooltip="{materialType}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="sortString" filterProperty="sortString" width="9rem">
                                        <Label text="{i18n>SORT_STR}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{sortString}" wrapping="true" maxLines="1" tooltip="{sortString}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="marketShare" filterProperty="marketShare" width="9rem">
                                        <Label text="{i18n>MKT_SHARE}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{marketShare}" wrapping="true" maxLines="1" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="componentValidFrom" filterProperty="componentValidFrom" width="9rem">
                                        <Label text="{i18n>MPN_VF}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidFrom}" wrapping="true" maxLines="1" tooltip="{componentValidFrom}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="componentValidTo" filterProperty="componentValidTo" width="9rem">
                                        <Label text="{i18n>MPN_TO}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidTo}" wrapping="true" maxLines="1" tooltip="{componentValidTo}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="scrap" filterProperty="scrap" width="9rem">
                                        <Label text="{i18n>scrap}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{scrap}" wrapping="true" maxLines="1" tooltip="{scrap}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="altItemGroup" filterProperty="altItemGroup" width="9rem">
                                        <Label text="{i18n>altItemGroup}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{altItemGroup}" wrapping="true" maxLines="1" tooltip="{altItemGroup}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="manufName" filterProperty="manufName" width="9rem">
                                        <Label text="{i18n>manufName}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{manufName}" wrapping="true" maxLines="1" tooltip="{manufName}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="vendorId" filterProperty="vendorId" width="9rem">
                                        <Label text="{i18n>vendorId}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{vendorId}" wrapping="true" maxLines="1" tooltip="{vendorId}" />
                                        </ui:template>
                                    </ui:Column>
                                </ui:columns>
                            </ui:Table>
                        </VBox>
                        <VBox/>
                        
                        <VBox class="uniqueVBox2" fitContainer="true" height="50%" renderType="Bare">
                            <ui:Table id="cmpUnq2Table" rows="{/BOM2}" selectionMode="None" alternateRowColors="true" enableCellFilter="true" enableColumnReordering="true"  threshold="20"  rowMode="Auto" noData="No Data">
                                <ui:extension>
                                    <OverflowToolbar style="Clear">
                                        <Title id="unq2Tblttl" text="{i18n>BOM2}" class="tblHdng" />

                                        <ToolbarSpacer />

                                        <Button icon="sap-icon://download" press="onUnq2DwnldSelect" />

                                        <Button icon="sap-icon://action-settings" press="onUnq2StngSelect" />
                                    </OverflowToolbar>
                                </ui:extension>

                                <ui:columns>
                                    <ui:Column sortProperty="zmpaPartno" filterProperty="zmpaPartno" width="9rem"  >
                                        <Label text="{i18n>MPA_FPN_P}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{zmpaPartno}" wrapping="true" maxLines="1" tooltip="{i18n>MPA_FPN_P}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryNumber" filterProperty="factoryNumber" width="9rem"  >
                                        <Label text="{i18n>FAC}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{factoryNumber}" wrapping="true" maxLines="1" tooltip="{i18n>FAC}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="bomVersion" filterProperty="bomVersion" width="9rem"  >
                                        <Label text="{i18n>BOM2_Version}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{bomVersion}" wrapping="true" maxLines="1" tooltip="{i18n>BOM2_Version}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="levelNo" filterProperty="levelNo" width="9rem">
                                        <Label text="{i18n>LEVEL_NO}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{levelNo}" wrapping="true" maxLines="1" tooltip="{levelNo}" />
                                        </ui:template>
                                    </ui:Column>
                                    <ui:Column sortProperty="generatedHppn" filterProperty="generatedHppn" width="9rem">
                                        <Label text="{i18n>GEN_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{generatedHppn}" wrapping="true" maxLines="1" tooltip="{generatedHppn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="untUsg" filterProperty="untUsg" width="9rem">
                                        <Label text="{i18n>MPN_QTY}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{untUsg}" wrapping="true" maxLines="1" tooltip="{untUsg}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="hppnchildpn" filterProperty="hppnchildpn" width="9rem">
                                        <Label text="{i18n>MAT_NUM_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{hppnchildpn}" wrapping="true" maxLines="1" tooltip="{hppnchildpn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryChildPn" filterProperty="factoryChildPn" width="9rem">
                                        <Label text="{i18n>MPA_FPN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{factoryChildPn}" wrapping="true" maxLines="1" tooltip="{factoryChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="mpnChildPn" filterProperty="mpnChildPn" width="9rem">
                                        <Label text="{i18n>MPA_PN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{mpnChildPn}" wrapping="true" maxLines="1" tooltip="{mpnChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="description" filterProperty="description" width="9rem">
                                        <Label text="{i18n>MPA_PDESC_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{description}" wrapping="true" maxLines="1" tooltip="{description}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="uomAlt" filterProperty="uomAlt" width="9rem">
                                        <Label text="{i18n>UOM}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{uomAlt}" wrapping="true" maxLines="1" tooltip="{uomAlt}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="materialType" filterProperty="materialType" width="9rem">
                                        <Label text="{i18n>MAT_TYP}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{materialType}" wrapping="true" maxLines="1" tooltip="{materialType}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="sortString" filterProperty="sortString" width="9rem">
                                        <Label text="{i18n>SORT_STR}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{sortString}" wrapping="true" maxLines="1" tooltip="{sortString}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="marketShare" filterProperty="marketShare" width="9rem">
                                        <Label text="{i18n>MKT_SHARE}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{marketShare}" wrapping="true" maxLines="1" />
                                        </ui:template>
                                    </ui:Column>
                                    
                                    <ui:Column sortProperty="componentValidFrom" filterProperty="componentValidFrom" width="9rem">
                                        <Label text="{i18n>MPN_VF}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidFrom}" wrapping="true" maxLines="1" tooltip="{componentValidFrom}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="componentValidTo" filterProperty="componentValidTo" width="9rem">
                                        <Label text="{i18n>MPN_TO}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidTo}" wrapping="true" maxLines="1" tooltip="{componentValidTo}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="scrap" filterProperty="scrap" width="9rem">
                                        <Label text="{i18n>scrap}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{scrap}" wrapping="true" maxLines="1" tooltip="{scrap}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="altItemGroup" filterProperty="altItemGroup" width="9rem">
                                        <Label text="{i18n>altItemGroup}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{altItemGroup}" wrapping="true" maxLines="1" tooltip="{altItemGroup}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="manufName" filterProperty="manufName" width="9rem">
                                        <Label text="{i18n>manufName}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{manufName}" wrapping="true" maxLines="1" tooltip="{manufName}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="vendorId" filterProperty="vendorId" width="9rem">
                                        <Label text="{i18n>vendorId}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{vendorId}" wrapping="true" maxLines="1" tooltip="{vendorId}" />
                                        </ui:template>
                                    </ui:Column>
                                </ui:columns>
                            </ui:Table>
                        </VBox>
                    </VBox>

                    <VBox class="diffVBox" fitContainer="true" height="100%" renderType="Bare">
                        <ui:Table id="cmpDiffTable" rows="{/}" selectionMode="None" alternateRowColors="true" enableCellFilter="true" enableColumnReordering="true"  threshold="20" rowMode="Auto" noData="No Data">
                            <ui:extension>
                                <OverflowToolbar style="Clear">
                                    <Title id="diffTblttl" text="{i18n>BOM_DIFF}" class="tblHdng" />

                                    <ToolbarSpacer />

                                    <Button icon="sap-icon://download" press="onDiffDwnldSelect" />

                                    <Button icon="sap-icon://action-settings" press="onDiffStngSelect" />
                                </OverflowToolbar>
                            </ui:extension>

                            <ui:columns>
                                    <ui:Column sortProperty="BOM1lineNo" filterProperty="BOM1lineNo" width="9rem"  >
                                        <Label text="{i18n>BOM1_SEQ_NO}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{BOM1lineNo}" wrapping="true" maxLines="1" tooltip="{i18n>BOM1_SEQ_NO}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="BOM2lineNo" filterProperty="BOM2lineNo" width="9rem"  >
                                        <Label text="{i18n>BOM2_SEQ_NO}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{BOM2lineNo}" wrapping="true" maxLines="1" tooltip="{i18n>BOM2_SEQ_NO}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="BOM1zmpaPartno" filterProperty="BOM1zmpaPartno" width="9rem"  >
                                        <Label text="{i18n>MPA_FPN_P}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{BOM1zmpaPartno}" wrapping="true" maxLines="1" tooltip="{i18n>MPA_FPN_P}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="BOM1factoryNumber" filterProperty="BOM1factoryNumber" width="9rem"  >
                                        <Label text="{i18n>FAC}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{BOM1factoryNumber}" wrapping="true" maxLines="1" tooltip="{i18n>FAC}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                <ui:Column sortProperty="BOM1levelNo" filterProperty="BOM1levelNo" width="9rem">
                                    <Label text="{i18n>BOM1_LEVEL_NO}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1levelNo}" wrapping="true" maxLines="1" tooltip="{BOM1levelNo}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2levelNo" filterProperty="BOM2levelNo" width="9rem">
                                    <Label text="{i18n>BOM2_LEVEL_NO}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2levelNo}" wrapping="true" maxLines="1" tooltip="{BOM2levelNo}" />
                                    </ui:template>
                                </ui:Column>
                                <ui:Column sortProperty="BOM1generatedHppn" filterProperty="BOM1generatedHppn" width="9rem">
                                    <Label text="{i18n>BOM1_GHPPN}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1generatedHppn}" wrapping="true" maxLines="1" tooltip="{BOM1generatedHppn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2generatedHppn" filterProperty="BOM2generatedHppn" width="9rem">
                                    <Label text="{i18n>BOM2_GHPPN}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2generatedHppn}" wrapping="true" maxLines="1" tooltip="{BOM2generatedHppn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1factoryChildPn" filterProperty="BOM1factoryChildPn" width="9rem">
                                    <Label text="{i18n>BOM1_MPA_FPN_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1factoryChildPn'},{path:'BOM2factoryChildPn'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1factoryChildPn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2factoryChildPn" filterProperty="BOM2factoryChildPn" width="9rem">
                                    <Label text="{i18n>BOM2_MPA_FPN_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1factoryChildPn'},{path:'BOM2factoryChildPn'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2factoryChildPn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty=" " filterProperty="BOM1mpnChildPn" width="9rem">
                                    <Label text="{i18n>BOM1_MPA_PN_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1mpnChildPn}" wrapping="true" maxLines="1" tooltip="{BOM1mpnChildPn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2mpnChildPn" filterProperty="BOM2mpnChildPn" width="9rem">
                                    <Label text="{i18n>BOM2_MPA_PN_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2mpnChildPn}" wrapping="true" maxLines="1" tooltip="{BOM2mpnChildPn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1description" filterProperty="BOM1description" width="9rem">
                                    <Label text="{i18n>BOM1_MPN_PART_DESC_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1description}" wrapping="true" maxLines="1" tooltip="{BOM1description}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2description" filterProperty="BOM2description" width="9rem">
                                    <Label text="{i18n>BOM2_MPN_PART_DESC_C}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2description}" wrapping="true" maxLines="1" tooltip="{BOM2description}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1hppnchildpn" filterProperty="BOM1hppnchildpn" width="9rem">
                                    <Label text="{i18n>BOM1_MAT_NUM_HPPN}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1hppnchildpn}" wrapping="true" maxLines="1" tooltip="{BOM1hppnchildpn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2hppnchildpn" filterProperty="BOM2hppnchildpn" width="9rem">
                                    <Label text="{i18n>BOM2_MAT_NUM_HPPN}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2hppnchildpn}" wrapping="true" maxLines="1" tooltip="{BOM2hppnchildpn}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1untUsg" filterProperty="BOM1untUsg" width="9rem">
                                    <Label text="{i18n>BOM1_MPN_QTY}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1untUsg'},{path:'BOM2untUsg'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1untUsg}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2untUsg" filterProperty="BOM2untUsg" width="9rem">
                                    <Label text="{i18n>BOM2_MPN_QTY}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1untUsg'},{path:'BOM2untUsg'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2untUsg}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1uomAlt" filterProperty="BOM1uomAlt" width="9rem">
                                    <Label text="{i18n>BOM1_UOM}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1uomAlt}" wrapping="true" maxLines="1" tooltip="{BOM1uomAlt}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2uomAlt" filterProperty="BOM2uomAlt" width="9rem">
                                    <Label text="{i18n>BOM2_UOM}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2uomAlt}" wrapping="true" maxLines="1" tooltip="{BOM2uomAlt}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1materialType" filterProperty="BOM1materialType" width="9rem">
                                    <Label text="{i18n>BOM1_MAT_TYPE}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM1materialType}" wrapping="true" maxLines="1" tooltip="{BOM1materialType}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2materialType" filterProperty="BOM2materialType" width="9rem">
                                    <Label text="{i18n>BOM2_MAT_TYPE}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{BOM2materialType}" wrapping="true" maxLines="1" tooltip="{BOM2materialType}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1marketShare" filterProperty="BOM1marketShare" width="9rem">
                                    <Label text="{i18n>BOM1_MRT_SHARE}" wrapping="true" />

                                    <ui:template>
                                        <Text wrapping="true" text="{parts:[{path:'BOM1marketShare'},{path:'BOM2marketShare'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" maxLines="1" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2marketShare" filterProperty="BOM2marketShare" width="9rem">
                                    <Label text="{i18n>BOM2_MRT_SHARE}" wrapping="true" />

                                    <ui:template>
                                        <Text wrapping="true" text="{parts:[{path:'BOM1marketShare'},{path:'BOM2marketShare'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" maxLines="1" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1componentValidFrom" filterProperty="BOM1componentValidFrom" width="9rem">
                                    <Label text="{i18n>BOM1_MPN_VF}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1componentValidFrom'},{path:'BOM2componentValidFrom'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1componentValidFrom}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2componentValidFrom" filterProperty="BOM2componentValidFrom" width="9rem">
                                    <Label text="{i18n>BOM2_MPN_VF}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1componentValidFrom'},{path:'BOM2componentValidFrom'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2componentValidFrom}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1componentValidTo" filterProperty="BOM1componentValidTo" width="9rem">
                                    <Label text="{i18n>BOM1_MPN_VT}" wrapping="true" />

                                    <ui:template>
                                        <Text wrapping="true" text="{parts:[{path:'BOM1componentValidTo'},{path:'BOM2componentValidTo'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" maxLines="1" tooltip="{BOM1componentValidTo}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2componentValidTo" filterProperty="BOM2componentValidTo" width="9rem">
                                    <Label text="{i18n>BOM2_MPN_VT}" wrapping="true" />

                                    <ui:template>
                                        <Text wrapping="true" text="{parts:[{path:'BOM1componentValidTo'},{path:'BOM2componentValidTo'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" maxLines="1" tooltip="{BOM2componentValidTo}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1scrap" filterProperty="BOM1scrap" width="9rem">
                                    <Label text="{i18n>BOM1_scrap}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1scrap'},{path:'BOM2scrap'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1scrap}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2scrap" filterProperty="BOM2scrap" width="9rem">
                                    <Label text="{i18n>BOM2_scrap}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1scrap'},{path:'BOM2scrap'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2scrap}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1altItemGroup" filterProperty="BOM1altItemGroup" width="9rem">
                                    <Label text="{i18n>BOM1_altItemGroup}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1altItemGroup'},{path:'BOM2altItemGroup'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1altItemGroup}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2altItemGroup" filterProperty="BOM2altItemGroup" width="9rem">
                                    <Label text="{i18n>BOM2_altItemGroup}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1altItemGroup'},{path:'BOM2altItemGroup'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2altItemGroup}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1alternativeItem" filterProperty="BOM1alternativeItem" width="9rem">
                                    <Label text="{i18n>BOM1_alternativeItem}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1alternativeItem'},{path:'BOM2alternativeItem'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1alternativeItem}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2alternativeItem" filterProperty="BOM2alternativeItem" width="9rem">
                                    <Label text="{i18n>BOM2_alternativeItem}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1alternativeItem'},{path:'BOM2alternativeItem'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2alternativeItem}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1manufName" filterProperty="BOM1manufName" width="9rem">
                                    <Label text="{i18n>BOM1_manufName}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1manufName'},{path:'BOM2manufName'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1manufName}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2manufName" filterProperty="BOM2manufName" width="9rem">
                                    <Label text="{i18n>BOM2_manufName}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1manufName'},{path:'BOM2manufName'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2manufName}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM1vendorId" filterProperty="BOM1vendorId" width="9rem">
                                    <Label text="{i18n>BOM1_vendorId}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1vendorId'},{path:'BOM2vendorId'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom1'}" wrapping="true" maxLines="1" tooltip="{BOM1vendorId}" />
                                    </ui:template>
                                </ui:Column>

                                <ui:Column sortProperty="BOM2vendorId" filterProperty="BOM2vendorId" width="9rem">
                                    <Label text="{i18n>BOM2_vendorId}" wrapping="true" />

                                    <ui:template>
                                        <Text text="{parts:[{path:'BOM1vendorId'},{path:'BOM2vendorId'}],formatter : 'pumorips.bomcompare.psbomcompui.formatters.compareFormatter.formatCompareDiffBom2'}" wrapping="true" maxLines="1" tooltip="{BOM2vendorId}" />
                                    </ui:template>
                                </ui:Column>


                            </ui:columns>
                        </ui:Table>
                    </VBox>

                    <VBox class="similarVBox" fitContainer="true" height="100%" renderType="Bare">
                        <ui:Table id="cmpSmlrTable" rows="{/}" selectionMode="None" alternateRowColors="true" enableCellFilter="true" enableColumnReordering="true" threshold="20" rowMode="Auto" noData="No Data">
                            <ui:extension>
                                <OverflowToolbar style="Clear">
                                    <Title id="similarTblttl" text="{i18n>BOM_SIM}" class="tblHdng" />

                                    <ToolbarSpacer />

                                    <Button icon="sap-icon://download" press="onSmlrDwnldSelect" />

                                    <Button icon="sap-icon://action-settings" press="onSimilarStngSelect" />
                                </OverflowToolbar>
                            </ui:extension>

                            <ui:columns>

                                    <ui:Column sortProperty="zmpaPartno" filterProperty="zmpaPartno" width="9rem"  >
                                        <Label text="{i18n>MPA_FPN_P}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{zmpaPartno}" wrapping="true" maxLines="1" tooltip="{i18n>MPA_FPN_P}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryNumber" filterProperty="factoryNumber" width="9rem"  >
                                        <Label text="{i18n>FAC}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{factoryNumber}" wrapping="true" maxLines="1" tooltip="{i18n>FAC}" ></Text>
                                        </ui:template>
                                    </ui:Column>
                                    
                                    <ui:Column sortProperty="levelNo" filterProperty="levelNo" width="9rem"  >
                                        <Label text="{i18n>LEVEL_NO}" wrapping="true" ></Label>
                                        <ui:template>
                                            <Text text="{levelNo}" wrapping="true" maxLines="1" tooltip="{i18n>LEVEL_NO}" ></Text>
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="generatedHppn" filterProperty="generatedHppn" width="9rem">
                                        <Label text="{i18n>GEN_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{generatedHppn}" wrapping="true" maxLines="1" tooltip="{generatedHppn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="untUsg" filterProperty="untUsg" width="9rem">
                                        <Label text="{i18n>MPN_QTY}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{untUsg}" wrapping="true" maxLines="1" tooltip="{untUsg}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="hppnchildpn" filterProperty="hppnchildpn" width="9rem">
                                        <Label text="{i18n>MAT_NUM_HPPN}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{hppnchildpn}" wrapping="true" maxLines="1" tooltip="{hppnchildpn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="factoryChildPn" filterProperty="factoryChildPn" width="9rem">
                                        <Label text="{i18n>MPA_FPN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{factoryChildPn}" wrapping="true" maxLines="1" tooltip="{factoryChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="mpnChildPn" filterProperty="mpnChildPn" width="9rem">
                                        <Label text="{i18n>MPA_PN_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{mpnChildPn}" wrapping="true" maxLines="1" tooltip="{mpnChildPn}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="description" filterProperty="description" width="9rem">
                                        <Label text="{i18n>MPA_PDESC_C}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{description}" wrapping="true" maxLines="1" tooltip="{description}" />
                                        </ui:template>
                                    </ui:Column>


                                    <ui:Column sortProperty="uomAlt" filterProperty="uomAlt" width="9rem">
                                        <Label text="{i18n>UOM}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{uomAlt}" wrapping="true" maxLines="1" tooltip="{uomAlt}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="materialType" filterProperty="materialType" width="9rem">
                                        <Label text="{i18n>MAT_TYP}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{materialType}" wrapping="true" maxLines="1" tooltip="{materialType}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="sortString" filterProperty="sortString" width="9rem">
                                        <Label text="{i18n>SORT_STR}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{sortString}" wrapping="true" maxLines="1" tooltip="{sortString}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="marketShare" filterProperty="marketShare" width="9rem">
                                        <Label text="{i18n>MKT_SHARE}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{marketShare}" wrapping="true" maxLines="1" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="componentValidFrom" filterProperty="componentValidFrom" width="9rem">
                                        <Label text="{i18n>MPN_VF}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidFrom}" wrapping="true" maxLines="1" tooltip="{componentValidFrom}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="componentValidTo" filterProperty="componentValidTo" width="9rem">
                                        <Label text="{i18n>MPN_TO}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{componentValidTo}" wrapping="true" maxLines="1" tooltip="{componentValidTo}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="scrap" filterProperty="scrap" width="9rem">
                                        <Label text="{i18n>scrap}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{scrap}" wrapping="true" maxLines="1" tooltip="{scrap}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="altItemGroup" filterProperty="altItemGroup" width="9rem">
                                        <Label text="{i18n>altItemGroup}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{altItemGroup}" wrapping="true" maxLines="1" tooltip="{altItemGroup}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="manufName" filterProperty="manufName" width="9rem">
                                        <Label text="{i18n>manufName}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{manufName}" wrapping="true" maxLines="1" tooltip="{manufName}" />
                                        </ui:template>
                                    </ui:Column>

                                    <ui:Column sortProperty="vendorId" filterProperty="vendorId" width="9rem">
                                        <Label text="{i18n>vendorId}" wrapping="true" />

                                        <ui:template>
                                            <Text text="{vendorId}" wrapping="true" maxLines="1" tooltip="{vendorId}" />
                                        </ui:template>
                                    </ui:Column>
                                </ui:columns>
                        </ui:Table>
                    </VBox>
                    <VBox class="compareVBox" fitContainer="true" height="100%" renderType="Bare">
                        <OverflowToolbar style="Clear">
                            <ToolbarSpacer />
                            <Button icon="sap-icon://download" press="onCompareDownloadBOM" />

                            <SearchField placeholder="Filter Pumori PN for Child" value="{CompDataModel>/sHistorySearch}" search="filterGlobally" width="30%" />
                        </OverflowToolbar>

                        <HBox>
                            <VBox class="sapUiMediumMarginEnd">
                                <ui:TreeTable id="TreeTableBasic" rows="{path:'/', parameters: {arrayNames:['subComponents']}}" selectionMode="Single" enableSelectAll="false" ariaLabelledBy="title" rowSelectionChange="fnOnSelectionTreeBOM1">
                                    <ui:extension>
                                        <OverflowToolbar style="Clear">
                                            <Title id="titleBOM1" text="BOM1" />
                                        </OverflowToolbar>
                                    </ui:extension>
                                    <ui:columns>
                                        <ui:Column width="11rem">
                                            <Label text="Pumori PN for Child" />
                                            <ui:template>
                                                <Text text="{generatedHppn}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column width="2.5rem">
                                            <Label text="" />
                                            <ui:template>
                                                <HBox>
                                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-neutral" color="white" backgroundColor="#074e94" class="sapUICustomIconComp" visible="{isUnique}" />
                                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-not-equal" color="white" backgroundColor="#eb5a5a" class="sapUICustomIconComp" visible="{isDifferent}" />
                                                </HBox>
                                            </ui:template>
                                        </ui:Column>

                                        <ui:Column>
                                            <Label text="Usage Probability/Market Share" />
                                            <ui:template>
                                                <Text text="{marketShare}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Material Type" />
                                            <ui:template>
                                                <Text text="{materialType}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="QTY Required for Parent" />
                                            <ui:template>
                                                <Text text="{untUsg}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Valid From" />
                                            <ui:template>
                                                <Text text="{componentValidFrom}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Valid To" />
                                            <ui:template>
                                                <Text text="{componentValidTo}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Scrap" />
                                            <ui:template>
                                                <Text text="{scrap}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Alternative Group" />
                                            <ui:template>
                                                <Text text="{altItemGroup}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                    </ui:columns>
                                </ui:TreeTable>
                            </VBox>
                            <VBox>
                                <ui:TreeTable id="TreeTableBasicTrail" rows="{path:'/', parameters: {arrayNames:['subComponents']}}" selectionMode="Single" enableSelectAll="false" rowSelectionChange="fnOnSelectionTreeBOM2" ariaLabelledBy="title">
                                    <ui:extension>
                                        <OverflowToolbar style="Clear">
                                            <Title id="titleBOM2" text="BOM2" />
                                        </OverflowToolbar>
                                    </ui:extension>
                                    <ui:columns>
                                        <ui:Column width="11rem">
                                            <Label text="Pumori PN for Child" />
                                            <ui:template>
                                                <Text text="{generatedHppn}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column width="2.5rem">
                                            <Label text="" />
                                            <ui:template>
                                                <HBox>
                                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-outbound-delivery-inactive" color="white" backgroundColor="#074e94" class="sapUICustomIconComp" visible="{isUnique}" />
                                                    <core:Icon src="sap-icon://BusinessSuiteInAppSymbols/icon-not-equal" color="white" backgroundColor="#eb5a5a" class="sapUICustomIconComp" visible="{isDifferent}" />
                                                </HBox>
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Usage Probability/Market Share" />
                                            <ui:template>
                                                <Text text="{marketShare}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Material Type" />
                                            <ui:template>
                                                <Text text="{materialType}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="QTY Required for Parent" />
                                            <ui:template>
                                                <Text text="{untUsg}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Valid From" />
                                            <ui:template>
                                                <Text text="{componentValidFrom}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Valid To" />
                                            <ui:template>
                                                <Text text="{componentValidTo}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Scrap" />
                                            <ui:template>
                                                <Text text="{scrap}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                        <ui:Column>
                                            <Label text="Alternative Group" />
                                            <ui:template>
                                                <Text text="{altItemGroup}" wrapping="false" />
                                            </ui:template>
                                        </ui:Column>
                                    </ui:columns>
                                </ui:TreeTable>
                            </VBox>
                        </HBox>
                    </VBox>
                    
                </VBox>
            </VBox>
        </content>
    </Page>
</mvc:View>




app/psbomcompui/webapp/controller/Home.controller.js




//-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    Compare BOM 
// WRICEF No        :    
// Release          :    M2 Release
// Author           :    Samudrala,Sreenivas
// Date             :    14.05.2024
// Description      :    Compare BOM
//-----------------------------------------------------------------------------------*
//Descriptions: Holds the logic for display of initial page of app
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/m/MessageBox"
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller,Filter,FilterOperator,MessageBox) {
        "use strict";

        return Controller.extend("pumorips.bomcompare.psbomcompui.controller.Home", {
            onInit: function () {
                this.smartFilterBar = this.getView().byId("smartFilterBarComp");
                this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);
                this.oRouter.getRoute("Home").attachPatternMatched(this._onObjectMatched, this);
            },
            /**
            * Getter for the resource bundle text.
            * @public
            * @param 
            * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component
            */

            getResourceBundleText: function (sTextProperty) {
                return this.getOwnerComponent().getModel("i18n").getResourceBundle().getText(sTextProperty);
            },

            /* =========================================================== */
            /* internal methods                                            */
            /* =========================================================== */

            /**
            * App view routing pattern change event handler
            * this method will trigger each time user navigate between views
            * This method used here to load, initialize home screen 
            * **/

            _onObjectMatched: function () {
                var oSmartTable = this.getView().byId("idCompSmrtTable");
                var oSmartFilterBar = this.getView().byId(oSmartTable.getSmartFilterId());
                if (oSmartTable && oSmartFilterBar.isInitialised()) {
                    oSmartTable.rebindTable(true);
                }
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                var compObj = CompDataModel.getProperty("/compObj");
                // this.oncloseCompareSelect();

                
                var oFilterCompare = { "aSelected": [] };
                
                
                selDataModel.setProperty("/bSelMPA", true);
                selDataModel.setProperty("/bSelMPNQ", true);
                selDataModel.setProperty("/bSelMPNValidFrom", true);
                selDataModel.setProperty("/bSelMPNValidTo", true);
                selDataModel.setProperty("/bSelMarketShare", true);
                selDataModel.setProperty("/aItemsCombobox", []);
                selDataModel.setProperty("/oFilterCompare", oFilterCompare);
                selDataModel.setProperty("/sInput", "partNumber");
                var stext = this.getResourceBundleText("COMP_TEXT_DEFAULT");
                selDataModel.setProperty("/sTextDyn", this.getResourceBundleText("COMP_TEXT_DEFAULT"));
                selDataModel.refresh();
            },

            /**
             * triggers before PumoriPS BOM Display table data rebind table
             */

            onBeforeRebindTable: function (oEvent) {

                var smartTable = oEvent.getSource()
                var oBindingParams = oEvent.getParameter("bindingParams");
                oBindingParams.parameters = oBindingParams.parameters || {};
                if (smartTable) {
                    var aFilters = [];
                    var frmDt = this.smartFilterBar.getControlByKey("frmDt").getDateValue();
                    var toDt = this.smartFilterBar.getControlByKey("toDt").getDateValue();
                    var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({ pattern: "yyyy-MM-dd", UTC: false });

                    if (frmDt != null) {
                        var dateFormattedFrmDt = dateFormat.format(new Date(frmDt));
                        aFilters.push(new Filter("bomValidFrom", FilterOperator.GE, dateFormattedFrmDt));
                    }
                    if (toDt != null) {
                        var dateFormattedToDt = dateFormat.format(new Date(toDt));
                        aFilters.push(new Filter("bomValidTo", FilterOperator.LE, dateFormattedToDt));
                    }

                    if (aFilters.length > 0) {
                        oBindingParams.filters.push(new Filter(aFilters, true));
                    }
                }

            },

            onItemSelect: function(oEvent){
                if ((oEvent.getSource().getSelectedItems().length > 0) || (oEvent.mParameters.selectAll === true)) {
                    this.getView().byId("cmparBtn").setEnabled(true);
                }
                else {
                    this.getView().byId("cmparBtn").setEnabled(false);
                }
            },

            compareSelItms: function(oEvent){
                var aSel=[];
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                this.aSelData = this.getView().byId("idPMtable1").getSelectedItems();
                if (oEvent.getSource().sId.split("--")[1] === "cmparBtn") {
                    if (this.aSelData.length === 2) {
                        // Validation for same zmpaPartno and factory code values
                        if (this.aSelData[0].getBindingContext().getObject().zmpaPartno === this.aSelData[1].getBindingContext().getObject().zmpaPartno && 
                            this.aSelData[0].getBindingContext().getObject().factoryNumber === this.aSelData[1].getBindingContext().getObject().factoryNumber) {
                            
                                var oSelData = {
                                "zmpaPartno": this.aSelData[0].getBindingContext().getObject().zmpaPartno,
                                "factoryNumber": this.aSelData[0].getBindingContext().getObject().factoryNumber,
                                "bomqty": this.aSelData[0].getBindingContext().getObject().baseQuantity,
                                "bom1Version":  this.aSelData[0].getBindingContext().getObject().bomVersion,
                                "bom2Version": this.aSelData[1].getBindingContext().getObject().bomVersion
                                };
                                selDataModel.setProperty("/oSelData", oSelData);
                            } else {
                                MessageBox.warning(this.getResourceBundleText("SELECT_WARNING"), {
                                    actions: [MessageBox.Action.OK],
                                    emphasizedAction: MessageBox.Action.OK
                                });
                                return;
                            }
                    }   else {
                            MessageBox.warning(this.getResourceBundleText("SELECT_WARNING2"), {
                                actions: [MessageBox.Action.OK],
                                emphasizedAction: MessageBox.Action.OK
                            });
                            return;
                        }
                    var oSelData = selDataModel.getProperty("/oSelData");
                    aSel[0]=selDataModel.getProperty("/bSelMPA");
                    aSel[1]=selDataModel.getProperty("/bSelMPNQ");
                    aSel[2]=selDataModel.getProperty("/bSelMPNValidFrom");
                    aSel[3]=selDataModel.getProperty("/bSelMPNValidTo");
                    aSel[4]=selDataModel.getProperty("/bSelMarketShare");
                        
                    oSelData.aSel = aSel;
                    oSelData.sInput = selDataModel.getProperty("/sInput");
                    this.getOwnerComponent().getRouter().navTo("Compare", { obj: JSON.stringify(oSelData) });
                }
            },
            /**
             * triggers when the Selection Parameters for comparison Button is pressed
             */
            onResetCompareParam: function (oEvent) {


                var oThisController = this;

                if (!oThisController.compareSelectOpen) {
                    oThisController.compareSelectOpen = sap.ui.xmlfragment("pumorips.bomcompare.psbomcompui.fragments.compareSelect", oThisController);
                    var i18nModel = new sap.ui.model.resource.ResourceModel({
                        bundleUrl : "i18n/i18n.properties"
                    });
                    this.compareSelectOpen.setModel(i18nModel, "i18n");
                }
                this.getView().addDependent(oThisController.compareSelectOpen);
                

                oThisController.compareSelectOpen.open();


            },
             /**
             * triggers when the fragment for compare selection is closed
             */
             oncloseCompareSelect: function (oEvent) {
               

                var oThisController = this;
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                var bSelMPA = selDataModel.getProperty("/bSelMPA");
                var bSelMPNQ = selDataModel.getProperty("/bSelMPNQ");
                var bSelMPNValidFrom = selDataModel.getProperty("/bSelMPNValidFrom");
                var bSelMPNValidTo = selDataModel.getProperty("/bSelMPNValidTo");
                var bSelMarketShare = selDataModel.getProperty("/bSelMarketShare");
                var sInput = selDataModel.getProperty("/sInput");
                // && !bSelMarketShare
                if (!bSelMPA && !bSelMPNQ && !bSelMPNValidFrom && !bSelMPNValidTo && !bSelMarketShare)  {
                    MessageBox.warning(this.getResourceBundleText("COMP_WARNING"), {
                        actions: [MessageBox.Action.OK],
                        emphasizedAction: MessageBox.Action.OK
                    });
                    return;
                }
                var stext = "";
                if (bSelMPA) {
                    stext = stext + this.getResourceBundleText("MPA_TEXT");
                }
                if (bSelMPNQ) {
                    stext = stext + this.getResourceBundleText("MPN_TEXT");
                }
                if (bSelMPNValidFrom) {
                    stext = stext + this.getResourceBundleText("MPN_VALID_FRM");
                }
                if (bSelMPNValidTo) {
                    stext = stext + this.getResourceBundleText("MPN_VALID_TO");
                }
                if (bSelMarketShare) {
                    stext = stext + this.getResourceBundleText("MARKET_SHARE_TEXT");
                }


                var sTextShow = stext +" "+ this.getResourceBundleText("COMP_TEXT");
                selDataModel.setProperty("/sTextDyn", sTextShow);
                oThisController.compareSelectOpen.close();
                

               
            },
            /**
             * The following methods are triggered with respect to the selection in Compare Select Fragment
             */
            checkDoneMPNQ: function (oEvent) {

                var bSelected = oEvent.getParameter('selected');
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                // var dfg = selDataModel.getProperty("/bSelMPNValidFrom");
                if (bSelected) {
                    selDataModel.setProperty("/bSelMPNQ", true);
                } else {
                    selDataModel.setProperty("/bSelMPNQ", false);

                }


            },
            checkDoneMPA: function (oEvent) {

                var bSelected = oEvent.getParameter('selected');
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                // var dfg = selDataModel.getProperty("/bSelMPNValidFrom");
                if (bSelected) {
                    selDataModel.setProperty("/bSelMPA", true);
                } else {
                    selDataModel.setProperty("/bSelMPA", false);

                }


            },
            checkDoneMPNVF: function (oEvent) {

                var bSelected = oEvent.getParameter('selected');
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                // var dfg = selDataModel.getProperty("/bSelMPNValidFrom");
                if (bSelected) {
                    selDataModel.setProperty("/bSelMPNValidFrom", true);
                } else {
                    selDataModel.setProperty("/bSelMPNValidFrom", false);

                }


            },
            checkDoneMPNVT: function (oEvent) {

                var bSelected = oEvent.getParameter('selected');
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                // var dfg = selDataModel.getProperty("/bSelMPNValidFrom");
                if (bSelected) {
                    selDataModel.setProperty("/bSelMPNValidTo", true);
                } else {
                    selDataModel.setProperty("/bSelMPNValidTo", false);

                }


            },
            checkDoneMS: function (oEvent) {

                var bSelected = oEvent.getParameter('selected');
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                // var dfg = selDataModel.getProperty("/bSelMPNValidFrom");
                if (bSelected) {
                    selDataModel.setProperty("/bSelMarketShare", true);
                } else {
                    selDataModel.setProperty("/bSelMarketShare", false);

                }


            },
            onInputChange: function (oEvent) {

                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                var selectedItem = oEvent.getSource().getSelectedItem();
                var sSelkey = selectedItem.mProperties.key;
                selDataModel.setProperty("/sInput", sSelkey);


            },
            /**
            * triggers when clear filter in filter bar is pressed
            */ 

            clearFilters: function () {
                this.byId("fltrValidFrm").setValue(null);
                this.byId("fltrValidTo").setValue(null);
            },
        });
    });





    app/psbomcompui/webapp/controller/Compare.controller.js




    //-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    Compare BOM 
// WRICEF No        :    
// Release          :    M2 Release
// Author           :    Samudrala,Sreenivas
// Date             :    14.05.2024
// Description      :    Compare BOM
//-----------------------------------------------------------------------------------*
//Descriptions: Holds the logic for display of Compare Screen
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/ui/core/library",
    "./TableSetting",
    "sap/ui/table/TablePersoController",
    "sap/ui/export/library",
    "sap/ui/export/Spreadsheet",
    "../formatters/compareFormatter",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
    "sap/ui/core/IconPool"
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller, JSONModel, coreLibrary, tableSetting, TablePersoController, exportLibrary, Spreadsheet, formatter, Filter, FilterOperator, IconPool) {
        "use strict";
        var valueState = coreLibrary.ValueState;
        return Controller.extend("pumorips.bomcompare.psbomcompui.controller.Compare", {
            /* =========================================================== */
            /* life cycle methods                                            */
            /* =========================================================== */

            onInit: function () {
                this.unq1Tbl = this.byId("cmpUnq1Table"),
                    this.unq2Tbl = this.byId("cmpUnq2Table"),
                    this.diffTbl = this.byId("cmpDiffTable"),
                    this.smlrTbl = this.byId("cmpSmlrTable");
                this.compareTbl = this.byId("TreeTableBasic");
                this.compareTblTrail = this.byId("TreeTableBasicTrail");
                var bArrIcon = [];
                var cObjIcon = {};
                //Fiori Theme font family and URI
                var tFontFamily = {
                    fontFamily: "SAP-icons-TNT",
                    fontURI: sap.ui.require.toUrl("sap/tnt/themes/base/fonts/")
                };
                //Registering to the icon pool
                IconPool.registerFont(tFontFamily);
                bArrIcon.push(IconPool.fontLoaded("SAP-icons-TNT"));
                cObjIcon["SAP-icons-TNT"] = tFontFamily;
                //SAP Business Suite Theme font family and URI
                var BFont = {
                    fontFamily: "BusinessSuiteInAppSymbols",
                    fontURI: sap.ui.require.toUrl("sap/ushell/themes/base/fonts/")
                };
                //Registering to the icon pool
                IconPool.registerFont(BFont);
                bArrIcon.push(IconPool.fontLoaded("BusinessSuiteInAppSymbols"));
                cObjIcon["BusinessSuiteInAppSymbols"] = BFont;


                this._BOM1 = new TablePersoController({
                    table: this.unq1Tbl,
                    //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                    componentName: "table",
                    //resetAllMode: ResetAllMode.ServiceReset,
                    persoService: tableSetting
                });
                this._BOM2 = new TablePersoController({
                    table: this.unq2Tbl,
                    //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                    componentName: "table",
                    //resetAllMode: ResetAllMode.ServiceReset,
                    persoService: tableSetting
                });
                this._Diff = new TablePersoController({
                    table: this.diffTbl,
                    //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                    componentName: "table",
                    //resetAllMode: ResetAllMode.ServiceReset,
                    persoService: tableSetting
                });
                this._Similar = new TablePersoController({
                    table: this.smlrTbl,
                    //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                    componentName: "table",
                    //resetAllMode: ResetAllMode.ServiceReset,
                    persoService: tableSetting
                });
                this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);
                this.oRouter.getRoute("Compare").attachPatternMatched(this._onObjectMatched, this);

            },

            /* =========================================================== */
            /* internal methods                                            */
            /* =========================================================== */
            /**
            * App view routing pattern change event handler
            * this method will trigger each time user navigate between views
            * This method used here to load, initialize home screen 
            * **/
            _onObjectMatched: function (oEve) {
                var that = this;
                this.oSelData = JSON.parse(oEve.getParameters().arguments.obj);
                this.byId("catgSegBtn").setSelectedKey("unique");
                this.oDataModel = this.getOwnerComponent().getModel();
                this._GetDataBOM1();
                this._GetDataBOM2();

                that.getView().byId("iconID1").setVisible(false);
                that.getView().byId("iconID11").setVisible(false);
                that.getView().byId("iconID2").setVisible(false);
                that.getView().byId("iconID22").setVisible(false);
                that.getView().byId("iconID3").setVisible(false);
                that.getView().byId("iconID33").setVisible(false);

                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                selDataModel.setData(this.oSelData);

                var bSelMPA = this.oSelData.aSel[0];
                var bSelMPNQ = this.oSelData.aSel[1];
                var bSelMPNValidFrom = this.oSelData.aSel[2];
                var bSelMPNValidTo = this.oSelData.aSel[3];
                var bSelMarketShare = this.oSelData.aSel[4];
                var sInput = this.oSelData.sInput;
                var bparentPart = true;
                var blevelNumber = false;
                var bseqNumber = false;
                if (sInput == "partNumber") {
                    bparentPart = true;
                    blevelNumber = false;
                    bseqNumber = false;

                } else if (sInput == "levelNumber") {
                    bparentPart = false;
                    blevelNumber = true;
                    bseqNumber = false;

                }
                else {
                    bparentPart = false;
                    blevelNumber = false;
                    bseqNumber = true;


                }




                const inputCriteria = {

                    "childPart": true,

                    "parentPart": bparentPart,

                    "levelNo": blevelNumber,

                    "lineNo": bseqNumber

                };
                const sinputCriteria = JSON.stringify(inputCriteria);



                const comparisionParameters = {

                    "factoryChildPn": bSelMPA,

                    "untUsg": bSelMPNQ,

                    "componentValidFrom": bSelMPNValidFrom,

                    "componentValidTo": bSelMPNValidTo,

                    "marketShare": bSelMarketShare

                };
                const scomparisionParameters = JSON.stringify(comparisionParameters);



                this.urlParameters = {
                    "zmpaPartno": this.oSelData.zmpaPartno,
                    "factoryNumber": this.oSelData.factoryNumber,
                    "bom1Version": this.oSelData.bom1Version,
                    "bom2Version": this.oSelData.bom2Version,
                    "comparisionParameters": scomparisionParameters,
                    "inputCriteria": sinputCriteria
                };

                this._uniqueGetData(this.oDataModel, that);
                this.unq1Tbl.setBusy(true);
                this.unq2Tbl.setBusy(true);

                this.oDataModel.callFunction("/BOMCountItems", {
                    method: "GET",
                    urlParameters: this.urlParameters,
                    success: function (oData, response) {

                        CompDataModel.setProperty("/totalUni", oData.BOMCountItems.uniqueComponents.total);
                        CompDataModel.setProperty("/BOM1", oData.BOMCountItems.uniqueComponents.BOM1);
                        CompDataModel.setProperty("/BOM2", oData.BOMCountItems.uniqueComponents.BOM2);
                        CompDataModel.setProperty("/totalComp", oData.BOMCountItems.commonComponents.total);
                        CompDataModel.setProperty("/similar", oData.BOMCountItems.commonComponents.similar);
                        CompDataModel.setProperty("/difference", oData.BOMCountItems.commonComponents.difference);
                        CompDataModel.refresh();

                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);

                    }
                });

            },

            /**
        * Getter for the resource bundle text.
        * @public
        * @param 
        * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component
        */
            getResourceBundleText: function (sTextProperty) {
                return this.getOwnerComponent().getModel("i18n").getResourceBundle().getText(sTextProperty);
            },

            //internal method to get the header details for BOM1

            _GetDataBOM1: function () {
                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({ pattern: "yyyy-MM-dd" });
                var aFilters = [];
                aFilters.push(new Filter("zmpaPartno", FilterOperator.EQ, this.oSelData.zmpaPartno));
                aFilters.push(new Filter("factoryNumber", FilterOperator.EQ, this.oSelData.factoryNumber));
                aFilters.push(new Filter("bomVersion", FilterOperator.EQ, this.oSelData.bom1Version));

                this.oDataModel.read("/BOMHeader", {
                    filters: aFilters,
                    success: function (oData, oResponse) {

                        CompDataModel.setProperty("/description", oData.results[0].description);
                        CompDataModel.setProperty("/bom1validFrom", dateFormat.format(oData.results[0].bomValidFrom));
                        CompDataModel.setProperty("/bom1validTo", dateFormat.format(oData.results[0].bomValidTo));
                        CompDataModel.refresh();
                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                    }

                });


            },

            //internal method to get the header details for BOM2

            _GetDataBOM2: function () {

                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({ pattern: "yyyy-MM-dd" });
                var aFilters = [];
                aFilters.push(new Filter("zmpaPartno", FilterOperator.EQ, this.oSelData.zmpaPartno));
                aFilters.push(new Filter("factoryNumber", FilterOperator.EQ, this.oSelData.factoryNumber));
                aFilters.push(new Filter("bomVersion", FilterOperator.EQ, this.oSelData.bom2Version));

                this.oDataModel.read("/BOMHeader", {
                    filters: aFilters,
                    success: function (oData, oResponse) {
                        CompDataModel.setProperty("/bom2validFrom", dateFormat.format(oData.results[0].bomValidFrom));
                        CompDataModel.setProperty("/bom2validTo", dateFormat.format(oData.results[0].bomValidTo));
                        CompDataModel.refresh();

                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);

                    }
                });
            },
            //internal method to export the data through spreadsheet

            _onExport: function (data, aCols, sName) {
                var items, oSettings, oSheet;
                var oModel = new JSONModel(data);

                items = oModel.getProperty('/');

                oSettings = {
                    workbook: { columns: aCols },
                    dataSource: items,
                    fileName: sName,
                };

                oSheet = new Spreadsheet(oSettings);
                oSheet.build()
                    .then(function () {
                        MessageToast.show(this.getResourceBundleText("EXP_DONE"));
                    })
                    .finally(oSheet.destroy);
            },
            //method for Unique table service call

            _uniqueGetData: function (oDataModel, that) {
                var excelModel = this.getOwnerComponent().getModel("excelModel");


                oDataModel.callFunction("/BOMUniqueItems", {
                    method: "GET",
                    urlParameters: this.urlParameters,
                    success: function (oData, response) {
                        var oModel = new JSONModel(oData.BOMUniqueItems);
                        that.unq1Tbl.setModel(oModel);
                        excelModel.setProperty("/unq1", oData.BOMUniqueItems);
                        excelModel.setProperty("/unq1Length", oData.BOMUniqueItems.BOM1.length);
                        var oModel2 = new JSONModel(oData.BOMUniqueItems);
                        excelModel.setProperty("/unq2", oData.BOMUniqueItems);
                        excelModel.setProperty("/unq2Length", oData.BOMUniqueItems.BOM2.length);
                        that.unq2Tbl.setModel(oModel2);
                        that.unq1Tbl.setBusy(false);
                        that.unq2Tbl.setBusy(false);
                    },
                    error: function (oError) {

                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                        that.unq1Tbl.setBusy(false);
                        that.unq2Tbl.setBusy(false);

                    }
                });
                $(".diffVBox").css("display", "none");
                $(".similarVBox").css("display", "none");
                $(".uniqueVBox").css("display", "block");
                $(".compareVBox").css("display", "none");
            },
            /**
            * Convenience method for displaying error messages
            * @public
            */
            _errorDialog: function (msg) {
                var errorDialog = new sap.m.Dialog({
                    title: "Error",
                    state: valueState.Error,
                    content: new sap.m.Text({ text: msg }).addStyleClass("errorText"),
                    endButton: new sap.m.Button({
                        text: "Ok",
                        press: function () {
                            errorDialog.close();
                        }.bind(this)
                    })
                });
                errorDialog.open();

            },
            /* =========================================================== */
            /* event handlers                                              */
            /* =========================================================== */

            /**
            * triggers with the selction of Unique in Segmented Button
            */
            uniqueSelect: function () {
                var that = this;
                this.unq1Tbl.setBusy(true);
                this.unq2Tbl.setBusy(true);
                this._uniqueGetData(this.oDataModel, that);
                that.getView().byId("iconID1").setVisible(false);
                that.getView().byId("iconID11").setVisible(false);
                that.getView().byId("iconID2").setVisible(false);
                that.getView().byId("iconID22").setVisible(false);
                that.getView().byId("iconID3").setVisible(false);
                that.getView().byId("iconID33").setVisible(false);
            },
            /**
            * triggers with the selction of Different in Segmented Button
            */
            diffSelect: function () {
                var that = this;
                $(".uniqueVBox").css("display", "none");
                $(".similarVBox").css("display", "none");
                $(".diffVBox").css("display", "block");
                $(".compareVBox").css("display", "none");
                var excelModel = this.getOwnerComponent().getModel("excelModel");
                that.diffTbl.setBusy(true);
                this.oDataModel.callFunction("/BOMDifferItems", {
                    method: "GET",
                    urlParameters: this.urlParameters,
                    success: function (oData, response) {
                        var oModel = new JSONModel(oData.results);
                        excelModel.setProperty("/diff", oData.results);
                        excelModel.setProperty("/diffLength", oData.results.length);
                        that.diffTbl.setModel(oModel);
                        that.diffTbl.setBusy(false);
                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                        that.diffTbl.setBusy(false);

                    }
                });
                that.getView().byId("iconID1").setVisible(false);
                that.getView().byId("iconID11").setVisible(false);
                that.getView().byId("iconID2").setVisible(false);
                that.getView().byId("iconID22").setVisible(false);
                that.getView().byId("iconID3").setVisible(false);
                that.getView().byId("iconID33").setVisible(false);

            },
            /**
             * triggers with the selction of Similar in Segmented Button
             */
            similarSelect: function () {
                var that = this;
                that.smlrTbl.setBusy(true);
                var excelModel = this.getOwnerComponent().getModel("excelModel");
                that.getView().byId("iconID1").setVisible(false);
                that.getView().byId("iconID11").setVisible(false);
                that.getView().byId("iconID2").setVisible(false);
                that.getView().byId("iconID22").setVisible(false);
                that.getView().byId("iconID3").setVisible(false);
                that.getView().byId("iconID33").setVisible(false);
                $(".diffVBox").css("display", "none");
                $(".uniqueVBox").css("display", "none");
                $(".similarVBox").css("display", "block");
                $(".compareVBox").css("display", "none");
                this.oDataModel.callFunction("/BOMSimilarItems", {
                    method: "GET",
                    urlParameters: this.urlParameters,
                    success: function (oData, response) {
                        var oModel = new JSONModel(oData.results);
                        excelModel.setProperty("/similar", oData.results);
                        excelModel.setProperty("/similarLength", oData.results.length);

                        that.smlrTbl.setModel(oModel);
                        that.smlrTbl.setBusy(false);
                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                        that.smlrTbl.setBusy(false);

                    }
                });
            },
            /**
            * triggers with the user clicks on search
            */
            filterGlobally: function (oEvent) {

                let that = this;
                var sQuery = oEvent.getParameter("query");
                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                var catalog = CompDataModel.getProperty("/catalogBOM1");
                var catalogFilterFinal = catalog;

                var catalogTrail = CompDataModel.getProperty("/catalogBOM2");
                var catalogFilterTrailFinal = catalogTrail;
                let flatten = (subComponents, getChildren, levelNo) => Array.prototype.concat.apply(
                    subComponents.map(x => ({ ...x, levelNo: levelNo || 1 })),
                    subComponents.map(x => flatten(getChildren(x) || [], getChildren, (levelNo || 1) + 1, x.id))
                );
                let extractChildren = x => x.subComponents;

                let flatCatalogTrailfilter = flatten(extractChildren(catalogTrail), extractChildren).map(x => delete x.subComponents && x);

                let flatCatalogfilter = flatten(extractChildren(catalog), extractChildren).map(x => delete x.subComponents && x);

                flatCatalogTrailfilter = flatCatalogTrailfilter.sort(this.sortByProperty('lineNo'));
                flatCatalogfilter = flatCatalogfilter.sort(this.sortByProperty('lineNo'));


                if (!sQuery) {

                    this.compareSelect();
                }

                else {
                    var Catalogflatfilter = flatCatalogfilter.filter(function (o) {
                        return ['generatedHppn'].some(function (k) {
                            return o[k].toString().indexOf(sQuery) !== -1;
                        });

                    });
                    var Catalogfilter = flatCatalogTrailfilter.filter(function (o) {
                        return ['generatedHppn'].some(function (k) {
                            return o[k].toString().indexOf(sQuery) !== -1;
                        });

                    });

                    var iIndexTree1;
                    var iIndexTree2;

                    var parentArrayIDCatalog = []
                    for (let i = 0; i < Catalogflatfilter.length; i++) {
                        if (Catalogflatfilter[i].parentPart) {
                            for (let j = 1; j < flatCatalogfilter.length; j++) {
                                if (flatCatalogfilter[j].generatedHppn == Catalogflatfilter[i].generatedHppn) {
                                    for (let k = j; k => 0; --k) {
                                        if (flatCatalogfilter[k].parentPart == flatCatalogfilter[0].generatedHppn) {
                                            parentArrayIDCatalog.push(flatCatalogfilter[k].generatedHppn);
                                            break;
                                        }
                                    }
                                }

                            }
                        }
                        else {
                            parentArrayIDCatalog.push(Catalogflatfilter[i].generatedHppn);
                        }
                    };
                    function removeDuplicates(arr) {
                        return arr.filter((item,
                            index) => arr.indexOf(item) === index);
                    }

                    parentArrayIDCatalog = removeDuplicates(parentArrayIDCatalog);
                    var parentArrayIDCataloftrail = [];
                    for (let i = 0; i < Catalogfilter.length; i++) {
                        if (Catalogfilter[i].parentPart) {
                            for (let j = 1; j < flatCatalogTrailfilter.length; j++) {
                                if (flatCatalogTrailfilter[j].generatedHppn == Catalogfilter[i].generatedHppn) {
                                    for (let k = j; k => 0; --k) {
                                        if (flatCatalogTrailfilter[k].parentPart == flatCatalogTrailfilter[0].generatedHppn) {
                                            parentArrayIDCataloftrail.push(flatCatalogTrailfilter[k].generatedHppn);
                                            break;
                                        }
                                    }
                                }

                            }
                        }
                        else {
                            parentArrayIDCataloftrail.push(Catalogflatfilter[i].generatedHppn);
                        }
                    };
                    parentArrayIDCataloftrail = removeDuplicates(parentArrayIDCataloftrail);

                    var finalfiltertrail = []
                    if (parentArrayIDCataloftrail.length) {

                        for (let j = 0; j < parentArrayIDCataloftrail.length; j++) {
                            for (let i = 0; i < catalogTrail.subComponents[0].subComponents.length; i++) {
                                if (parentArrayIDCataloftrail[j] == catalogTrail.subComponents[0].subComponents[i].generatedHppn) {
                                    finalfiltertrail.push(catalogTrail.subComponents[0].subComponents[i]);

                                }

                            }
                        }
                        catalogFilterTrailFinal.subComponents[0].subComponents = finalfiltertrail;

                    } else {

                        catalogFilterTrailFinal.subComponents[0].subComponents = [];
                    }

                    var finalfilter = []
                    if (parentArrayIDCatalog.length) {

                        for (let j = 0; j < parentArrayIDCatalog.length; j++) {
                            for (let i = 0; i < catalog.subComponents[0].subComponents.length; i++) {
                                if (parentArrayIDCatalog[j] == catalog.subComponents[0].subComponents[i].generatedHppn) {
                                    finalfilter.push(catalog.subComponents[0].subComponents[i]);

                                }

                            }
                        }

                        catalogFilterFinal.subComponents[0].subComponents = finalfilter;
                    } else {

                        catalogFilterFinal.subComponents[0].subComponents = [];
                    }

                    let flatTree2filtered = flatten(extractChildren(catalogFilterTrailFinal), extractChildren).map(x => delete x.subComponents && x);
                    var flatTree2filteredsort = flatTree2filtered.sort(this.sortByProperty('lineNo'));
                    // var flatsortCatalogTrailfilter = flatCatalogTrailfilter.sort(this.sortByProperty('id'));

                    let flatTree1filtered = flatten(extractChildren(catalogFilterFinal), extractChildren).map(x => delete x.subComponents && x);
                    var flatTree1filteredsort = flatTree1filtered.sort(this.sortByProperty('lineNo'));

                    for (let ai = 0; ai < flatTree2filteredsort.length; ai++) {
                        if (flatTree2filteredsort[ai].generatedHppn == sQuery) {
                            iIndexTree2 = ai;
                            break;

                        }

                    }
                    for (let bi = 0; bi < flatTree1filteredsort.length; bi++) {
                        if (flatTree1filteredsort[bi].generatedHppn == sQuery) {
                            iIndexTree1 = bi;
                            break;

                        }

                    }
                    var oModelFilter = new JSONModel(catalogFilterFinal);
                    var oModelFilterTrail = new JSONModel(catalogFilterTrailFinal);
                    that.compareTbl.setModel(oModelFilter);
                    that.compareTbl.setBusy(false);
                    that.compareTblTrail.setModel(oModelFilterTrail);

                    that.compareTblTrail.setBusy(false);
                    this.compareTbl.expandToLevel(111);
                    this.compareTblTrail.expandToLevel(111);
                    that.compareTbl.setFirstVisibleRow(iIndexTree1);
                    that.compareTblTrail.setFirstVisibleRow(iIndexTree2);
                };

                this.compareTbl.setSelectedIndex(-1);
                this.compareTblTrail.setSelectedIndex(-1);
            },
            // Internal method for sorting the property
            sortByProperty: function (property) {
                return function (a, b) {
                    if (a[property] > b[property])
                        return 1;
                    else if (a[property] < b[property])
                        return -1;

                    return 0;
                }
            },
            /**
             * triggers with the selction of Compare BOM in Segmented Button
             */

            compareSelect: function () {
                var that = this;
                $(".uniqueVBox").css("display", "none");
                $(".similarVBox").css("display", "none");
                $(".diffVBox").css("display", "none");
                $(".compareVBox").css("display", "block");
                var excelModel = this.getOwnerComponent().getModel("excelModel");
                that.getView().byId("iconID1").setVisible(true);
                that.getView().byId("iconID11").setVisible(true);
                that.getView().byId("iconID2").setVisible(true);
                that.getView().byId("iconID22").setVisible(true);
                that.getView().byId("iconID3").setVisible(true);
                that.getView().byId("iconID33").setVisible(true);
                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");

                // this.compareTbl = this.byId("TreeTableBasic");
                that.compareTbl.setBusy(true);
                that.compareTblTrail.setBusy(true);

                this.compUrlParameters =  this.urlParameters;
                // {
                //     "zmpaPartno": this.urlParameters.zmpaPartno,
                //     "factoryNumber": this.urlParameters.factoryNumber,
                //     "bom1Version": this.urlParameters.bom1Version,
                //     "bom2Version": this.urlParameters.bom2Version

                // };
                // var rearray = this.transformTreeData(catalogTrail.clothing.categories);
                this.oDataModel.callFunction("/compareTree", {
                    method: "GET",
                    urlParameters: this.compUrlParameters,
                    success: function (oData, response) {

                        var oObjBOM = JSON.parse(oData.compareTree);

                        var catalog = {
                            "subComponents": oObjBOM.BOM1TreeData
                        };
                        var catalogTrail = {
                            "subComponents": oObjBOM.BOM2TreeData
                        };
                        console.log(catalog);
                        var oModel = new JSONModel(catalog);
                        var oModelTrail = new JSONModel(catalogTrail);
                        that.compareTbl.setModel(oModel);
                        that.compareTbl.setBusy(false);
                        that.compareTblTrail.setModel(oModelTrail);
                        that.compareTblTrail.setBusy(false);
                        that.compareTbl.expandToLevel(100);
                        that.compareTblTrail.expandToLevel(100);

                        excelModel.setProperty("/catalog", catalog);
                        excelModel.setProperty("/catalogTrail", catalogTrail);
                        CompDataModel.setProperty("/catalogBOM1", catalog);
                        CompDataModel.setProperty("/catalogBOM2", catalogTrail);


                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                        that.diffTbl.setBusy(false);

                    }
                });


            },

            /**
            * triggers when Download Button for Unique1 Select table
            */
            onUnq1DwnldSelect: function () {

                var that = this;
                var oView = that.getView()

                oView.setBusy(true);

                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var oDataExport = excelModel.getProperty("/unq1");
                if (oDataExport.BOM1) {
                    var aCols = this._createColumnConfigUnqBOM1();
                    that._onExport(oDataExport.BOM1, aCols, "BOM Compare Unique_1");
                    oView.setBusy(false);
                }
                else {
                    that._errorDialog("Error in download");
                    oView.setBusy(false);
                }

            },

            /**
             * triggers when Download Button for Unique2 Select table
             */
            onUnq2DwnldSelect: function () {
                var that = this;
                var oView = that.getView();

                oView.setBusy(true);

                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var oDataExport = excelModel.getProperty("/unq2");
                if (oDataExport.BOM2) {
                    var aCols = this._createColumnConfigUnqBOM2();
                    that._onExport(oDataExport.BOM2, aCols, "BOM Compare Unique_2");
                    oView.setBusy(false);
                }
                else {
                    that._errorDialog("Error in download");
                    oView.setBusy(false);
                }

            },
            /**
             * triggers when Download Button for Different Select table
             */
            onDiffDwnldSelect: function () {

                var that = this;
                var oView = that.getView()

                oView.setBusy(true);

                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var oDataExport = excelModel.getProperty("/diff");
                if (oDataExport) {
                    var aCols = this._createColumnConfigDiff();
                    that._onExport(oDataExport, aCols, "BOM Compare Diff");
                    oView.setBusy(false);
                }
                else {
                    that._errorDialog("Error in download");
                    oView.setBusy(false);
                }

            },
            /**
             * triggers when Download Button for Similar Select table
             */
            onSmlrDwnldSelect: function () {
                var that = this;
                var oView = that.getView();

                oView.setBusy(true);

                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var aCols = this._createColumnConfigSimilar();
                var oDataExport = excelModel.getProperty("/similar");
                if (oDataExport) {
                    that._onExport(oDataExport, aCols, "BOM Compare Similar");
                    oView.setBusy(false);
                }
                else {
                    that._errorDialog("Error in download");
                    oView.setBusy(false);
                }

            },
            /**
            * triggers when the hits on download BOM compare
            */
            onCompareDownloadBOM: function () {

                var that = this;
                var oView = that.getView();
                var selDataModel = this.getOwnerComponent().getModel("selDataModel");
                this.urlParametersDownload = this.urlParameters;

                oView.setBusy(true);
                var oFilter = [];
                oFilter[0] = new sap.ui.model.Filter("zmpaPartno", sap.ui.model.FilterOperator.EQ, "CompTestZmpa");
                oFilter[1] = new sap.ui.model.Filter("factoryNumber", sap.ui.model.FilterOperator.EQ, "CompTestFac");
                oFilter[2] = new sap.ui.model.Filter("bom1Version", sap.ui.model.FilterOperator.EQ, "1");
                oFilter[3] = new sap.ui.model.Filter("bom2Version", sap.ui.model.FilterOperator.EQ, "3");

                var aCols = this._createColumnConfigDownload();


                that.oDataModel.callFunction("/downloadCompareTree", {

                    method: "GET",
                    urlParameters: this.urlParametersDownload,
                    success: function (oData, response) {
                        that._onExport(oData.results, aCols, "Compare BOM Excel");
                        oView.setBusy(false);
                    },
                    error: function (oError) {
                        that._errorDialog(JSON.parse(oError.responseText).error.message.value);
                        oView.setBusy(false);

                    }

                });
            },
            //internal method for the column label creation of excel

            _createColumnConfigUnqBOM1: function () {
                return [
                    {
                        label: 'Factory PN for Parent',
                        property: 'zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'factoryNumber'
                    },
                    {
                        label: 'BOM1 Version',
                        property: 'bomVersion'
                    },
                    {
                        label: 'Level No',
                        property: 'levelNo'
                    },
                    {
                        label: 'Pumori PN for Child',
                        property: 'generatedHppn'
                    },
                    {
                        label: 'QTY Required for Parent',
                        property: 'untUsg'
                    },
                    {
                        label: 'Material Number(HPPN) for Child',
                        property: 'hppnchildpn'
                    },
                    {
                        label: 'Factory Part Number for Child',
                        property: 'factoryChildPn'
                    },
                    {
                        label: 'Manufacturer Part Number(MPN) for Child ',
                        property: 'mpnChildPn'
                    },
                    {
                        label: 'Factory Part Description for Child',
                        property: 'description'
                    },
                    {
                        label: 'Unit of Measure',
                        property: 'uomAlt'
                    },
                    {
                        label: 'Material Type',
                        property: 'materialType'
                    },
                    {
                        label: 'Identifier for Alternate Product',
                        property: 'sortString'
                    },
                    {
                        label: 'Usage Probability/Market Share',
                        property: 'marketShare'
                    },
                    {
                        label: 'Valid From',
                        property: 'componentValidFrom'
                    },
                    {
                        label: 'Valid To',
                        property: 'componentValidTo'
                    },
                    {
                        label: 'Scrap',
                        property: 'scrap'
                    },
                    {
                        label: 'Alternative Group',
                        property: 'altItemGroup'
                    },
                    {
                        label: 'Manufacturer Name',
                        property: 'manufname'
                    },
                    {
                        label: 'Manufacturer Location ID',
                        property: 'vendorId'
                    }

                ];
            },
            _createColumnConfigUnqBOM2: function () {
                return [
                    {
                        label: 'Factory PN for Parent',
                        property: 'zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'factoryNumber'
                    },
                    {
                        label: 'BOM2 Version',
                        property: 'bomVersion'
                    },
                    {
                        label: 'Level No',
                        property: 'levelNo'
                    },
                    {
                        label: 'Pumori PN for Child',
                        property: 'generatedHppn'
                    },
                    {
                        label: 'QTY Required for Parent',
                        property: 'untUsg'
                    },
                    {
                        label: 'Material Number(HPPN) for Child',
                        property: 'hppnchildpn'
                    },
                    {
                        label: 'Factory Part Number for Child',
                        property: 'factoryChildPn'
                    },
                    {
                        label: 'Manufacturer Part Number(MPN) for Child ',
                        property: 'mpnChildPn'
                    },
                    {
                        label: 'Factory Part Description for Child',
                        property: 'description'
                    },
                    {
                        label: 'Unit of Measure',
                        property: 'uomAlt'
                    },
                    {
                        label: 'Material Type',
                        property: 'materialType'
                    },
                    {
                        label: 'Identifier for Alternate Product',
                        property: 'sortString'
                    },
                    {
                        label: 'Usage Probability/Market Share',
                        property: 'marketShare'
                    },
                    {
                        label: 'Valid From',
                        property: 'componentValidFrom'
                    },
                    {
                        label: 'Valid To',
                        property: 'componentValidTo'
                    },
                    {
                        label: 'Scrap',
                        property: 'scrap'
                    },
                    {
                        label: 'Alternative Group',
                        property: 'altItemGroup'
                    },
                    {
                        label: 'Manufacturer Name',
                        property: 'manufname'
                    },
                    {
                        label: 'Manufacturer Location ID',
                        property: 'vendorId'
                    }

                ];
            },
            _createColumnConfigSimilar: function () {
                return [
                    {
                        label: 'Factory PN for Parent',
                        property: 'zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'factoryNumber'
                    },
                    {
                        label: 'Level No',
                        property: 'levelNo'
                    },
                    {
                        label: 'Factory Part Number for Child',
                        property: 'factoryChildPn'
                    },
                    {
                        label: 'Manufacturer Part Number(MPN) for Child ',
                        property: 'mpnChildPn'
                    },
                    {
                        label: 'Factory Part Description for Child',
                        property: 'description'
                    },
                    {
                        label: 'Material Number(HPPN) for Child',
                        property: 'hppnchildpn'
                    },
                    {
                        label: 'QTY Required for Parent',
                        property: 'untUsg'
                    },
                    {
                        label: 'Unit of Measure',
                        property: 'uomAlt'
                    },
                    {
                        label: 'Material Type',
                        property: 'materialType'
                    },
                    {
                        label: 'Identifier for Alternate Product',
                        property: 'sortString'
                    },
                    {
                        label: 'Usage Probability/Market Share',
                        property: 'marketShare'
                    },
                    {
                        label: 'Valid From',
                        property: 'componentValidFrom'
                    },
                    {
                        label: 'Valid To',
                        property: 'componentValidTo'
                    },
                    {
                        label: 'Pumori PN for Child',
                        property: 'generatedHppn'
                    },
                    {
                        label: 'Scrap',
                        property: 'scrap'
                    },
                    {
                        label: 'Alternative Group',
                        property: 'altItemGroup'
                    },
                    {
                        label: 'Manufacturer Name',
                        property: 'manufname'
                    },
                    {
                        label: 'Manufacturer Location ID',
                        property: 'vendorId'
                    }

                ];
            },
            _createColumnConfigDiff: function () {
                return [
                    {
                        label: 'BOM1 Sequence No',
                        property: 'BOM1lineNo'
                    },
                    {
                        label: 'BOM2 Sequence No',
                        property: 'BOM2lineNo'
                    },
                    {
                        label: 'Factory PN for Parent',
                        property: 'BOM1zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'BOM1factoryNumber'
                    },
                    {
                        label: 'BOM1 Level No',
                        property: 'BOM1levelNo'
                    },
                    {
                        label: 'BOM2 Level No',
                        property: 'BOM2levelNo'
                    },
                    {
                        label: 'BOM1 Pumori PN for Child',
                        property: 'BOM1generatedHppn'
                    },
                    {
                        label: 'BOM2 Pumori PN for Child',
                        property: 'BOM2generatedHppn'
                    },
                    {
                        label: 'BOM1 Factory PN for Child',
                        property: 'BOM1factoryChildPn'
                    },
                    {
                        label: 'BOM2 Factory PN for Child',
                        property: 'BOM2factoryChildPn'
                    },
                    {
                        label: 'BOM1 Manufacturer Part Number(MPN) for Child',
                        property: 'BOM1mpnChildPn'
                    },
                    {
                        label: 'BOM2 Manufacturer Part Number(MPN) for Child',
                        property: 'BOM2mpnChildPn'
                    },
                    {
                        label: 'BOM1 Factory Part Description for Child',
                        property: 'BOM1description'
                    },
                    {
                        label: 'BOM2 Factory Part Description for Child',
                        property: 'BOM2description'
                    },
                    {
                        label: 'BOM1 Material Number(HPPN) for Child',
                        property: 'BOM1hppnchildpn'
                    },
                    {
                        label: 'BOM2 Material Number(HPPN) for Child',
                        property: 'BOM2hppnchildpn'
                    },
                    {
                        label: 'BOM1 QTY Required for Parent',
                        property: 'BOM1untUsg'
                    },
                    {
                        label: 'BOM2 QTY Required for Parent',
                        property: 'BOM2untUsg'
                    },
                    {
                        label: 'BOM1 Unit of Measure',
                        property: 'BOM1uomAlt'
                    },
                    {
                        label: 'BOM2 Unit of Measure',
                        property: 'BOM2uomAlt'
                    },
                    {
                        label: 'BOM1 Material Type',
                        property: 'BOM1materialType'
                    },
                    {
                        label: 'BOM2 Material Type',
                        property: 'BOM2materialType'
                    },
                    {
                        label: 'BOM1 Usage Probability/Market Share',
                        property: 'BOM1marketShare'
                    },
                    {
                        label: 'BOM2 Usage Probability/Market Share',
                        property: 'BOM2marketShare'
                    },
                    {
                        label: 'BOM1 Valid From',
                        property: 'BOM1componentValidFrom'
                    },
                    {
                        label: 'BOM2 Valid From',
                        property: 'BOM2componentValidFrom'
                    },
                    {
                        label: 'BOM1 Valid To',
                        property: 'BOM1componentValidTo'
                    },
                    {
                        label: 'BOM2 Valid To',
                        property: 'BOM2componentValidTo'
                    },
                    {
                        label:'BOM1 Scrap',
                        property: 'BOM1scrap'
                    },
                    {
                        label:'BOM2 Scrap',
                        property: 'BOM2scrap'
                    },
                    {
                        label:'BOM1 Alternative Group',
                        property: 'BOM1altItemGroup'
                    },
                    {
                        label:'BOM2 Alternative Group',
                        property: 'BOM2altItemGroup'
                    },
                    {
                        label: 'BOM1 Identifier for Alternate Product',
                        property: 'BOM1sortString'
                    },
                    {
                        label: 'BOM2 Identifier for Alternate Product',
                        property: 'BOM2sortString'
                    },
                    {
                        label: 'BOM1 Manufacturer Name',
                        property: 'BOM1manufacturerLocId'
                    },
                    {
                        label: 'BOM2 Manufacturer Name',
                        property: 'BOM2manufacturerLocId'
                    },
                    {
                        label: 'BOM1 Manufacturer Location ID',
                        property: 'BOM1zmanufId'
                    },
                    {
                        label: 'BOM2 Manufacturer Location ID',
                        property: 'BOM2zmanufId'
                    }
                ];
            },
            _createColumnConfigDownload: function () {
                return [
                    
                    {
                        label: 'BOM1 Pumori PN for Child',
                        property: 'BOM1generatedHppn'
                    },
                    
                    {
                        label: 'BOM1 Usage Probability/Market Share',
                        property: 'BOM1marketShare'
                    },
                    
                    {
                        label: 'BOM1 Material Type',
                        property: 'BOM1materialType'
                    },

                    {
                        label:'BOM1 QTY Required for Parent',
                        property:'BOM1untUsg'
                    },
                    
                    {
                        label: 'BOM1 Valid From',
                        property: 'BOM1componentValidFrom'
                    },
                    
                    {
                        label: 'BOM1 Valid To',
                        property: 'BOM1componentValidTo'
                    },
                    {
                        label:'BOM1 Scrap',
                        property: 'BOM1scrap'
                    },
                    {
                        label:'BOM1 Alternative Group',
                        property: 'BOM1altItemGroup'
                    },
                    
                    
                    {
                        label: 'BOM2 Pumori PN for Child',
                        property: 'BOM2generatedHppn'
                    },
                    
                    {
                        label: 'BOM2 Usage Probability/Market Share',
                        property: 'BOM2marketShare'
                    },
                    
                    {
                        label: 'BOM2 Material Type',
                        property: 'BOM2materialType'
                    },
                    {
                        label:'BOM2 QTY Required for Parent',
                        property:'BOM2untUsg'
                    },
                    
                    {
                        label: 'BOM2 Valid From',
                        property: 'BOM2componentValidFrom'
                    },
                    {
                        label: 'BOM2 Valid To',
                        property: 'BOM2componentValidTo'
                    },
                    
                    {
                        label:'BOM2 Scrap',
                        property: 'BOM2scrap'
                    },
                    {
                        label:'BOM2 Alternative Group',
                        property: 'BOM2altItemGroup'
                    }

                ];
            },
            /**
             * triggers when Settings Button for Unique1 Select table
             */
            onUnq1StngSelect: function () {
                this._BOM1.openDialog();
            },
            /**
             * triggers when Settings Button for Unique2 Select table
             */
            onUnq2StngSelect: function () {
                this._BOM2.openDialog();
            },
            /**
             * triggers when Settings Button for Difference BOM Select table
             */
            onDiffStngSelect: function () {
                this._Diff.openDialog();
            },
            /**
             * triggers when Settings Button for Similar BOM Select table
             */
            onSimilarStngSelect: function () {
                this._Similar.openDialog();
            },
            /**
             * triggers when the row selection is changed in BOM 1 table
             */



            fnOnSelectionTreeBOM1: function (oEvent) {


                var that = this;
                var excelModel = this.getOwnerComponent().getModel("excelModel");

                var catalogTrail = excelModel.getProperty("/catalogTrail");

                var aIndex = oEvent.getSource().getSelectedIndex();

                if (aIndex == -1) {

                } else {


                    that.compareTbl.expandToLevel(100);
                    that.compareTblTrail.expandToLevel(100);
                    var tableContext = oEvent.getSource().getContextByIndex(aIndex);
                    var sPath = tableContext.getPath();
                    var sgeneratedHppn = oEvent.getSource().getModel().getProperty(sPath).generatedHppn;
                    var sParentPath = oEvent.getSource().getModel().getProperty(sPath).ParentPath;


                    let flatten = (subComponents, getChildren, levelNo, parentPart) => Array.prototype.concat.apply(
                        subComponents.map(x => ({ ...x, levelNo: levelNo || 1, parentPart: parentPart || null })),
                        subComponents.map(x => flatten(getChildren(x) || [], getChildren, (levelNo || 1) + 1, x.id))
                    );
                    let extractChildren = x => x.subComponents;

                    let flat = flatten(extractChildren(catalogTrail), extractChildren).map(x => delete x.subComponents && x);
                    var flatsort = flat.sort(this.sortByProperty('lineNo'));

                    var iSelectedIndex2 = that.compareTblTrail.getSelectedIndex();
                    var iIndexHighlight = null;


                    for (var i = 0; i < flatsort.length; i++) {
                        if (flatsort[i].generatedHppn === sgeneratedHppn && flatsort[i].ParentPath === sParentPath) {


                            iIndexHighlight = i;
                            break;

                        }

                    } if (iIndexHighlight && iIndexHighlight !== iSelectedIndex2) { this.compareTblTrail.setSelectedIndex(iIndexHighlight); this.compareTblTrail.setFirstVisibleRow(iIndexHighlight); } else if (!iIndexHighlight && iIndexHighlight !== iSelectedIndex2) { this.compareTblTrail.setSelectedIndex(-1); this.compareTbl.setSelectedIndex(-1); } else { }
                }



            },

            /**
             * triggers when the row selection is changed in BOM 2 table
             */


            fnOnSelectionTreeBOM2: function (oEvent) {

                let that = this;
                var excelModel = this.getOwnerComponent().getModel("excelModel");
                var catalog = excelModel.getProperty("/catalog");
                let bHighlight = false;

                var aIndex = oEvent.getSource().getSelectedIndex();

                if (aIndex == -1) {

                } else {

                    that.compareTbl.expandToLevel(100);
                    that.compareTblTrail.expandToLevel(100);
                    var tableContext = oEvent.getSource().getContextByIndex(aIndex);
                    var sPath = tableContext.getPath();
                    var sgeneratedHppn = oEvent.getSource().getModel().getProperty(sPath).generatedHppn;
                    var sParentPath = oEvent.getSource().getModel().getProperty(sPath).ParentPath;

                    let flatten = (subComponents, getChildren, levelNo, parentPart) => Array.prototype.concat.apply(
                        subComponents.map(x => ({ ...x, levelNo: levelNo || 1, parentPart: parentPart || null })),
                        subComponents.map(x => flatten(getChildren(x) || [], getChildren, (levelNo || 1) + 1, x.id))
                    );
                    let extractChildren = x => x.subComponents;

                    let flat = flatten(extractChildren(catalog), extractChildren).map(x => delete x.subComponents && x);
                    var flatsort = flat.sort(this.sortByProperty('lineNo'));
                    var iSelectedIndex1 = that.compareTbl.getSelectedIndex();
                    var iIndexHighlight = null;
                    for (var i = 0; i < flatsort.length; i++) {
                        if (flatsort[i].generatedHppn === sgeneratedHppn && flatsort[i].ParentPath === sParentPath) {

                            iIndexHighlight = i;

                            break;

                        }
                    }
                    if (iIndexHighlight && i !== iSelectedIndex1) {
                        this.compareTbl.setSelectedIndex(iIndexHighlight);

                        this.compareTbl.setFirstVisibleRow(iIndexHighlight);

                    } else if (!iIndexHighlight && i !== iSelectedIndex1) {
                        this.compareTbl.setSelectedIndex(-1);
                        this.compareTblTrail.setSelectedIndex(-1);

                    } else {

                    }

                }
            },
        });
    });




    app/psbomcompui/webapp/controller/TableSetting.js




    //-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    Compare BOM 
// WRICEF No        :    
// Release          :    M2 Release
// Author           :    Samudrala,Sreenivas
// Date             :    14.05.2024
// Description      :    Compare BOM
//-----------------------------------------------------------------------------------*
//Descriptions: Holds the logic for Table setting customization
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
sap.ui.define(['sap/ui/thirdparty/jquery'],
	function(jQuery) {
	"use strict";

	var treeTableSettings = {

	


		getPersData : function () {
			var oDeferred = new jQuery.Deferred();
			if (!this._oBundle) {
				this._oBundle = this.oData;
			}
			oDeferred.resolve(this._oBundle);
			
			return oDeferred.promise();
		},

		setPersData : function (oBundle) {
			var oDeferred = new jQuery.Deferred();
			this._oBundle = oBundle;
			oDeferred.resolve();
			return oDeferred.promise();
		},delPersData : function (oBundle) {
        }

	
		
	};

	return treeTableSettings;

});





app/psbomcompui/webapp/formatters/compareFormatter.js




//-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    Compare BOM 
// WRICEF No        :    
// Release          :    M2 Release
// Author           :    Samudrala,Sreenivas
// Date             :    14.05.2024
// Description      :    Compare BOM
//-----------------------------------------------------------------------------------*
//Descriptions: Holds the logic for Comparing two BOM's
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
jQuery.sap.declare("pumorips.bomcompare.psbomcompui.formatters.compareFormatter");
pumorips.bomcompare.psbomcompui.formatters.compareFormatter = {
    formatCompareDiffBom1: function(sBom1,sBom2){
        
        // var idText = this.byId("bom2datefrom");
        if(sBom1 !== sBom2){
            this.removeStyleClass('sapUiColumnNormal');
            this.addStyleClass('sapUiColumnBold');
        }else{
            this.removeStyleClass('sapUiColumnBold');
            this.addStyleClass('sapUiColumnNormal');
            

        }
        
        return sBom1;
       

    },
    formatCompareDiffBom2: function(sBom1,sBom2){
      
        if(sBom1 !== sBom2){
            this.removeStyleClass('sapUiColumnNormal');
            this.addStyleClass('sapUiColumnBold');
        }else{
            this.removeStyleClass('sapUiColumnBold');
            this.addStyleClass('sapUiColumnNormal');
        }
        return sBom2;
       

    }

};




app/psbomcompui/webapp/fragments/compareSelect.fragment.xml





<!--
*Confidential and Proprietary
*Copyright  2022, HP
*All Rights Reserved
****************************************************************
 Application Name         :    Compare Factory BOM 
 RICEFW No                : 
 Release                  :    M2 Release
 Author                   :    Samudrala Sreenivas
 Date                     :    19.04.2024
 Description              :    Compare Factory BOM   
 *Descriptions: Fragment View for selection criteria 
 ****************************************************************
Change Log:
    Date       |   Author      |   Defect/Incident     |   Change Description   
****************************************************************-->
<core:FragmentDefinition xmlns="sap.m" xmlns:l="sap.ui.layout" xmlns:f="sap.ui.layout.form" xmlns:core="sap.ui.core">
    <Dialog verticalScrolling="true" draggable="true" title="Compare Selection" titleAlignment="Center">
        <VBox class="sapUiSmallMargin">
            <f:Form id="FormChange354" editable="true">
                <f:layout>
                    <f:ResponsiveGridLayout labelSpanXL="3" labelSpanL="3" labelSpanM="3" labelSpanS="12" adjustLabelSpan="false" emptySpanXL="4" emptySpanL="4" emptySpanM="4" emptySpanS="0" columnsXL="1" columnsL="1" columnsM="1" singleContainerFullSize="false" />
                </f:layout>
                <f:formContainers>
                    <f:FormContainer>
                        <f:formElements>
                            <f:FormElement label="Select Comparison Parameters">
                                <f:fields>
                                    <VBox>
                                        <CheckBox text="Factory Part Number for Child," select="checkDoneMPA" selected="true" enabled="true" width="300px" />
                                        <CheckBox text="MPN Quantity for Child,"  select="checkDoneMPNQ" selected="true" enabled="true" width="200px" />
                                        <CheckBox text="Valid From,"  selected="true" select="checkDoneMPNVF" enabled="true" />
                                        <CheckBox text="Valid To,"  selected="true" select="checkDoneMPNVT" enabled="true" />
                                        <CheckBox text="Usage Probability/Market Share,"  selected="true" select="checkDoneMS" enabled="true" />
                                        
                                    </VBox>
                                    
                                </f:fields>
                            </f:FormElement>
                            <f:FormElement label="Select Input Criteria Options">
                                <f:fields>
                                    <Select id="input_param" selectedKey="partNumber" change="onInputChange">
                                        <items>
                                            <core:Item text="Parent Part Number" key="partNumber" />
                                            <core:Item text="Level Number" key="levelNumber" />
                                            <core:Item text="Sequence Number" key="seqNumber" />
                                        </items>
                                    </Select>
                                </f:fields>
                            </f:FormElement>
                        </f:formElements>
                    </f:FormContainer>
                </f:formContainers>
            </f:Form>
        </VBox>
        <beginButton>
            <Button text="{i18n>OK}" press="oncloseCompareSelect" />
        </beginButton>
    </Dialog>
</core:FragmentDefinition>




app/psbomcompui/webapp/manifest.json



{
  "_version": "1.59.0",
  "sap.app": {
    "id": "pumorips.bomcompare.psbomcompui",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:basic",
      "version": "1.13.4",
      "toolsId": "65cf516e-83d0-4c6d-9af4-aaf4b07302fa"
    },
    "dataSources": {
      "mainService": {
        "uri": "srv-api/v2/bomcompare/",
        "type": "OData",
        "settings": {
          "annotations": [],
          "localUri": "localService/metadata.xml",
          "odataVersion": "2.0"
        }
      }
    },
    "crossNavigation": {
      "inbounds": {
        "PSBOMCompare-Display": {
          "semanticObject": "PSBOMCompare",
          "action": "Display",
          "title": "{{flpTitle}}",
          "signature": {
            "parameters": {},
            "additionalParameters": "allowed"
          }
        }
      }
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {
      "icon": "",
      "favIcon": "",
      "phone": "",
      "phone@2": "",
      "tablet": "",
      "tablet@2": ""
    },
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "flexEnabled": false,
    "dependencies": {
      "minUI5Version": "1.123.2",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.f": {},
        "sap.suite.ui.generic.template": {},
        "sap.ui.comp": {},
        "sap.ui.generic.app": {},
        "sap.ui.table": {},
        "sap.ushell": {}
      }
    },
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "pumorips.bomcompare.psbomcompui.i18n.i18n"
        }
      },
      "selDataModel": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "CompDataModel": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "excelModel": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "": {
        "dataSource": "mainService",
        "preload": true,
        "settings": {
          "synchronizationMode": "None",
          "operationMode": "Server",
          "autoExpandSelect": true,
          "earlyRequests": true
        }
      }
    },
    "resources": {
      "css": [
        {
          "uri": "css/style.css"
        }
      ]
    },
    "routing": {
      "config": {
        "routerClass": "sap.m.routing.Router",
        "viewType": "XML",
        "async": true,
        "viewPath": "pumorips.bomcompare.psbomcompui.view",
        "controlAggregation": "pages",
        "controlId": "app",
        "clearControlAggregation": false
      },
      "routes": [
        {
          "name": "Home",
          "pattern": "",
          "target": [
            "Home"
          ]
        },
        {
          "name": "Compare",
          "pattern": "Compare/{obj}",
          "target": [
            "Compare"
          ]
        }
      ],
      "targets": {
        "Home": {
          "viewType": "XML",
          "transition": "slide",
          "clearControlAggregation": false,
          "viewName": "Home"
        },
        "Compare": {
          "viewType": "XML",
          "transition": "slide",
          "clearControlAggregation": false,
          "viewName": "Compare"
        }
      }
    },
    "rootView": {
      "viewName": "pumorips.bomcompare.psbomcompui.view.App",
      "type": "XML",
      "async": true,
      "id": "App"
    }
  },
  "sap.cloud": {
    "public": true,
    "service": "PSBOMCOMP"
  }
}



app/psbomcompui/xs-app.json




{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/srv-api/(.*)$",
      "target": "$1",
      "authenticationType": "xsuaa",
      "destination": "pumoripsbomcomp-srv-api",
      "csrfProtection": false
    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa"
    }
  ]
}




app/services.cds




using from './psbomcompui/annotations';

annotate BOMCompareService.BOMHeaderView with {
    zbtpComp          @(title:'{i18n>pumoriPn}');
    zmpaPartno        @(title: '{i18n>MPA_FPN_P}');
    prodDesc          @(title: '{i18n>MPA_PN_DESC}');
    baseQuantity      @(title: '{i18n>BOM_BaseUOM}');
    baseunitofMeasure @(title: '{i18n>buom}');
    factoryNumber     @(title: '{i18n>facCode}');
    alternativeBom    @(title: '{i18n>altbom}');
    @UI.HiddenFilter
    bomValidFrom      @(title: '{i18n>BOM_VALID_FRM}');
    @UI.HiddenFilter
    bomValidTo        @(title: '{i18n>BOM_VALID_TO}');
    planningDiv       @(title: '{i18n>busType}');
    zhpPartno         @(title: '{i18n>MAT_NUM_HPPN}');
    yield             @(title: '{i18n>yield}');
    @UI.HiddenFilter
    @UI.Hidden
    markedForDeletion @(title: '{i18n>MARKED_FOR_DEL}');
    bomVersion        @(title: '{i18n>BOM_VERSION}');
}

annotate BOMCompareService.materialNumberValueHelp with {
    zmpaPartno @(title: '{i18n>MPA_FPN_P}');
}

annotate BOMCompareService.factoryCodeValueHelp with {
    factoryNumber @(title: '{i18n>facCode}');
}

annotate BOMCompareService.prodDescValueHelp with {
    prodDesc @(title: '{i18n>MPA_PN_DESC}');
}

annotate BOMCompareService.zhpPartnoValueHelp with {
    zhpPartno @(title: '{i18n>MAT_NUM_HPPN}');
}

annotate BOMCompareService.alternativeBomValueHelp with {
    alternativeBom @(title: '{i18n>altbom}');
}

annotate BOMCompareService.baseunitofMeasureValueHelp with {
    baseunitofMeasure @(title: '{i18n>buom}');
}

annotate BOMCompareService.planningDivValueHelp with {
    planningDiv @(title: '{i18n>busType}');
}

annotate BOMCompareService.bomversionValueHelp with {
    bomVersion @(title: '{i18n>BOM_VERSION}');
};

annotate BOMCompareService.zbtpCompValueHelp with {
    zbtpComp   @(title: '{i18n>pumoriPn}');
}


annotate BOMCompareService.BOMHeaderView with @(UI: {
    SelectionFields: [
        zmpaPartno,
        factoryNumber
    ],
    LineItem       : [
        {
            Value: zmpaPartno,
            Label: '{i18n>MPA_FPN_P}',
        },
        {
            Value: prodDesc,
            Label: '{i18n>MPA_PN_DESC}',
        },
        {
            Value: zbtpComp,
            Label: '{i18n>pumoriPn}'
        },
        {
            Value: zhpPartno,
            Label: '{i18n>MAT_NUM_HPPN}',
        },
        {
            Value: factoryNumber,
            Label: '{i18n>facCode}',
        },
        {
            Value: baseQuantity,
            Label: '{i18n>BOM_BaseUOM}',
        },
        {
            Value: alternativeBom,
            Label: '{i18n>altbom}',
        },
        {
            Value: yield,
            Label: '{i18n>yield}',
        },
        {
            Value: bomValidFrom,
            Label: '{i18n>BOM_VALID_FRM}',
        },
        {
            Value: bomValidTo,
            Label: '{i18n>BOM_VALID_TO}',
        },
        {
            Value: bomVersion,
            Label: '{i18n>BOM_VERSION}'
        },
        {
            Value: planningDiv,
            Label: '{i18n>busType}',
        }
    ]
}) {
    zmpaPartno        @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'materialNumberValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    factoryNumber     @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'factoryCodeValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    prodDesc          @(Common: {
        Text     : {
            $value                : prodDesc,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : prodDesc,
            CollectionPath : 'prodDescValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: prodDesc,
                ValueListProperty: 'prodDesc'
            }]
        }
    });
    zhpPartno         @(Common: {
        Text     : {
            $value                : zhpPartno,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : zhpPartno,
            CollectionPath : 'zhpPartnoValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zhpPartno,
                ValueListProperty: 'zhpPartno'
            }]
        }
    });
    alternativeBom    @(Common: {
        Text     : {
            $value                : alternativeBom,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : alternativeBom,
            CollectionPath : 'alternativeBomValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: alternativeBom,
                ValueListProperty: 'alternativeBom'
            }]
        }
    });
    baseunitofMeasure @(Common: {
        Text     : {
            $value                : baseunitofMeasure,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : baseunitofMeasure,
            CollectionPath : 'baseunitofMeasureValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: baseunitofMeasure,
                ValueListProperty: 'baseunitofMeasure'
            }]
        }
    });
    planningDiv       @(Common: {
        Text     : {
            $value                : planningDiv,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : planningDiv,
            CollectionPath : 'planningDivValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: planningDiv,
                ValueListProperty: 'planningDiv'
            }]
        }
    });
    bomVersion     @(Common: {
        Text     : {
            $value                : bomVersion,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : '{i18n>BOM_VERSION}',
            CollectionPath : 'bomversionValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: bomVersion,
                ValueListProperty: 'bomVersion'
            }]
        }
    });
    zbtpComp     @(Common: {
        Text     : {
            $value                : zbtpComp,
            ![@UI.TextArrangement]: #TextOnly

        },
        ValueList: {
            SearchSupported: true,
            Label          : '{i18n>pumoriPn}',
            CollectionPath : 'zbtpCompValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zbtpComp,
                ValueListProperty: 'zbtpComp'
            }]
        }
    });
};




db/pumoripsbomcompare-model.cds




//-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    BOM Compare
// WRICEF No        :
// Release          :
// Author           :    varun.pathipaka
// Date             :    10.05.2024
// Description      :    Compare BOMs
//-----------------------------------------------------------------------------------*
//Descriptions: Holds logic for services
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
namespace pumorips.bomcompare;

using {managed} from '@sap/cds/common';

//synonym for BOM Header
@cds.persistence.exists
entity syn_BOMHeader : managed {
    key zmpaPartno          : String(40);
        prodDesc            : String(100);
        zhpPartno           : String(40);
    key factoryNumber       : String(20);
    key alternativeBom      : String(2);
        baseQuantity        : Integer;
        baseunitofMeasure   : String(3);
        bomValidFrom        : Date;
        bomValidTo          : Date;
    key bomVersion          : Integer;
        planningDiv         : String(10);
        yield               : Decimal(5, 2);
        markedForDeletion   : String(1);
        bomImportDate       : DateTime;
        singleLevelWhereUse : Boolean default false;
        topLevelWhereUse    : Boolean default false;
}

//synonym for BOM Structure
@cds.persistence.exists
entity syn_BOMStructure : managed {
    key zmpaPartno            : String(40);
    key factoryNumber         : String(20);
    key alternativeBom        : String(2);
    key lineNo                : Integer;
        levelNo               : Integer;
        factoryChildPn        : String(40);
    key mpnChildPn            : String(40);
        description           : String(80); //mpn descr
        hppnChildPn           : String(40);
        untUsg                : Decimal(13, 3);
        uomAlt                : String(3);
        generatedHppn         : String(40);
    key bomVersion            : Integer;
        materialType          : String(4);
        manufName             : String(100);
        vendorId              : String(40);
        sortString            : String(20);
        marketShare           : Integer;
        altItemGroup          : String(2);
        scrap                 : Decimal(5, 2);
    key componentValidFrom    : Date;
    key componentValidTo      : Date;
        alternativeItem       : String(1);
        phantomBOM            : String(1);
        manufacturingOverhead : Decimal(15, 3);
        costOfComponents      : Decimal(15, 3);
        rollUpCost            : Decimal(15, 3);
        bomImportDate         : DateTime;
        singleLevelParent     : String(40);
        singleLevelQuantity   : Decimal(13, 3);
        topLevelParent        : String(40);
        topLevelQuantity      : Decimal(13, 3);
        materialTypeBTP       : String(4);
        lineNoBTP             : String(10);
        lineNoSequence        : Integer;
        untUsgBTP             : Decimal(13, 3);
        uomAltBTP             : String(3);
}

@cds.persistence.exists
entity syn_BTPCompSequence {
        seq           : Integer;
    key zbtpComp      : String(40);
    key factoryNumber : String(20);
    key prodId        : String(50);
    key zmpaPartno    : String(50);
        zHpPartno     : String(40);
        zoldbtpComp   : String(40);
        master        : String(10);
        status        : String(20);
        suggest       : String(40);
}

// //view for MPA PART No valuehelp
view materialNumberValueHelp as select distinct key zmpaPartno from syn_BOMHeader;
// //view for factory number valuehelp
view factoryCodeValueHelp as select distinct key factoryNumber from syn_BOMHeader;
view prodDescValueHelp as select distinct key prodDesc from BOMHeaderView;
view zhpPartnoValueHelp as select distinct key zhpPartno from BOMHeaderView where zhpPartno is not null;
view alternativeBomValueHelp as select distinct key alternativeBom from BOMHeaderView;
view baseunitofMeasureValueHelp as select distinct key baseunitofMeasure from BOMHeaderView;
view planningDivValueHelp as select distinct key planningDiv from BOMHeaderView;
view bomversionValueHelp as select distinct key bomVersion from BOMHeaderView;
view zbtpCompValueHelp as select distinct key zbtpComp from BOMHeaderView;

//view on BOMHeader
view BOMHeaderView as
    select distinct
            Header.createdAt,
            Header.createdBy,
            Header.modifiedAt,
            Header.modifiedBy,
        key Header.zmpaPartno,
        key Header.prodDesc,
            Header.baseQuantity,
        key Header.factoryNumber,
            bomstruct.generatedHppn as zbtpComp,
            Header.alternativeBom,
            bomValidFrom,
            bomValidTo,
            Header.baseunitofMeasure,
            case Header.planningDiv
                when
                    '10'
                then
                    '10-PS'
                when
                    '20'
                then
                    '20-Print'
                when
                    '30'
                then
                    '30-Both'
            end as planningDiv  : String(10),
            Header.zhpPartno,
            Header.yield,
            key cast(
                Header.bomVersion as  String
            )   as bomVersion  :  String(10),
            Header.markedForDeletion,
            Header.bomImportDate
    from syn_BOMHeader as Header
    Left outer join syn_BOMStructure as bomstruct
    on Header.factoryNumber = bomstruct.factoryNumber
    AND Header.zmpaPartno = bomstruct.zmpaPartno
    and Header.bomVersion = bomstruct.bomVersion
    where bomstruct.levelNo = 0;




    srv/pumoripsbomcompare-service.cds



    //-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved
//-----------------------------------------------------------------------------------*
// Application Name :    BOM Compare
// WRICEF No        :
// Release          :
// Author           :    varun.pathipaka
// Date             :    10.05.2024
// Description      :    Compare BOMs
//-----------------------------------------------------------------------------------*
//Descriptions: Holds logic for services
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/
using {pumorips.bomcompare as BOMCompare} from '../db/pumoripsbomcompare-model';

service BOMCompareService @(requires: 'authenticated-user') {
    entity prodDescValueHelp          as projection on BOMCompare.prodDescValueHelp;
    entity zhpPartnoValueHelp         as projection on BOMCompare.zhpPartnoValueHelp;
    entity alternativeBomValueHelp    as projection on BOMCompare.alternativeBomValueHelp;
    entity baseunitofMeasureValueHelp as projection on BOMCompare.baseunitofMeasureValueHelp;
    entity planningDivValueHelp       as projection on BOMCompare.planningDivValueHelp;
    entity bomversionValueHelp        as projection on BOMCompare.bomversionValueHelp;
    entity zbtpCompValueHelp          as projection on BOMCompare.zbtpCompValueHelp;

    type BOMResponse             : {
        strategicFlag         : String;
        matchSetFlag          : String;
        manufacturerLocId     : String;
        zmpaPartno            : String;
        factoryNumber         : String;
        alternativeBom        : String;
        lineNo                : String;
        levelNo               : String;
        factoryChildPn        : String;
        mpnChildPn            : String;
        description           : String;
        hppnChildPn           : String;
        untUsg                : String;
        uomAlt                : String(3);
        generatedHppn         : String(40);
        bomVersion            : String;
        materialType          : String(4);
        manufName             : String(100);
        vendorId              : String(40);
        sortString            : String(20);
        marketShare           : String;
        altItemGroup          : String(2);
        scrap                 : String;
        componentValidFrom    : String;
        componentValidTo      : String;
        alternativeItem       : String(1);
        phantomBOM            : String(1);
        manufacturingOverhead : String;
        costOfComponents      : String;
        rollUpCost            : String;
        bomImportDate         : String;
    }

    type UniqueResponse          : {
        BOM1 : array of BOMResponse;
        BOM2 : array of BOMResponse;
    }

    type differenceResponse      : {
        BOM1zmpaPartno         : String;
        BOM1factoryNumber      : String;
        BOM1lineNo             : String;
        BOM1levelNo            : String;
        BOM1factoryChildPn     : String;
        BOM1mpnChildPn         : String;
        BOM1description        : String;
        BOM1hppnchildpn        : String;
        BOM1generatedHppn      : String;
        BOM1strategicFlag      : String;
        BOM1matchSetFlag       : String;
        BOM1untUsg             : String;
        BOM1uomAlt             : String;
        BOM1materialType       : String;
        BOM1zmanufId           : String;
        BOM1manufacturerLocId  : String;
        BOM1sortString         : String;
        BOM1marketShare        : String;
        BOM1componentValidFrom : String;
        BOM1componentValidTo   : String;
        BOM1custAttr1          : String;
        BOM1custAttr2          : String;
        BOM1custAttr3          : String;
        BOM1custAttr4          : String;
        BOM1custAttr5          : String;
        BOM1bomVersion         : String;
        BOM1bomImportDate      : String;
        BOM2zmpaPartno         : String;
        BOM2factoryNumber      : String;
        BOM2lineNo             : String;
        BOM2levelNo            : String;
        BOM2factoryChildPn     : String;
        BOM2mpnChildPn         : String;
        BOM2description        : String;
        BOM2hppnchildpn        : String;
        BOM2generatedHppn      : String;
        BOM2strategicFlag      : String;
        BOM2matchSetFlag       : String;
        BOM2untUsg             : String;
        BOM2uomAlt             : String;
        BOM2materialType       : String;
        BOM2zmanufId           : String;
        BOM2manufacturerLocId  : String;
        BOM2sortString         : String;
        BOM2marketShare        : String;
        BOM2componentValidFrom : String;
        BOM2componentValidTo   : String;
        BOM2custAttr1          : String;
        BOM2custAttr2          : String;
        BOM2custAttr3          : String;
        BOM2custAttr4          : String;
        BOM2custAttr5          : String;
        BOM2bomVersion         : String;
        BOM2bomImportDate      : String;
    }

    type ComponentCount          : {
        commonComponents : CommonCount;
        uniqueComponents : UniqueCount;
    }

    type CommonCount             : {
        total      : Integer;
        similar    : Integer;
        difference : Integer;
    }

    type UniqueCount             : {
        total : Integer;
        BOM1  : Integer;
        BOM2  : Integer;
    }

    type inputCriteria           : {
        childPart  : Boolean;
        parentPart : Boolean;
        levelNo    : Boolean;
        lineNo     : Boolean;
    };

    type comparisionParameters   : {
        factoryChildPn     : Boolean;
        untUsg             : Boolean;
        componentValidFrom : Boolean;
        componentValidTo   : Boolean;
        marketShare        : Boolean;
    };

    type downloadCompareTreeType : {
        BOM1levelNo            : String;
        BOM1generatedHppn      : String;
        BOM1Unique             : String;
        BOM1Different          : String;
        BOM1marketShare        : String;
        BOM1materialType       : String;
        BOM1untUsg             : String;
        BOM1componentValidFrom : String;
        BOM1componentValidTo   : String;
        BOM2levelNo            : String;
        BOM2generatedHppn      : String;
        BOM2Unique             : String;
        BOM2Different          : String;
        BOM2marketShare        : String;
        BOM2materialType       : String;
        BOM2untUsg             : String;
        BOM2componentValidFrom : String;
        BOM2componentValidTo   : String;
    }

    entity BOMHeader                  as projection on BOMCompare.syn_BOMHeader;
    entity BOMStructure               as projection on BOMCompare.syn_BOMStructure;
    entity materialNumberValueHelp    as projection on BOMCompare.materialNumberValueHelp;
    entity factoryCodeValueHelp       as projection on BOMCompare.factoryCodeValueHelp;
    function BOMSimilarItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String) returns array of BOMResponse;
    function BOMDifferItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String)  returns array of differenceResponse;
    function BOMUniqueItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String)  returns UniqueResponse;
    function BOMCountItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String)   returns ComponentCount;
    entity BOMHeaderView              as projection on BOMCompare.BOMHeaderView;
    function compareTree(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String)                                                             returns LargeString;
    function downloadCompareTree(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String, inputCriteria : String, comparisionParameters : String)                                                     returns array of downloadCompareTreeType;
}




srv/pumoripsbomcompare-service.js




//-----------------------------------------------------------------------------------*
//Confidential and Proprietary
//Copyright 2024, HP
//All Rights Reserved 
//-----------------------------------------------------------------------------------*
// Application Name :    BOM Compare
// WRICEF No        : 
// Release          :    
// Author           :    varun.pathipaka1
// Date             :    10.05.2024
// Description      :    Compare BOMs 
//-----------------------------------------------------------------------------------*
//Descriptions: Holds logic for services
//-----------------------------------------------------------------------------------*
//Change Log:
//    Date      |   Author      |   Defect/Incident     |   Change Description
//-----------------------------------------------------------------------------------*/

const cds = require('@sap/cds');
const { syn_BOMStructure } = cds.entities('pumorips.bomcompare');
const TextBundle = require('@sap/textbundle').TextBundle;
const { ERROR_STATUS_CODE, CONSTPROPS } = require('./config/constants');
const bundle = new TextBundle('./_i18n/i18n');
const { _isValidHeaders, _filterItems, _getBOMVersionData, _convertToNestedJson, _compareBOMTree } = require('./validations');

module.exports = cds.service.impl(async function () {
    const { SIMILAR, DIFFERENCE, UNIQUE } = CONSTPROPS;

    /*********************** Method to get Similar items between two BOMs ***********************/
    this.on('BOMSimilarItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version, inputCriteria, comparisionParameters } = req.data;
            const isValidHeader = await _isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await _getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version, JSON.parse(inputCriteria), JSON.parse(comparisionParameters));
                if (BOM1.length && BOM2.length) {
                    return _filterItems(BOM1, BOM2, SIMILAR);
                }
                return [];
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get differnece in items between two BOMs ***********************/
    this.on('BOMDifferItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version, inputCriteria, comparisionParameters } = req.data;
            const isValidHeader = await _isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await _getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version, JSON.parse(inputCriteria), JSON.parse(comparisionParameters));
                if (BOM1.length && BOM2.length) {
                    let ResultArray = [];
                    ResultArray = _filterItems(BOM1, BOM2, DIFFERENCE);
                    return ResultArray;
                }
                return [];
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get Unique items between two BOMs ***********************/
    this.on('BOMUniqueItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version, inputCriteria, comparisionParameters } = req.data;
            const isValidHeader = await _isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await _getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version, JSON.parse(inputCriteria), JSON.parse(comparisionParameters));
                if (BOM1.length && BOM2.length) {
                    let BOM1Result = _filterItems(BOM1, BOM2, UNIQUE);
                    let BOM2Result = _filterItems(BOM2, BOM1, UNIQUE);
                    return {
                        BOM1: BOM1Result,
                        BOM2: BOM2Result
                    };
                }
                return {
                    BOM1: [],
                    BOM2: []
                };
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get count of all similar,unique,difference items between two BOMs ***********************/
    this.on('BOMCountItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version, inputCriteria, comparisionParameters } = req.data;
            const isValidHeader = await _isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await _getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version, JSON.parse(inputCriteria), JSON.parse(comparisionParameters));
                if (BOM1.length && BOM2.length) {
                    const BOMDiff = _filterItems(BOM1, BOM2, DIFFERENCE);
                    const BOM1Unique = _filterItems(BOM1, BOM2, UNIQUE);
                    const BOM2Unique = _filterItems(BOM2, BOM1, UNIQUE);
                    const BOMSimilar = _filterItems(BOM1, BOM2, SIMILAR);
                    return {
                        commonComponents: {
                            total: BOMSimilar.length + BOMDiff.length,
                            similar: BOMSimilar.length,
                            difference: BOMDiff.length
                        },
                        uniqueComponents: {
                            total: BOM1Unique.length + BOM2Unique.length,
                            BOM1: BOM1Unique.length,
                            BOM2: BOM2Unique.length
                        }
                    };
                }
                return {
                    commonComponents: {
                        total: 0,
                        similar: 0,
                        difference: 0
                    },
                    uniqueComponents: {
                        total: 0,
                        BOM1: 0,
                        BOM2: 0
                    }
                };
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });


    // compare app tree structure
    this.on('compareTree', async (req) => {
        const tx = cds.transaction(req);
        try {
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;

            let BOM1Data = await tx.run(SELECT.from(syn_BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: bom1Version }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            let BOM2Data = await tx.run(SELECT.from(syn_BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: bom2Version }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));

            if (BOM1Data.length && BOM2Data.length) {
                const { BOM1DataTree, BOM2DataTree } = await _compareBOMTree(BOM1Data, BOM2Data, req);

                return JSON.stringify({
                    BOM1TreeData: _convertToNestedJson(BOM1DataTree, req),
                    BOM2TreeData: _convertToNestedJson(BOM2DataTree, req)
                });
            }
            return JSON.stringify({
                BOM1TreeData: [],
                BOM2TreeData: []
            });
        } catch (error) {
            return req.error({ code: 400, message: error.message });
        }

    });

    // Download compare app tree structure
    this.on('downloadCompareTree', async (req) => {
        const tx = cds.transaction(req);
        try {
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;

            let BOM1Data = await tx.run(SELECT.from(syn_BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: parseInt(bom1Version) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            let BOM2Data = await tx.run(SELECT.from(syn_BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: bom2Version }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));

            const { BOM1DataTree, BOM2DataTree } = await _compareBOMTree(BOM1Data, BOM2Data, req);
            
            let maxRecordsLength = BOM1DataTree.length > BOM2DataTree.length ? BOM1DataTree.length : BOM2DataTree.length;
            let concatCompareBOMs = [];
            for (let record = 0; record < maxRecordsLength; record++) {
                concatCompareBOMs.push({
                    BOM1levelNo: BOM1DataTree.length > record ? BOM1DataTree[record].levelNo : null,
                    BOM1generatedHppn: BOM1DataTree.length > record ? BOM1DataTree[record].generatedHppn : null,
                    BOM1Unique: BOM1DataTree.length > record ? BOM1DataTree[record].isUnique : null,
                    BOM1Different: BOM1DataTree.length > record ? BOM1DataTree[record].isDifferent : null,
                    BOM1marketShare: BOM1DataTree.length > record ? BOM1DataTree[record].marketShare : null,
                    BOM1materialType: BOM1DataTree.length > record ? BOM1DataTree[record].materialType : null,
                    BOM1untUsg: BOM1DataTree.length > record ? BOM1DataTree[record].untUsg : null,
                    BOM1componentValidFrom: BOM1DataTree.length > record ? BOM1DataTree[record].componentValidFrom : null,
                    BOM1componentValidTo: BOM1DataTree.length > record ? BOM1DataTree[record].componentValidTo : null,
                    BOM2levelNo: BOM2DataTree.length > record ? BOM2DataTree[record].levelNo : null,
                    BOM2generatedHppn: BOM2DataTree.length > record ? BOM2DataTree[record].generatedHppn : null,
                    BOM2Unique: BOM2DataTree.length > record ? BOM2DataTree[record].isUnique : null,
                    BOM2Different: BOM2DataTree.length > record ? BOM2DataTree[record].isDifferent : null,
                    BOM2marketShare: BOM2DataTree.length > record ? BOM2DataTree[record].marketShare : null,
                    BOM2materialType: BOM2DataTree.length > record ? BOM2DataTree[record].materialType : null,
                    BOM2untUsg: BOM2DataTree.length > record ? BOM2DataTree[record].untUsg : null,
                    BOM2componentValidFrom: BOM2DataTree.length > record ? BOM2DataTree[record].componentValidFrom : null,
                    BOM2componentValidTo: BOM2DataTree.length > record ? BOM2DataTree[record].componentValidTo : null
                });
            }
            return concatCompareBOMs;
        } catch (error) {
            return req.error({ code: 400, message: error.message });
        }

    });
});




srv/server.js



"use strict";
const cds = require("@sap/cds");
const proxy = require("@sap/cds-odata-v2-adapter-proxy");
cds.on("bootstrap", app => app.use(proxy()));
module.exports = cds.server;
// test ci cd pipeline



mta.yaml



_schema-version: "3.1"
ID: pumorips_bomcomp
description: A simple CAP project.
version: 1.0.0
modules:
- name: pumorips_bomcomp-srv
  type: nodejs
  path: gen/srv
  requires:
  - name: PUMORIPS_BOMCOMP
  - name: uaa_pumorips_bomcomp
  provides:
  - name: srv-api
    properties:
      srv-url: ${default-url}
  parameters:
    buildpack: nodejs_buildpack
  build-parameters:
    builder: npm
- name: pumorips_bomcomp-db-deployer
  type: hdb
  path: gen/db
  requires:
  - name: PUMORIPS_BOMCOMP
    properties:
      TARGET_CONTAINER: PUMORIPS_BOMCOMP
  - name: displaybom-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-displaybom-grantor
      service: ~{displaybom-grantor-service}
  - name: facprod-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-facprod-grantor
      service: ~{facprod-grantor-service}
  parameters:
    buildpack: nodejs_buildpack
- name: pumorips_bomcomp-destination-content
  type: com.sap.application.content
  requires:
  - name: pumorips_bomcomp-destination-service
    parameters:
      content-target: true
  - name: pumorips_bomcomp_html_repo_host
    parameters:
      service-key:
        name: pumorips_bomcomp_html_repo_host-key
  - name: uaa_pumorips_bomcomp
    parameters:
      service-key:
        name: uaa_pumorips_bomcomp-key
  parameters:
    content:
      instance:
        destinations:
        - Name: PSBOMCOMP_pumorips_bomcomp_html_repo_host
          ServiceInstanceName: pumorips_bomcomp-html5-app-host-service
          ServiceKeyName: pumorips_bomcomp_html_repo_host-key
          sap.cloud.service: PSBOMCOMP
        - Authentication: OAuth2UserTokenExchange
          Name: PSBOMCOMP_uaa_pumorips_bomcomp
          ServiceInstanceName: pumorips_bomcomp-xsuaa-service
          ServiceKeyName: uaa_pumorips_bomcomp-key
          sap.cloud.service: PSBOMCOMP
        existing_destinations_policy: update
  build-parameters:
    no-source: true
- name: pumorips_bomcomp-app-content
  type: com.sap.application.content
  path: app
  requires:
  - name: pumorips_bomcomp_html_repo_host
    parameters:
      content-target: true
  build-parameters:
    build-result: resources
    requires:
    - artifacts:
      - pumoripsbomcomparepsbomcompui.zip
      name: pumoripsbomcomparepsbomcompui
      target-path: resources/
- name: pumoripsbomcomparepsbomcompui
  type: html5
  path: app/psbomcompui
  requires:
  - name: uaa_pumorips_bomcomp
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
resources:
- name: PUMORIPS_BOMCOMP
  type: com.sap.xs.hdi-container
  parameters:
    config:
      schema: PUMORIPS_BOMCOMP
    service: hana
    service-plan: hdi-shared
- name: displaybom-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_BOMDISP
  properties:
    displaybom-grantor-service: ${service-name}
- name: facprod-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_FACPROD
  properties:
    facprod-grantor-service: ${service-name}
- name: pumorips_bomcomp-destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    config:
      HTML5Runtime_enabled: true
      init_data:
        instance:
          destinations:
          - Authentication: NoAuthentication
            HTML5.DynamicDestination: true
            HTML5.ForwardAuthToken: true
            Name: pumoripsbomcomp-srv-api
            ProxyType: Internet
            Type: HTTP
            URL: ~{srv-api/srv-url}
          existing_destinations_policy: update
      version: 1.0.0
    service: destination
    service-name: pumorips_bomcomp-destination-service
    service-plan: lite
  requires:
  - name: srv-api
- name: pumorips_bomcomp_html_repo_host
  type: org.cloudfoundry.managed-service
  parameters:
    service: html5-apps-repo
    service-name: pumorips_bomcomp-html5-app-host-service
    service-plan: app-host
- name: uaa_pumorips_bomcomp
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: pumorips_bomcomp-xsuaa-service
    service-plan: application
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true
build-parameters:
  before-all:
  - builder: custom
    commands:
    - npm install
    - npx cds build --production




    package.json




    {
    "name": "pumorips_bomcomp",
    "version": "1.0.0",
    "description": "A simple CAP project.",
    "repository": "<Add your repository here>",
    "license": "UNLICENSED",
    "private": true,
    "dependencies": {
        "@sap/cds": "^6",
        "@sap/cds-hana": "^2",
        "@sap/cds-odata-v2-adapter-proxy": "^1.9.21",
        "@sap/hana-client": "^2.19.21",
        "@sap/hdbext": "^7.6.5",
        "@sap/hdi-deploy": "^4.9.2",
        "@sap/textbundle": "^4.1.0",
        "@sap/xsenv": "^4.2.0",
        "@sap/xssec": "3.6.1",
        "axios": "^0.27.2",
        "express": "^4",
        "hdb": "^0.19.7",
        "passport": "^0",
        "sap-hdbext-promisfied": "^2.202208.1"
    },
    "devDependencies": {
        "@sap/cds-dk": "^7",
        "@sap/ux-specification": "^1.120.10",
        "rimraf": "^3.0.2"
    },
    "scripts": {
        "start": "cds-serve",
        "watch-psbomcompui": "cds watch --open psbomcompui/webapp/index.html?sap-ui-xx-viewCache=false",
        "undeploy": "cf undeploy pumorips_bomcomp --delete-services --delete-service-keys --delete-service-brokers",
        "build": "rimraf resources mta_archives && mbt build --mtar archive",
        "deploy": "cf deploy mta_archives/archive.mtar --retries 1"
    },
    "cds": {
        "requires": {
            "db": {
                "kind": "hana"
            },
            "uaa": {
                "kind": "xsuaa"
            }
        },
        "auth": {
            "passport": {
                "strategy": "JWT"
            }
        },
        "hana": {
            "deploy-format": "hdbtable"
        }
    }
}




xs-security.json



{
  "xsappname": "pumorips_bomcomp",
  "tenant-mode": "dedicated",
  "description": "Security profile of called application",
  "scopes": [
    {
      "name": "uaa.user",
      "description": "UAA"
    }
  ],
  "role-templates": [
    {
      "name": "Token_Exchange",
      "description": "UAA",
      "scope-references": [
        "uaa.user"
      ]
    }
  ]
}



