app/psbomdispui/webapp/view/Header.view.xml

<mvc:View
    controllerName="pumorips.bomdisplay.psbomdispui.controller.Header"
    xmlns:mvc="sap.ui.core.mvc"
    displayBlock="true"
    xmlns="sap.m" 
    xmlns:smartFilterBar="sap.ui.comp.smartfilterbar"
	xmlns:smartTable="sap.ui.comp.smarttable" 
    xmlns:table="sap.ui.table" 
    xmlns:u="sap.ui.unified" 
    xmlns:f="sap.f" 
    xmlns:fb="sap.ui.comp.filterbar"
>
    <Page
        id="page"
        title="{i18n>title}"
        showHeader="false"
    >
        <content>
            <VBox fitContainer="true">
                <smartFilterBar:SmartFilterBar id="smartFilterBar" showMessages="true" showClearOnFB="true"
                                               persistencyKey="SmartFilterPKey" entitySet="BOMHeaderView" clear="onClear"
                >
                    <smartFilterBar:controlConfiguration>

                        <smartFilterBar:ControlConfiguration key="frmDt" label="{i18n>BOM_VALID_FRM}" visibleInAdvancedArea="true" >
                            <smartFilterBar:customControl>
                                <DatePicker id="fltrValidFrm" placeholder="e.g. Apr 6, 2022" />
                            </smartFilterBar:customControl>
                        </smartFilterBar:ControlConfiguration>

                        <smartFilterBar:ControlConfiguration key="toDt" label="{i18n>BOM_VALID_TO}" visibleInAdvancedArea="true" >
                            <smartFilterBar:customControl>
                                <DatePicker id="fltrValidTo" placeholder="e.g. Dec 31, 9999" />
                            </smartFilterBar:customControl>
                        </smartFilterBar:ControlConfiguration>
                    </smartFilterBar:controlConfiguration>
                </smartFilterBar:SmartFilterBar>
                <smartTable:SmartTable
                    id="idBDSmrtTable"
                    smartFilterId="smartFilterBar"
                    tableType="ResponsiveTable"
                    editable="false"
                    entitySet="BOMHeaderView"
                    useVariantManagement="true"
                    showVariantManagement="true"
                    header="{i18n>BOM_DIS}"
                    showRowCount="true"
                    requestAtLeastFields="materialNumber"
                    enableAutoBinding="false"
                    placeToolbarInTable="true"
                    beforeRebindTable="onBeforeRebindTable"
                    persistencyKey="SmartTablePersistencyKey"
                >
                     <smartTable:customToolbar>
                        <OverflowToolbar design="Transparent">
                            <ToolbarSpacer />
                        </OverflowToolbar>
                    </smartTable:customToolbar>

                    <Table
                        id="idPMtable1"
                        mode="None"
                        sticky="ColumnHeaders,HeaderToolbar"
                        growing="true"
                        growingScrollToLoad="true"
                        growingThreshold="20"
                    >
                        <items>
                            <ColumnListItem
                                type="Navigation"
                                press="handlePress"
                            />
                        </items>
                    </Table>
                </smartTable:SmartTable>
            </VBox>
        </content>
    </Page>
</mvc:View>


app/psbomdispui/webapp/view/Items.view.xml



<mvc:View
    controllerName="pumorips.bomdisplay.psbomdispui.controller.Items"
    xmlns:mvc="sap.ui.core.mvc"
    displayBlock="true"
    xmlns:core="sap.ui.core"
    xmlns:smartTable="sap.ui.comp.smarttable"
    xmlns:layout="sap.ui.layout"
    xmlns="sap.m"
    xmlns:table="sap.ui.table"
    xmlns:u="sap.ui.unified"
    xmlns:f="sap.f"
    xmlns:fb="sap.ui.comp.filterbar"
>
    <Page
        id="pageItems"
        showHeader="false"
    >
        <content>
            <layout:HorizontalLayout allowWrapping="true">
                <layout:VerticalLayout class="BOMDtls">
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>MPA_FPN_P}"
                        text="{selData>/zmpaPartno}"
                    />
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>MPA_PN_DESC}"
                        text="{selData>/prodDesc}"
                    />
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>FAC}"
                        text="{selData>/factoryNumber}"
                    />
                </layout:VerticalLayout>

                <layout:VerticalLayout class="BOMDtls">
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>zhpPartno}"
                        text="{selData>/zhpPartno}"
                    />
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>PLAN_DIV}"
                        text="{selData>/planningDiv}"
                    />
                    <ObjectAttribute
                        class="odjDtl"
                        title="{i18n>BOM_VERSION}"
                        text="{selData>/bomVersion}"
                    />
                </layout:VerticalLayout>
            </layout:HorizontalLayout>

            <table:TreeTable
                id="itemsTbl"
                rows="{path:'/', parameters: {arrayNames:['subComponents']}}"
                selectionMode="None"
                enableSelectAll="false"
                ariaLabelledBy="title"
            >
                <table:extension>
                    <OverflowToolbar style="Clear">
                        <Title
                            id="title"
                            text="{i18n>BOM_DIS_ITMS}"
                        />
                        <ToolbarSpacer />
                        <Button
                            text="{i18n>COL_ALL}"
                            press="onCollapseTreeTable"
                        />
                        <Button
                            text="{i18n>EXP_ALL}"
                            press="onExpandTreeTable"
                        />
                        <Button
                            icon="sap-icon://download"
                            press="onDownloadPress"
                        />

                        <Button
                            icon="sap-icon://action-settings"
                            press="onSettingsSelect"
                        />
                    </OverflowToolbar>
                </table:extension>
                <table:rowSettingsTemplate>
                    <table:RowSettings
                        highlight="{path: 'highlightGenHPPN', formatter: '.highlightFun' }"
                    />
                </table:rowSettingsTemplate>
                <table:rowMode>
							<rowmodes:Auto id="idRowM"
								xmlns:rowmodes="sap.ui.table.rowmodes" minRowCount="20"/>
							</table:rowMode>
                <table:columns>
                    <table:Column
                        width="7rem"
                        sortProperty="lineNo"
                        filterProperty="lineNo"
                    >
                        <Label text="{i18n>LineNo}" />
                        <table:template>
                            <Text text="{lineNo}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="6rem"
                        sortProperty="levelNo"
                        filterProperty="levelNo"
                    >
                        <Label text="{i18n>LEVEL_NO}" />
                        <table:template>
                            <Text text="{levelNo}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="11rem"
                        sortProperty="generatedHppn"
                        filterProperty="generatedHppn"
                    >
                        <Label text="{i18n>GEN_HPPN}" />
                        <table:template>
                            <Text text="{generatedHppn}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="15rem"
                        sortProperty="factoryChildPn"
                        filterProperty="factoryChildPn"
                    >
                        <Label text="{i18n>MPA_FPN_C}" />
                        <table:template>
                            <Text text="{factoryChildPn}" />
                        </table:template>
                    </table:Column>

                    <table:Column
                        width="15rem"
                        sortProperty="mpnChildPn"
                        filterProperty="mpnChildPn"
                    >
                        <Label text="{i18n>MPA_PN_C}" />
                        <table:template>
                            <Text text="{mpnChildPn}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="15rem"
                        sortProperty="description"
                        filterProperty="description"
                    >
                        <Label text="{i18n>MPA_PDESC_C}" />
                        <table:template>
                            <Label
                                text="{description}"
                                tooltip="{description}"
                            />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="15rem"
                        sortProperty="hppnChildPn"
                        filterProperty="hppnChildPn"
                    >
                        <Label text="{i18n>MAT_NUM_HPPN}" />
                        <table:template>
                            <Text text="{hppnChildPn}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="5rem"
                        sortProperty="untUsg"
                        filterProperty="untUsg"
                    >
                        <Label text="{i18n>MPN_QTY}" />
                        <table:template>
                            <Text text="{untUsg}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="4rem"
                        sortProperty="uomAlt"
                        filterProperty="uomAlt"
                    >
                        <Label text="{i18n>UOM}" />
                        <table:template>
                            <Text text="{uomAlt}" />
                        </table:template>
                    </table:Column>

                    <table:Column
                        width="9rem"
                        sortProperty="materialType"
                        filterProperty="materialType"
                    >
                        <Label text="{i18n>MAT_TYP}" />
                        <table:template>
                            <Text text="{materialType}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="vendorId"
                        filterProperty="vendorId"
                    >
                        <Label text="{i18n>MAN_LOC}" />
                        <table:template>
                            <Text text="{vendorId}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="manufName"
                        filterProperty="manufName"
                    >
                        <Label text="{i18n>MAN_NAME}" />
                        <table:template>
                            <Text text="{manufName}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="sortString"
                        filterProperty="sortString"
                    >
                        <Label text="{i18n>SORT_STR}" />
                        <table:template>
                            <Text text="{sortString}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="marketShare"
                        filterProperty="marketShare"
                    >
                        <Label text="{i18n>MKT_SHARE}" />
                        <table:template>
                            <Text text="{marketShare}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="componentValidFrom"
                        filterProperty="componentValidFrom"
                    >
                        <Label text="{i18n>MPN_VF}" />
                        <table:template>
                            <Text text="{componentValidFrom}" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="componentValidTo"
                        filterProperty="componentValidTo"
                    >
                        <Label text="{i18n>MPN_TO}" />
                        <table:template>
                            <Text text="{componentValidTo}" />
                        </table:template>
                    </table:Column>
                    
                    <table:Column
                        width="13rem"
                        sortProperty="strategicAutoFlag"
                        filterProperty="strategicAutoFlag"
                    >
                        <Label text="{i18n>Pumori_Strategic_Flag}" />
                        <table:template>
                            <Text text="{strategicAutoFlag}" />
                        </table:template>
                    </table:Column>
                    

                    <table:Column
                        width="13rem"
                        sortProperty="manufacturingOverhead"
                        filterProperty="manufacturingOverhead"
                        id="idManOvrHead"
                        visible="false"
                    >
                    <Label text="{i18n>manFactOverHead}" id="idManL" wrapping="true"/>
                        <table:template>
                            <Text text="{manufacturingOverhead}" id="idManT" />
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="costOfComponents"
                        filterProperty="costOfComponents"
                        id="idCstOfComp"
                        visible="false"
                    >
                    <Label text="{i18n>costofComp}" id="idCstOfCompL" wrapping="true"/>
                        <table:template>
                            <Text text="{costOfComponents}" id="idCstOfCompT"/>
                        </table:template>
                    </table:Column>
                    <table:Column
                        width="13rem"
                        sortProperty="rollUpCost"
                        filterProperty="rollUpCost"
                        id="idRolUpCost"
                        visible="false"
                    >
                    <Label text="{i18n>rolupCst}" id="idRolUpCostL" />
                        <table:template>
                            <Text text="{rollUpCost}" id="idRolUpCostT"/>
                        </table:template>
                    </table:Column>

                    <table:Column width="9rem" sortProperty="phantomBOM" filterProperty="phantomBOM">
                        <Label text="{i18n>phantomBOM}"/>
                        <table:template>
                            <Text text="{phantomBOM}" />
                        </table:template>
                    </table:Column>
                     <table:Column width="9rem" sortProperty="altItemGroup" filterProperty="altItemGroup">
                        <Label text="{i18n>altItemGroup}"/>
                        <table:template>
                            <Text text="{altItemGroup}" />
                        </table:template>
                    </table:Column>
                     <table:Column width="9rem" sortProperty="alternativeItem" filterProperty="alternativeItem">
                        <Label text="{i18n>alternativeItem}"/>
                        <table:template>
                            <Text text="{alternativeItem}" />
                        </table:template>
                    </table:Column>
                    <table:Column width="9rem" sortProperty="scrap" filterProperty="scrap">
                        <Label text="{i18n>scrap}"/>
                        <table:template>
                            <Text text="{scrap}" />
                        </table:template>
                    </table:Column>
                    <table:Column width="9rem" sortProperty="zmpaPartno" filterProperty="zmpaPartno">
                        <Label text="{i18n>MPA_FPN_P}"/>
                        <table:template>
                            <Text text="{zmpaPartno}" />
                        </table:template>
                    </table:Column>
                    <table:Column width="9rem" sortProperty="factoryNumber" filterProperty="factoryNumber">
                        <Label text="{i18n>FAC}"/>
                        <table:template>
                            <Text text="{factoryNumber}" />
                        </table:template>
                    </table:Column>
                </table:columns>
            </table:TreeTable>
        </content>
    </Page>
</mvc:View>




app/psbomdispui/webapp/controller/BaseController.js



sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/core/UIComponent",
    "sap/m/MessageBox"
], function (Controller, UIComponent, MessageBox) {
    "use strict";

    return Controller.extend("pumori.bomdisplay.bomdispui.controller.BaseController", {
		/**
		 * Convenience method for accessing the router.
		 * @public
		 * @returns {sap.ui.core.routing.Router} the router for this component
		 */

        getRouter: function () {
            return UIComponent.getRouterFor(this);
        },

		/**
		 * Convenience method for getting the view model by name.
		 * @public
		 * @param {string} [sName] the model name
		 * @returns {sap.ui.model.Model} the model instance
		 */
        getModel: function (sName) {
            return this.getView().getModel(sName);
        },

		/**
		 * Convenience method for setting the view model.
		 * @public
		 * @param {sap.ui.model.Model} oModel the model instance
		 * @param {string} sName the model name
		 * @returns {sap.ui.mvc.View} the view instance
		 */
        setModel: function (oModel, sName) {
            return this.getView().setModel(oModel, sName);
        },

		/**
		 * Getter for the resource bundle.
		 * @public
		 * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component
		 */
        getResourceBundle: function () {
            return this.getOwnerComponent().getModel("i18n").getResourceBundle();
        },
        /**
		 * Getter for the resource bundle text.
		 * @public
         * @param 
		 * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component
		 */
        getResourceBundleText: function (sTextProperty) {
            return this.getOwnerComponent().getModel("i18n").getResourceBundle().getText(sTextProperty);
        },
		/**
		 * Convenience method for displaying error messages
		 * @public
		 */

        showMsgBoxError: function (message) {
            var title = this.getResourceBundle().getText("ErrorDialogTitle");
            MessageBox.show(message, {
                icon: MessageBox.Icon.ERROR,
                title: title,
                actions: [MessageBox.Action.OK]
            });

        },
        showMsgBoxSuccess: function (message) {
            var title = this.getResourceBundle().getText("SuccessDialogTitle");
            MessageBox.show(message, {
                icon: MessageBox.Icon.SUCCESS,
                title: title,
                actions: [MessageBox.Action.OK]
            });
        },
        showMsgBoxWarning: function (message) {
            var title = this.getResourceBundle().getText("WarningDialogTitle");
            MessageBox.show(message, {
                icon: MessageBox.Icon.WARNING,
                title: title,
                actions: [MessageBox.Action.OK]
            });
        },
        showMsgBoxInformation: function (message) {
            var title = "Information"
            var title = this.getResourceBundle().getText("InformationDialogTitle");
            MessageBox.show(message, {
                icon: MessageBox.Icon.INFORMATION,
                title: title,
                actions: [MessageBox.Action.OK]
            });
        },
        _getUserInfoService: function () {
            return new Promise(resolve => sap.ui.require([
                "sap/ushell/library"
            ], oSapUshellLib => {
                const oContainer = oSapUshellLib.Container;
                const pService = (oContainer) ? oContainer.getServiceAsync("UserInfo") : ""; // .getService is deprecated!
                resolve(pService);
            }));
        }

    });

});



app/psbomdispui/xs-app.json


{
  "welcomeFile": "/index.html",
  "authenticationMethod": "route",
  "routes": [
    {
      "source": "^/srv-api/(.*)$",
      "target": "$1",
      "authenticationType": "xsuaa",
      "destination": "pumorips_bomdisp-srv-api",
      "csrfProtection": false,
      "scope": ["$XSAPPNAME.WithCost","$XSAPPNAME.WithoutCost"]

    },
    {
      "source": "^(.*)$",
      "target": "$1",
      "service": "html5-apps-repo-rt",
      "authenticationType": "xsuaa",
      "scope": ["$XSAPPNAME.WithCost","$XSAPPNAME.WithoutCost"]

    }
  ]
}





app/psbomdispui/webapp/controller/Header.controller.js




sap.ui.define([
    "./BaseController",
    "sap/ui/model/Filter",
    "sap/ui/model/FilterOperator",
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (BaseController,Filter,FilterOperator) {
        "use strict";

        return BaseController.extend("pumorips.bomdisplay.psbomdispui.controller.Header", {
            /* =========================================================== */
            /* lifecycle methods                                           */
            /* =========================================================== */
            /**
            * This method will trigger once during app initialization
            * **/
            onInit: function () {
                this.smartFilterBar = this.getView().byId("smartFilterBar");
                this.getRouter().getRoute("Header").attachPatternMatched(this._onObjectMatched, this);
                this.BomDispSrv = this.getOwnerComponent().getService('BomDisp');
            },

            /* =========================================================== */
            /* internal methods                                            */
            /* =========================================================== */

            /**
            * App view routing pattern change event handler
            * this method will trigger each time user navigate between views
            * This method used here to load, initialize home screen 
            * **/

            _onObjectMatched: function () {
                var oSmartTable = this.getView().byId("idBDSmrtTable");
                var oSmartFilterBar = this.getView().byId(oSmartTable.getSmartFilterId());
                if (oSmartTable && oSmartFilterBar.isInitialised()) {
                    oSmartTable.rebindTable(true);
                }

            },


            /* =========================================================== */
            /* event handlers                                              */
            /* =========================================================== */
            /**
            * This event is triggered on the row action navigation
            * **/


            handlePress: function (oEvent) {
                var selData = oEvent.oSource.mAggregations.cells;

                var itemParameters =
                {
                    "zmpaPartno": encodeURIComponent(selData[0].mProperties.text),
                    "prodDesc": encodeURIComponent(selData[1].mProperties.text),
                    "factoryNumber": encodeURIComponent(selData[4].mProperties.text),
                    // "bomImportDate": selData[13].mProperties.text,
                    
                    "bomVersion": encodeURIComponent(selData[8].mProperties.text),
                    "zhpPartno" : encodeURIComponent(selData[3].mProperties.text),
                    "planningDiv": encodeURIComponent(selData[9].mProperties.text)
                    
                };
                this.getOwnerComponent().getRouter().navTo("Items", { obj: JSON.stringify(itemParameters) });
            },
            onBeforeRebindTable: function (oEvent) {
                var smartTable = oEvent.getSource()
                var oBindingParams = oEvent.getParameter("bindingParams");
                oBindingParams.parameters = oBindingParams.parameters || {};
                if (smartTable) {
                    var aFilters = [];
                    var frmDt = this.smartFilterBar.getControlByKey("frmDt").getDateValue();
                    var toDt = this.smartFilterBar.getControlByKey("toDt").getDateValue();
                    var dateFormat = sap.ui.core.format.DateFormat.getDateInstance({ pattern: "yyyy-MM-dd", UTC: false });

                    if (frmDt != null) {
                        var dateFormattedFrmDt = dateFormat.format(new Date(frmDt));
                        aFilters.push(new Filter("bomValidFrom", FilterOperator.GE, dateFormattedFrmDt));
                    }
                    if (toDt != null) {
                        var dateFormattedToDt = dateFormat.format(new Date(toDt));
                        aFilters.push(new Filter("bomValidTo", FilterOperator.LE, dateFormattedToDt));
                    }
                    if (aFilters.length > 0) {
                        oBindingParams.filters.push(new Filter(aFilters, true));
                    }
                }
                
            },
            onClear: function(){
                this.smartFilterBar.getControlByKey("frmDt").setValue();
                this.smartFilterBar.getControlByKey("toDt").setValue();
            }
        });
    });



    app/psbomdispui/webapp/controller/Items.controller.js



    sap.ui.define([
    "sap/ui/core/mvc/Controller",
    "sap/ui/model/json/JSONModel",
    "sap/ui/table/TablePersoController",
    "./TreeTableSetting",
    "sap/ui/core/library",
    "sap/ui/export/library",
    "sap/ui/export/Spreadsheet"
],
    /**
     * @param {typeof sap.ui.core.mvc.Controller} Controller
     */
    function (Controller, JSONModel, TablePersoController, treeTableSettings, coreLibrary, exportLibrary, Spreadsheet) {
        "use strict";
        var oSecurityScope;
        var valueState = coreLibrary.ValueState;
        var EdmType = exportLibrary.EdmType;
        return Controller.extend("pumorips.bomdisplay.psbomdispui.controller.Items", {
             /* =========================================================== */
            /* lifecycle methods                                           */
            /* =========================================================== */
            /**
            * This method will trigger once during app initialization
            * **/
            onInit: function () {
                this._oTPC = new TablePersoController({
                    table: this.byId("itemsTbl"),
                    //specify the first part of persistence ids e.g. 'demoApp-productsTable-dimensionsCol'
                    componentName: "treeTable",
                    //resetAllMode: ResetAllMode.ServiceReset,
                    persoService: treeTableSettings
                });
                this.oRouter = sap.ui.core.UIComponent.getRouterFor(this);
                this.oRouter.getRoute("Items").attachPatternMatched(this._onObjectMatched, this);
                this.displaybomService = this.getOwnerComponent().getService('BomDisp');


            },

             /* =========================================================== */
            /* internal methods                                            */
            /* =========================================================== */

            _onObjectMatched: function (oEve) {
                this._fetchAuthorizationScopes();
                this.oSelData = JSON.parse(oEve.getParameters().arguments.obj);
                this.oSelData= {
                    "zmpaPartno"    : decodeURIComponent(this.oSelData.zmpaPartno),
                    "prodDesc"      : decodeURIComponent(this.oSelData.prodDesc),
                    "factoryNumber" : decodeURIComponent(this.oSelData.factoryNumber),
                    "planningDiv"   : decodeURIComponent(this.oSelData.planningDiv),
                    "bomVersion"    : decodeURIComponent(this.oSelData.bomVersion),
                    "zhpPartno"     : decodeURIComponent(this.oSelData.zhpPartno)
                }    
                var selDataMdl = this.getOwnerComponent().getModel("selData");
                var CompDataModel = this.getOwnerComponent().getModel("CompDataModel");
                selDataMdl.setData(this.oSelData);
                if(!this.oSelData.generatedHppn){
                    this.oSelData.generatedHppn="";
                }
                if(!this.oSelData.zbtpMfgGrpComp){
                    this.oSelData.zbtpMfgGrpComp="";
                }
                var that = this;
                that.oTable = that.byId("itemsTbl");
                that.oTable.setBusy(true);
                that.oDataModel = this.getOwnerComponent().getModel();
                that.oDataModel.callFunction("/BOMTreeStructure", {
                    method: "GET",
                    urlParameters: { "zmpaPartno": decodeURIComponent(this.oSelData.zmpaPartno), "factoryNumber": decodeURIComponent(this.oSelData.factoryNumber),  "bomVersion" : decodeURIComponent(this.oSelData.bomVersion)},
                    success: function (oData, response) {
                        var data = JSON.parse(oData.BOMTreeStructure);
                        var levelVal = data.numOfLevelsExpand-1;
                        data = { "subComponents": data.BOMTreeData };
                       
                        CompDataModel.setProperty("/prodDescItem",data.subComponents[0].prodDesc);
                        CompDataModel.refresh();
                        
                        var oModel = new JSONModel(data);
                        that.oTable.setModel(oModel);
                        that.oTable.expandToLevel(levelVal);
                        that.oTable.setBusy(false);

                    },
                    error: function (oError) {
                        var msg = JSON.parse(oError.responseText).error.message.value;
                        that.errorDialog(msg);

                    }
                });

                //this.byId("title").setText("BOM Display("+data.length+")");
                //this.getView().setModel(oModel);
            },


            _fetchAuthorizationScopes: function () {
                var that = this;
                this.getView().setBusy(true);
                this.displaybomService.fetchSecurityAuthScopes().then(
                    function (oResponse) {
                        oSecurityScope = (oResponse.data.value) ? JSON.parse(oResponse.data.value) : JSON.parse(oResponse.data.SecurityAction);
                        if (oSecurityScope.WithCost) {
                            that.getView().byId("idManOvrHead").setVisible(true);
                            that.getView().byId("idCstOfComp").setVisible(true);
                            that.getView().byId("idRolUpCost").setVisible(true);
                            
                        }
                        else if(oSecurityScope.WithoutCost) {
                            that.getView().byId("idManOvrHead").setVisible(false);
                            that.getView().byId("idCstOfComp").setVisible(false);
                            that.getView().byId("idRolUpCost").setVisible(false);
                            
                        }
                        that.getView().setBusy(false);
                    },
                    function (error) {
                        that.showMsgBoxError(JSON.parse(error.responseText).error.message.value);
                        that.getView().setBusy(false);
                    });

            },
            

            /* =========================================================== */
            /* event handlers                                              */
            /* =========================================================== */

            onSettingsSelect: function () {
                this._oTPC.openDialog();
            },
            errorDialog: function (msg) {
                var errorDialog = new sap.m.Dialog({
                    title: "Error",
                    state: valueState.Error,
                    content: new sap.m.Text({ text: msg }).addStyleClass("errorText"),
                    endButton: new sap.m.Button({
                        text: "Ok",
                        press: function () {
                            errorDialog.close();
                        }.bind(this)
                    })
                });
                errorDialog.open();
            },
            onDownloadPress: function () {
                
                var that = this;
                var oView = that.getView()

                oView.setBusy(true);
                var oFilter = [];
                oFilter[0] = new sap.ui.model.Filter("zmpaPartno", sap.ui.model.FilterOperator.EQ, this.oSelData.zmpaPartno);
                oFilter[1] = new sap.ui.model.Filter("factoryNumber", sap.ui.model.FilterOperator.EQ, this.oSelData.factoryNumber);
                oFilter[2] = new sap.ui.model.Filter("bomVersion", sap.ui.model.FilterOperator.EQ, this.oSelData.bomVersion);

                that.oDataModel.read("/DownloadBOM", {
                    filters: oFilter,
                    success: function (oData, response) {

                        that.onExport(oData.results);
                        oView.setBusy(false);
                    },
                    error: function (oError) {

                        var msg = JSON.parse(oError.responseText).error.message.value;
                        that.errorDialog(msg);
                        oView.setBusy(false);
                    }
                });
            },
            createConfigColumnWithCost: function () {
                return [
                    {
                        label: 'Sequence No',
                        property: 'lineNo'
                    },
                    {
                        label: 'Level No',
                        property: 'levelNo'
                    },
                    {
                        label: 'Pumori PN for Child',
                        property: 'generatedHppn'
                    },
                    {
                        label: 'Factory Part Number for Child',
                        property: 'factoryChildPn'
                    },
                    {
                        label: 'Manufacturer Part Number(MPN) for Child',
                        property: 'mpnChildPn'
                    },
                    {
                        label: 'Factory Part Description for Child',
                        property: 'description'
                    },
                    {
                        label: 'Material Number(HPPN) for Child',
                        property: 'hppnChildPn'
                    },
                    {
                        label: 'QTY Required for Parent',
                        property: 'untUsg'
                    },
                    {
                        label: 'Unit of Measure',
                        property: 'uomAlt'
                    },
                    {
                        label: 'Material Type',
                        property: 'materialType'
                    },
                    {
                        label: 'Manufacturer Location ID',
                        property: 'vendorId'
                    },
                    {
                        label: 'Manufacturer Name',
                        property: 'manufName'
                    },
                    {
                        label: 'Identifier for Alternate Product',
                        property: 'sortString'
                    },
                    {
                        label: 'Usage Probability/Market Share',
                        property: 'marketShare'
                    },
                    {
                        label: 'Valid From',
                        property: 'componentValidFrom'
                    },
                    {
                        label: 'Valid To',
                        property: 'componentValidTo'
                    },
                    {
                        label: 'Strategic Auto Flag',
                        property: 'strategicAutoFlag'
                    },
                    {
                        label: 'Manufacturing Overhead at SKU level',
                        property: 'manufacturingOverhead'
                    },
                    {
                        label: 'Cost of components - Any level within BOM',
                        property: 'costOfComponents'
                    },
                    {
                        label: 'Roll Up Cost',
                        property: 'rollUpCost'
                    },
                    {
                        label: 'Phantom BOM',
                        property: 'phantomBOM'
                    },
                    {
                        label: 'Alternative Group',
                        property: 'altItemGroup'
                    },
                    {
                        label: 'Alternative Item Flag',
                        property: 'alternativeItem'
                    },
                    {
                        label: 'Scrap',
                        property: 'scrap'
                    },
                    {
                        label: 'Factory PN for Parent',
                        property: 'zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'factoryNumber'
                    }
                ];
            },

            createConfigColumnWithoutCost: function () {
                return [
                    {
                        label: 'Sequence No',
                        property: 'lineNo'
                    },
                    {
                        label: 'Level No',
                        property: 'levelNo'
                    },
                    {
                        label: 'Pumori PN for Child',
                        property: 'generatedHppn'
                    },
                    {
                        label: 'Factory Part Number for Child',
                        property: 'factoryChildPn'
                    },
                    {
                        label: 'Manufacturer Part Number(MPN) for Child',
                        property: 'mpnChildPn'
                    },
                    {
                        label: 'Factory Part Description for Child',
                        property: 'description'
                    },
                    {
                        label: 'Material Number(HPPN) for Child',
                        property: 'hppnChildPn'
                    },
                    {
                        label: 'QTY Required for Parent',
                        property: 'untUsg'
                    },
                    {
                        label: 'Unit of Measure',
                        property: 'uomAlt'
                    },
                    {
                        label: 'Material Type',
                        property: 'materialType'
                    },
                    {
                        label: 'Manufacturer Location ID',
                        property: 'vendorId'
                    },
                    {
                        label: 'Manufacturer Name',
                        property: 'manufName'
                    },
                    {
                        label: 'Identifier for Alternate Product',
                        property: 'sortString'
                    },
                    {
                        label: 'Usage Probability/Market Share',
                        property: 'marketShare'
                    },
                    {
                        label: 'Valid From',
                        property: 'componentValidFrom'
                    },
                    {
                        label: 'Valid To',
                        property: 'componentValidTo'
                    },
                    {
                        label: 'Strategic Auto Flag',
                        property: 'strategicAutoFlag'
                    },
                    {
                        label: 'Phantom BOM',
                        property: 'phantomBOM'
                    },
                    {
                        label: 'Alternative Group',
                        property: 'altItemGroup'
                    },
                    {
                        label: 'Alternative Item Flag',
                        property: 'alternativeItem'
                    },
                    {
                        label: 'Scrap',
                        property: 'scrap'
                    },
                    {
                        label: 'Factory PN for Parent',
                        property: 'zmpaPartno'
                    },
                    {
                        label: 'Factory Number',
                        property: 'factoryNumber'
                    }
                ];
            },
            onExport: function (data) {
                var aCols,bCols, items, oSettings, oSheet;
                    var oModel = new JSONModel(data);
                    aCols = this.createConfigColumnWithoutCost();
                    bCols = this.createConfigColumnWithCost();
                    items = oModel.getProperty('/');
                    if(oSecurityScope.WithCost){
                        oSettings = {
                            workbook: { columns: bCols },
                            dataSource: items
                        };
                    } else if(oSecurityScope.WithoutCost){
                        oSettings = {
                            workbook: { columns: aCols },
                            dataSource: items
                        };
                    }
                    
                oSettings.fileName= 'BOM Structure Data'
                oSheet = new Spreadsheet(oSettings);
                oSheet.build()
                    .then(function () {
                        MessageToast.show(this.getResourceBundleText("EXP_DONE"));
                    })
                    .finally(oSheet.destroy);
            },
            highlightFun: function (highlightFlg) {
                var noneVal = "None", succVal = "Success";
                if (highlightFlg == "X") {
                    return succVal;
                }
                else
                    return noneVal;
            },

            /**
            * This method is to expand the tree table on click of button
            * **/

            
            onExpandTreeTable:function(oEvent){
                var that = this;
                that.oTable = that.byId("itemsTbl");
                that.oTable.expandToLevel(999);

            },

            /**
            * This method is to collapse the expanded tree table on click of button
            * **/
            onCollapseTreeTable:function(oEvent){
                var that = this;
                that.oTable = that.byId("itemsTbl");
                that.oTable.collapseAll();

            }
        });
    });



    app/psbomdispui/webapp/controller/TreeTableSetting.js



    sap.ui.define(['sap/ui/thirdparty/jquery'],
	function(jQuery) {
	"use strict";

	var treeTableSettings = {

	


		getPersData : function () {
			var oDeferred = new jQuery.Deferred();
			if (!this._oBundle) {
				this._oBundle = this.oData;
			}
			oDeferred.resolve(this._oBundle);
			
			return oDeferred.promise();
		},

		setPersData : function (oBundle) {
			var oDeferred = new jQuery.Deferred();
			this._oBundle = oBundle;
			oDeferred.resolve();
			return oDeferred.promise();
		},delPersData : function (oBundle) {
        }

	
		
	};

	return treeTableSettings;

});




app/psbomflushandfillui/webapp/Component.js

/**
 * eslint-disable @sap/ui5-jsdocs/no-jsdoc
 */

sap.ui.define([
        "sap/ui/core/UIComponent",
        "sap/ui/Device",
        "pumorips/bomdisplay/psbomflushandfillui/model/models",
        "./service/BOMFlushFillService",
        "./state/BOMFlushFillState"
    ],
    function (UIComponent, Device, models,BOMFlushFillService,BOMFlushFillState) {
        "use strict";

        return UIComponent.extend("pumorips.bomdisplay.psbomflushandfillui.Component", {
            metadata: {
                manifest: "json"
            },

            /**
             * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.
             * @public
             * @override
             */
            init: function () {
                // call the base component's init function
                UIComponent.prototype.init.apply(this, arguments);

                //Cretae globle object for etag
                this.metadataForEtag;
                // initialize receive service with the component
                this._oBOMFlushFillService = new BOMFlushFillService(this.getModel());
                // initialize receive state with the component
                this._oBOMFlushFillState = new BOMFlushFillState(this._oBOMFlushFillService);

                // enable routing
                this.getRouter().initialize();

                // set the device model
                this.setModel(models.createDeviceModel(), "device");

                // set the device model
                this.setModel(models.createDeviceModel(), "device");
                this.setModel(this._oBOMFlushFillState.getModel(), "oJSONModel");
            },
            // Return the service name as per parameter
            getService: function (sService) {
                return this["_o" + sService + "Service"];
            },
             // Return the state name as per parameter
             getState: function (sState) {
                return this["_o" + sState + "State"];
            }
        });
    }
);




app/psbomdispui/webapp/service/BomDispService.js


sap.ui.define([
    "./CoreService"
], function (CoreService) {
    "use strict";

    var BomDispService = CoreService.extend("pumorips.bomdisplay.psbomdispui.service.BomDispService", {
        constructor: function (model) {
            CoreService.call(this, model);
        },

        /**
            *  method for Security service call
        */
        fetchSecurityAuthScopes: function () {
            return this.odata("/SecurityAction").get({});
        }
    });

    
    return BomDispService;
});



app/psbomdispui/webapp/service/CoreService.js



sap.ui.define([
	"sap/ui/base/Object"
], function (Object) {
	"use strict";

	return Object.extend("pumorips.bomdisplay.psbomdispui.service.CoreService", {
		constructor: function (model) {
			Object.call(this);
			if (model) {
				this.setModel(model);
			}
		},
		setModel: function (model) {
			this.model = model;
		},
		odata: function (url) {
			var me = this;
			var core = {
				ajax: function (type, url, data, parameters) {
					var promise = new Promise(function (resolve, reject) {
						var args = [];
						var params = {};
						args.push(url);
						if (data) {
							args.push(data);
						}
						if (parameters) {
							params = parameters;
						}
						params.success = function (result, response) {
							resolve({
								data: result,
								response: response
							});
						};
						params.error = function (error) {
							reject(error);
						};
						args.push(params);
						me.model[type].apply(me.model, args);
					});
					return promise;
				}
			};

			return {
				'get': function (params) {
					return core.ajax('read', url, false, params);
				},
				'post': function (data, params) {
					return core.ajax('create', url, data, params);
				},
				'put': function (data, params) {
					return core.ajax('update', url, data, params);
				},
				'delete': function (params) {
					return core.ajax('remove', url, false, params);
				}
			};
		},
		http: function (url) {
			var core = {
				ajax: function (method, url, headers, args) {
					var promise = new Promise(function (resolve, reject) {
						var client = new XMLHttpRequest();
						var uri = url;
						if (args && method === 'GET') {
							uri += '?';
							var argcount = 0;
							for (var key in args) {
								if (args.hasOwnProperty(key)) {
									if (argcount++) {
										uri += '&';
									}
									uri += encodeURIComponent(key) + '=' + encodeURIComponent(args[key]);
								}
							}
						}
						if (args && (method === 'POST' || method === 'PUT')) {
							var data = {};
							for (var keyp in args) {
								if (args.hasOwnProperty(keyp)) {
									data[keyp] = args[keyp];
								}
							}
						}
						client.open(method, uri);
						
						if (method === 'POST' || method === 'PUT') {
							client.setRequestHeader("accept", "application/json");
							client.setRequestHeader("content-type", "application/json");
						}
						for (var keyh in headers) {
							if (headers.hasOwnProperty(keyh)) {
								client.setRequestHeader(keyh, headers[keyh]);
							}
						}
						if (data) {
							client.send(JSON.stringify(data));
						} else {
							client.send();
						}
						client.onload = function () {
							if (this.status == 200) {
								resolve(this.response);
							} else {
								reject(this.statusText);
							}
						};
						client.onerror = function () {
							reject(this.statusText);
						};
					});
					return promise;
				}
			};

			return {
				'get': function (headers, args) {
					return core.ajax('GET', url, headers, args);
				},
				'post': function (headers, args) {
					return core.ajax('POST', url, headers, args);
				},
				'put': function (headers, args) {
					return core.ajax('PUT', url, headers, args);
				},
				'delete': function (headers, args) {
					return core.ajax('DELETE', url, headers, args);
				}
			};
		}
	});
});



app/psbomdispui/webapp/state/BaseState.js


sap.ui.define([
	"sap/ui/base/Object",
	"sap/ui/model/json/JSONModel"
], function(Object, JSONModel) {
	"use strict";
	return Object.extend("pumorips.bomdisplay.psbomdispui.state.BaseState", {
       
		getModel: function() {
			if (!this.model) {
				this.model = new JSONModel(this.data, true);
			}
			return this.model;
		},
		updateModel: function(bHardRefresh) {
			if (this.model) {
				this.model.refresh(bHardRefresh ? true : false);
			}
		}
	});
});



app/psbomdispui/webapp/state/BomDispState.js

sap.ui.define([
    "../state/BaseState",
], function (BaseState) {
    "use strict";
    var BomDispState = BaseState.extend("pumorips.bomdisplay.psbomdispui.state.BomDispState", {
        constructor: function (oService) {
            this.data = {
                display: true,
                busy: true                
            };
            this.BomDispService = oService;
            BaseState.call(this);
        }
       

    });
    return BomDispState;
});



app/psbomdispui/webapp/manifest.json



{
  "_version": "1.59.0",
  "sap.app": {
    "id": "pumorips.bomdisplay.psbomdispui",
    "type": "application",
    "i18n": "i18n/i18n.properties",
    "applicationVersion": {
      "version": "0.0.1"
    },
    "title": "{{appTitle}}",
    "description": "{{appDescription}}",
    "resources": "resources.json",
    "sourceTemplate": {
      "id": "@sap/generator-fiori:basic",
      "version": "1.13.3",
      "toolsId": "ebdae547-5ddc-42ba-8bde-3c5ad6d2cd2a"
    },
    "dataSources": {
      "mainService": {
        "uri": "srv-api/v2/bomdisplay/",
        "type": "OData",
        "settings": {
          "annotations": [],
          "odataVersion": "2.0"
        }
      }
    },
    "crossNavigation": {
      "inbounds": {
        "psbomdisp-display": {
          "semanticObject": "psbomdisp",
          "action": "display",
          "title": "{{flpTitle}}",
          "signature": {
            "parameters": {},
            "additionalParameters": "allowed"
          }
        }
      }
    }
  },
  "sap.ui": {
    "technology": "UI5",
    "icons": {
      "icon": "",
      "favIcon": "",
      "phone": "",
      "phone@2": "",
      "tablet": "",
      "tablet@2": ""
    },
    "deviceTypes": {
      "desktop": true,
      "tablet": true,
      "phone": true
    }
  },
  "sap.ui5": {
    "flexEnabled": false,
    "dependencies": {
      "minUI5Version": "1.123.1",
      "libs": {
        "sap.m": {},
        "sap.ui.core": {},
        "sap.f": {},
        "sap.suite.ui.generic.template": {},
        "sap.ui.comp": {},
        "sap.ui.generic.app": {},
        "sap.ui.table": {},
        "sap.ushell": {}
      }
    },
    "contentDensities": {
      "compact": true,
      "cozy": true
    },
    "models": {
      "i18n": {
        "type": "sap.ui.model.resource.ResourceModel",
        "settings": {
          "bundleName": "pumorips.bomdisplay.psbomdispui.i18n.i18n"
        }
      },
      "": {
        "dataSource": "mainService",
        "preload": true,
        "settings": {
          "synchronizationMode": "None",
          "operationMode": "Server",
          "autoExpandSelect": true,
          "earlyRequests": true
        }
      },
      "excelModel": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "selData": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "CompareData": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "selDataModel": {
        "type": "sap.ui.model.json.JSONModel"
      },
      "CompDataModel": {
        "type": "sap.ui.model.json.JSONModel"
      }
    },
    "resources": {
      "css": [
        {
          "uri": "css/style.css"
        }
      ]
    },
    "routing": {
      "config": {
        "routerClass": "sap.m.routing.Router",
        "viewType": "XML",
        "async": true,
        "viewPath": "pumorips.bomdisplay.psbomdispui.view",
        "controlAggregation": "pages",
        "controlId": "app",
        "clearControlAggregation": false
      },
      "routes": [
        {
          "name": "Header",
          "pattern": "",
          "target": [
            "Header"
          ]
        },
        {
          "name": "Items",
          "pattern": "Items/{obj}",
          "target": [
            "Items"
          ]
        }
      ],
      "targets": {
        "Header": {
          "viewType": "XML",
          "transition": "slide",
          "viewId": "Header",
          "viewName": "Header"
        },
        "Items": {
          "viewType": "XML",
          "transition": "slide",
          "viewId": "Items",
          "viewName": "Items"
        }
      }
    },
    "rootView": {
      "viewName": "pumorips.bomdisplay.psbomdispui.view.App",
      "type": "XML",
      "async": true,
      "id": "App"
    }
  },
  "sap.cloud": {
    "public": true,
    "service": "PSBOMDISP"
  }
}



app/services.cds


using from './psbomdispui/annotations';
using from './psbomwhereusedui/annotations';
using from './psbomflushandfillui/annotations';
using from './psmassuploadui/annotations';


annotate BOMDisplayService.BOMHeaderView with {
    zbtpComp          @(title: '{i18n>genHPPNParent}');
    zmpaPartno        @(title: '{i18n>MPA_FPN_P}');
    factoryNumber     @(title: '{i18n>facCode}');
    alternativeBom    @(title: '{i18n>alternativeBom}');
    prodDesc          @(title: '{i18n>MPA_PN_DESC}');
    zhpPartno         @(title: '{i18n>p_MAT_NUM_HPPN}');
    baseQuantity      @(title: '{i18n>BOM_BaseUOM}');
    baseunitofMeasure @(title: '{i18n>unitOfMeasure}');
    bomVersion        @(title: '{i18n>BOM_VERSION}');
    @UI.HiddenFilter
    bomValidFrom      @(title: '{i18n>BOM_VALID_FRM}');
    bomValidTo        @(title: '{i18n>BOM_VALID_TO}');
    planningDiv       @(title: '{i18n>busType}');
    yield             @(title: '{i18n>yield}');
    markedForDeletion @(title: '{i18n>MARKED_FOR_DEL}');
    bomImportDate     @(title: '{i18n>bomImpDate}');
    @UI.Hidden markedForDeletion;
    @UI.HiddenFilter markedForDeletion;
    @UI.HiddenFilter bomValidTo;
}

annotate BOMDisplayService.materialNumberValueHelp with {
    zmpaPartno @(title: '{i18n>MPA_FPN_P}');
}

annotate BOMDisplayService.factoryCodeValueHelp with {
    factoryNumber @(title: '{i18n>facCode}');
}

annotate BOMDisplayService.alternativeBomValueHelp with {
    alternativeBom @(title: '{i18n>alternativeBom}');
}

annotate BOMDisplayService.prodDescValueHelp with {
    prodDesc @(title: '{i18n>MPA_PN_DESC}');
}

annotate BOMDisplayService.zhpPartnoValueHelp with {
    zhpPartno @(title: '{i18n>p_MAT_NUM_HPPN}');
}

annotate BOMDisplayService.baseunitofMeasureValueHelp with {
    baseunitofMeasure @(title: '{i18n>unitOfMeasure}');
}

annotate BOMDisplayService.planningDivValueHelp with {
    planningDiv @(title: '{i18n>busType}');
}

annotate BOMDisplayService.bomVersionValueHelp with {
    bomVersion @(title: '{i18n>BOM_VERSION}');
}

annotate BOMDisplayService.pumoriPnValueHelpDisplayBom with {
    zbtpComp  @(title: '{i18n>genHPPNParent}');
};



annotate BOMDisplayService.BOMHeaderView with @(UI: {
    SelectionFields: [
        zmpaPartno,
        factoryNumber,
        bomVersion
    ],
    LineItem       : [
        {
            Value: zmpaPartno,
            Label: '{i18n>MPA_FPN_P}',
        },
        {
            Value: prodDesc,
            Label: '{i18n>MPA_PN_DESC}',
        },
        
        {
            Value: zbtpComp,
            Label: '{i18n>genHPPNParent}'
        },
        {
            Value: zhpPartno,
            Label: '{i18n>p_MAT_NUM_HPPN}',
        },
        {
            Value: factoryNumber,
            Label: '{i18n>facCode}',
        },
        {
            Value: baseQuantity,
            Label: '{i18n>BOM_BaseUOM}',
        },
        {
            Value: bomValidFrom,
            Label: '{i18n>BOM_VALID_FRM}',
        },
        {
            Value: bomValidTo,
            Label: '{i18n>BOM_VALID_TO}',
        },
        {
            Value: bomVersion,
            Label: '{i18n>BOM_VERSION}'
        },
        {
            Value: planningDiv,
            Label: '{i18n>busType}',
        },
    ],
},
 Capabilities: {FilterRestrictions: {FilterExpressionRestrictions: [
        {
            $Type             : 'Capabilities.FilterExpressionRestrictionType',
            Property          : bomValidFrom,
            AllowedExpressions: 'SingleRange'
        },
        {
            $Type             : 'Capabilities.FilterExpressionRestrictionType',
            Property          : bomValidTo,
            AllowedExpressions: 'SingleRange'
        }
    ]}}
);

annotate BOMDisplayService.BOMHeaderView {
    zmpaPartno        @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'materialNumberValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    factoryNumber     @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'factoryCodeValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    alternativeBom    @(Common: {
        Text     : {
            $value                : alternativeBom,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : alternativeBom,
            CollectionPath : 'alternativeBomValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: alternativeBom,
                ValueListProperty: 'alternativeBom'
            }]
        }
    });
    prodDesc          @(Common: {
        Text     : {
            $value                : prodDesc,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : prodDesc,
            CollectionPath : 'prodDescValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: prodDesc,
                ValueListProperty: 'prodDesc'
            }]
        }
    });
    zhpPartno         @(Common: {
        Text     : {
            $value                : zhpPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zhpPartno,
            CollectionPath : 'zhpPartnoValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zhpPartno,
                ValueListProperty: 'zhpPartno'
            }]
        }
    });
    baseunitofMeasure @(Common: {
        Text     : {
            $value                : baseunitofMeasure,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : baseunitofMeasure,
            CollectionPath : 'baseunitofMeasureValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: baseunitofMeasure,
                ValueListProperty: 'baseunitofMeasure'
            }]
        }
    });
    planningDiv       @(Common: {
        Text     : {
            $value                : planningDiv,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : planningDiv,
            CollectionPath : 'planningDivValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: planningDiv,
                ValueListProperty: 'planningDiv'
            }]
        }
    });
    bomVersion        @(Common: {
        Text     : {
            $value                : bomVersion,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : '{i18n>BOM_VERSION}',
            CollectionPath : 'bomVersionValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: bomVersion,
                ValueListProperty: 'bomVersion'
            }]
        }
    });
    zbtpComp         @(Common: {
        Text     : {
            $value                : zbtpComp,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zbtpComp,
            CollectionPath : 'pumoriPnValueHelpDisplayBom',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zbtpComp,
                ValueListProperty: 'zbtpComp'
            }]
        }
    });
};

annotate BOMDisplayService.BOMHeaderHistoryView {
    zmpaPartno        @(title: '{i18n>MPA_FPN_P}');
    factoryNumber     @(title: '{i18n>facCode}');
    alternativeBom    @(title: '{i18n>alternativeBom}');
    prodDesc          @(title: '{i18n>MPA_PN_DESC}');
    zhpPartno         @(title: '{i18n>MAT_NUM_HPPN}');
    baseQuantity      @(title: '{i18n>BOM_BaseUOM}');
    baseunitofMeasure @(title: '{i18n>unitOfMeasure}');
    @UI.HiddenFilter
    bomValidFrom      @(title: '{i18n>BOM_VALID_FRM}');
    @UI.HiddenFilter
    bomValidTo        @(title: '{i18n>BOM_VALID_TO}');
    bomVersion        @(title: '{i18n>BOM_VERSION}');
    planningDiv       @(title: '{i18n>busType}');
    yield             @(title: '{i18n>yield}');
    @UI.Hidden
    @UI.HiddenFilter
    markedForDeletion @(title: '{i18n>MARKED_FOR_DEL}');
    bomImportDate     @(title: '{i18n>bomImpDate}');
};

annotate BOMDisplayService.factoryCodeFillValueHelp {
    factoryNumber @(title: '{i18n>facCode}');
}

annotate BOMDisplayService.materialNumberFillValueHelp with {
    zmpaPartno @(title: '{i18n>MPA_FPN_P}');
}

annotate BOMDisplayService.alternativeBomFillValueHelp with {
    alternativeBom @(title: '{i18n>alternativeBom}');
}

annotate BOMDisplayService.prodDescFillValueHelp with {
    prodDesc @(title: '{i18n>MPA_PN_DESC}');
}

annotate BOMDisplayService.zhpPartnoFillValueHelp with {
    zhpPartno @(title: '{i18n>MAT_NUM_HPPN}');
}

annotate BOMDisplayService.baseunitofMeasureFillValueHelp with {
    baseunitofMeasure @(title: '{i18n>unitOfMeasure}');
}

annotate BOMDisplayService.planningDivFillValueHelp with {
    planningDiv @(title: '{i18n>busType}');
}

annotate BOMDisplayService.BOMHeaderHistoryView with @(
    UI          : {LineItem: [
        {
            Value: zmpaPartno,
            Label: '{i18n>MPA_FPN_P}',
        },
        {
            Value: factoryNumber,
            Label: '{i18n>facCode}',
        },
        {
            Value: alternativeBom,
            Label: '{i18n>alternativeBom}'
        },
        {
            Value: prodDesc,
            Label: '{i18n>MPA_PN_DESC}',
        },
        {
            Value: zhpPartno,
            Label: '{i18n>MAT_NUM_HPPN}',
        },

        {
            Value: baseQuantity,
            Label: '{i18n>BOM_BaseUOM}',
        },
        {
            Value: baseunitofMeasure,
            Label: '{i18n>unitOfMeasure}'
        },
        {
            Value: bomValidFrom,
            Label: '{i18n>BOM_VALID_FRM}',
        },
        {
            Value: bomValidTo,
            Label: '{i18n>BOM_VALID_TO}',
        },
        {
            Value: bomVersion,
            Label: '{i18n>BOM_VERSION}'
        },
        {
            Value: planningDiv,
            Label: '{i18n>busType}',
        },
        {
            Value: yield,
            Label: '{i18n>yield}'
        },
        {
            Value: bomImportDate,
            Label: '{i18n>bomImpDate}'
        }
    ], },
    Capabilities: {FilterRestrictions: {
        $Type             : 'Capabilities.FilterRestrictionsType',
        RequiredProperties: [factoryNumber]
    }}
) {
    factoryNumber @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'factoryCodeFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    zmpaPartno        @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'materialNumberFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    alternativeBom    @(Common: {
        Text     : {
            $value                : alternativeBom,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : alternativeBom,
            CollectionPath : 'alternativeBomFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: alternativeBom,
                ValueListProperty: 'alternativeBom'
            }]
        }
    });
    prodDesc          @(Common: {
        Text     : {
            $value                : prodDesc,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : prodDesc,
            CollectionPath : 'prodDescFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: prodDesc,
                ValueListProperty: 'prodDesc'
            }]
        }
    });
    zhpPartno         @(Common: {
        Text     : {
            $value                : zhpPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zhpPartno,
            CollectionPath : 'zhpPartnoFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zhpPartno,
                ValueListProperty: 'zhpPartno'
            }]
        }
    });
    baseunitofMeasure @(Common: {
        Text     : {
            $value                : baseunitofMeasure,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : baseunitofMeasure,
            CollectionPath : 'baseunitofMeasureFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: baseunitofMeasure,
                ValueListProperty: 'baseunitofMeasure'
            }]
        }
    });
    planningDiv       @(Common: {
        Text     : {
            $value                : planningDiv,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : planningDiv,
            CollectionPath : 'planningDivFillValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: planningDiv,
                ValueListProperty: 'planningDiv'
            }]
        }
    })

};

annotate BOMDisplayService.BOMHeaderFlushView with {
    zmpaPartno     @(title: '{i18n>MPA_FPN_P}');
    factoryNumber  @(title: '{i18n>facCode}');
    bomVersion     @(title: '{i18n>BOM_VERSION}');
    @UI.HiddenFilter
    bomValidFrom   @(title: '{i18n>BOM_VALID_FRM}');
    @UI.HiddenFilter
    bomValidTo     @(title: '{i18n>BOM_VALID_TO}');
    yield             @(title: '{i18n>yield}');
    @UI.HiddenFilter
    @UI.Hidden
    markedForDeletion;
    planningDiv    @(title: '{i18n>busType}');
    prodDesc       @(title: '{i18n>MPA_PN_DESC}');
    baseQuantity   @(title: '{i18n>BOM_BaseUOM}');
    alternativeBom @(title: '{i18n>alternativeBom}');
    bomImportDate  @(title: '{i18n>bomImpDate}');
    zhpPartno      @(title: '{i18n>MAT_NUM_HPPN}');
}

annotate BOMDisplayService.factoryCodeFlushValueHelp with {
    factoryNumber @(title: '{i18n>facCode}');
}

annotate BOMDisplayService.materialNumberFlushValueHelp with {
    zmpaPartno @(title: '{i18n>MPA_FPN_P}');
}

annotate BOMDisplayService.alternativeBomFlushValueHelp with {
    alternativeBom @(title: '{i18n>alternativeBom}');
}

annotate BOMDisplayService.prodDescFlushValueHelp with {
    prodDesc @(title: '{i18n>MPA_PN_DESC}');
}

annotate BOMDisplayService.zhpPartnoFlushValueHelp with {
    zhpPartno @(title: '{i18n>MAT_NUM_HPPN}');
}

annotate BOMDisplayService.planningDivFlushValueHelp with {
    planningDiv @(title: '{i18n>busType}');
}

annotate BOMDisplayService.BOMHeaderFlushView with @(
    UI          : {
        SelectionFields: [factoryNumber],
        LineItem       : [
            {
                Value: zmpaPartno,
                Label: '{i18n>MPA_FPN_P}',
            },
            {
                Value: prodDesc,
                Label: '{i18n>MPA_PN_DESC}',
            },
            {
                Value: baseQuantity,
                Label: '{i18n>BOM_BaseUOM}',
            },
            {
                Value: factoryNumber,
                Label: '{i18n>facCode}',
            },
            {
                Value: alternativeBom,
                Label: '{i18n>alternativeBom}'
            },
            {
                Value: bomValidFrom,
                Label: '{i18n>BOM_VALID_FRM}',
            },
            {
                Value: bomValidTo,
                Label: '{i18n>BOM_VALID_TO}',
            },
            {
                Value: planningDiv,
                Label: '{i18n>busType}',
            },
            {
                Value: zhpPartno,
                Label: '{i18n>MAT_NUM_HPPN}',
            },
            {
                Value: yield,
                Label: '{i18n>yield}'
            },
            {
                Value: bomVersion,
                Label: '{i18n>BOM_VERSION}'
            },
            {
                Value: bomImportDate,
                Label: '{i18n>bomImpDate}'
            }
        ]
    },
    Capabilities: {FilterRestrictions: {
        $Type             : 'Capabilities.FilterRestrictionsType',
        RequiredProperties: [factoryNumber]
    }}

) {
    factoryNumber @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'factoryCodeFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    zmpaPartno        @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'materialNumberFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    alternativeBom    @(Common: {
        Text     : {
            $value                : alternativeBom,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : alternativeBom,
            CollectionPath : 'alternativeBomFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: alternativeBom,
                ValueListProperty: 'alternativeBom'
            }]
        }
    });
    prodDesc          @(Common: {
        Text     : {
            $value                : prodDesc,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : prodDesc,
            CollectionPath : 'prodDescFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: prodDesc,
                ValueListProperty: 'prodDesc'
            }]
        }
    });
    zhpPartno         @(Common: {
        Text     : {
            $value                : zhpPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zhpPartno,
            CollectionPath : 'zhpPartnoFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zhpPartno,
                ValueListProperty: 'zhpPartno'
            }]
        }
    });
    planningDiv       @(Common: {
        Text     : {
            $value                : planningDiv,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : planningDiv,
            CollectionPath : 'planningDivFlushValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: planningDiv,
                ValueListProperty: 'planningDiv'
            }]
        }
    })
};

annotate BOMDisplayService.SingleLevelBomWhereUseView {
    @UI.HiddenFilter
    hppnChildPn                  @(title: '{i18n>hppnChildPn}');
    factoryChildPn               @(title: '{i18n>factoryChildPn}');
    mpnChildPn                   @(title: '{i18n>mpnChildPn}');
    factoryNumber                @(title: '{i18n>factoryNumber}');
    @UI.HiddenFilter
    levelNo                      @(title: '{i18n>lvlno}');
    generatedHppn                @(title: '{i18n>genHPPN}');
    @UI.HiddenFilter
    singleLevelParent            @(title: '{i18n>singleLevelParent}');
    @UI.HiddenFilter
    zmpaPartno                   @(title: '{i18n>zmpaPartnosngllvl}');
    @UI.HiddenFilter
    uomAlt                       @(title: '{i18n>uomAlt}');
    @UI.HiddenFilter
    singleLevelQuantity          @(title: '{i18n>singleLevelQuantity}');
    @UI.HiddenFilter
    singleLevelresultingQuantity @(title: '{i18n>singleLevelresultingQuantity}');
    @UI.HiddenFilter
    marketShare                  @(title: '{i18n>marketShare}');
    @UI.HiddenFilter
    sortString                   @(title: '{i18n>sortStr}');
    @UI.HiddenFilter
    componentValidFrom           @(title: '{i18n>validFrom}');
    @UI.HiddenFilter
    componentValidTo             @(title: '{i18n>validTo}');
};

annotate BOMDisplayService.SingleLevelFacNumValueHelp with {
    factoryNumber @(title: '{i18n>factoryNumber}');
}

annotate BOMDisplayService.SingleLevelfactoryChildPnValueHelp with {
    factoryChildPn @(title: '{i18n>factoryChildPn}');
}

annotate BOMDisplayService.SingleLevelmpnChildPnValueHelp with {
    mpnChildPn @(title: '{i18n>mpnChildPn}');
}

annotate BOMDisplayService.SingleLevelgeneratedHppnValueHelp with {
    generatedHppn @(title: 'Pumori PN for Child');
}

annotate BOMDisplayService.SingleLevelfactoryPnforParentValueHelp with {
    zmpaPartno @(title: '{i18n>zmpaPartnosngllvl}');
}

annotate BOMDisplayService.SingleLevelmaterialNumberforChildValueHelp with {
    hppnChildPn @(title: '{i18n>hppnChildPn}');
}

annotate BOMDisplayService.SingleLevelidentifierforAlternateProductValueHelp with {
    sortString @(title: '{i18n>sortStr}');
}

annotate BOMDisplayService.SingleLevelUOMAlternateValueHelp with {
    uomAlt @(title: '{i18n>uomAlt}');
}

annotate BOMDisplayService.SingleLevelParentPartValueHelp with {
    singleLevelParent @(title: '{i18n>singleLevelParent}');
}


annotate BOMDisplayService.SingleLevelBomWhereUseView with @(
    UI          : {
        SelectionFields: [
            factoryNumber,
            factoryChildPn,
            mpnChildPn,
            generatedHppn
        ],
        LineItem       : [
            {
                Value: generatedHppn,
                Label: 'Pumori PN for Child',
            },
            {
                Value: factoryNumber,
                Label: '{i18n>factoryNumber}',
            },
            {
                Value: factoryChildPn,
                Label: '{i18n>factoryChildPn}',
            },
            {
                Value: mpnChildPn,
                Label: '{i18n>mpnChildPn}',
            },
            {
                Value: hppnChildPn,
                Label: '{i18n>hppnChildPn}'
            },
            {
                Value: singleLevelParent,
                Label: '{i18n>singleLevelParent}'
            },
            {
                Value: zmpaPartno,
                Label: '{i18n>zmpaPartnosngllvl}'
            },
            {
                Value: singleLevelQuantity,
                Label: '{i18n>singleLevelQuantity}'
            },
            {
                Value: singleLevelresultingQuantity,
                Label: '{i18n>singleLevelresultingQuantity}'
            },
            {
                Value: marketShare,
                Label: '{i18n>marketShare}'
            },
            {
                Value: sortString,
                Label: '{i18n>sortStr}'
            },
            {
                Value: componentValidFrom,
                Label: '{i18n>validFrom}'
            },
            {
                Value: componentValidTo,
                Label: '{i18n>validTo}'
            }
        ]

    }

) {
    generatedHppn  @(Common: {
        Text     : {
            $value                : generatedHppn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : generatedHppn,
            CollectionPath : 'SingleLevelgeneratedHppnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: generatedHppn,
                ValueListProperty: 'generatedHppn'
            }]
        }
    });
    factoryNumber  @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'SingleLevelFacNumValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    factoryChildPn @(Common: {
        Text     : {
            $value                : factoryChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryChildPn,
            CollectionPath : 'SingleLevelfactoryChildPnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryChildPn,
                ValueListProperty: 'factoryChildPn'
            }]
        }
    });
    mpnChildPn     @(Common: {
        Text     : {
            $value                : mpnChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : mpnChildPn,
            CollectionPath : 'SingleLevelmpnChildPnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: mpnChildPn,
                ValueListProperty: 'mpnChildPn'
            }]
        }
    });
    zmpaPartno     @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'SingleLevelfactoryPnforParentValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    hppnChildPn     @(Common: {
        Text     : {
            $value                : hppnChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : hppnChildPn,
            CollectionPath : 'SingleLevelmaterialNumberforChildValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: hppnChildPn,
                ValueListProperty: 'hppnChildPn'
            }]
        }
    });
    sortString     @(Common: {
        Text     : {
            $value                : sortString,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : sortString,
            CollectionPath : 'SingleLevelidentifierforAlternateProductValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: sortString,
                ValueListProperty: 'sortString'
            }]
        }
    });
    uomAlt     @(Common: {
        Text     : {
            $value                : uomAlt,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : uomAlt,
            CollectionPath : 'SingleLevelUOMAlternateValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: uomAlt,
                ValueListProperty: 'uomAlt'
            }]
        }
    });
    singleLevelParent     @(Common: {
        Text     : {
            $value                : singleLevelParent,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : singleLevelParent,
            CollectionPath : 'SingleLevelParentPartValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: singleLevelParent,
                ValueListProperty: 'singleLevelParent'
            }]
        }
    });
};

annotate BOMDisplayService.topLevelBomWhereUseView {
    @UI.HiddenFilter
    hppnChildPn               @(title: '{i18n>hppnChildPn}');
    factoryChildPn            @(title: '{i18n>factoryChildPn}');
    mpnChildPn                @(title: '{i18n>mpnChildPn}');
    factoryNumber             @(title: '{i18n>factoryNumber}');
    @UI.HiddenFilter
    levelNo                   @(title: '{i18n>lvl}');
    generatedHppn             @(title: 'Pumori PN for Child');
    @UI.HiddenFilter
    topLevelParent            @(title: '{i18n>topLevelParent}');
    @UI.HiddenFilter
    zmpaPartno                @(title: '{i18n>zmpaPartnoToplvl}');
    @UI.HiddenFilter
    uomAlt                    @(title: '{i18n>uomAlt}');
    @UI.HiddenFilter
    topLevelQuantity          @(title: '{i18n>topLevelQuantity}');
    @UI.HiddenFilter
    topLevelresultingQuantity @(title: '{i18n>topLevelresultingQuantity}');
    @UI.HiddenFilter
    marketShare               @(title: '{i18n>marketShare}');
    @UI.HiddenFilter
    sortString                @(title: '{i18n>sortStr}');
    @UI.HiddenFilter
    componentValidFrom        @(title: '{i18n>validFrom}');
    @UI.HiddenFilter
    componentValidTo          @(title: '{i18n>validTo}');
};

annotate BOMDisplayService.topLevelFacNumValueHelp with {
    factoryNumber @(title: '{i18n>factoryNumber}');
}

annotate BOMDisplayService.topLevelfactoryChildPnValueHelp with {
    factoryChildPn @(title: '{i18n>factoryChildPn}');
}

annotate BOMDisplayService.topLevelmpnChildPnValueHelp with {
    mpnChildPn @(title: '{i18n>mpnChildPn}');
}

annotate BOMDisplayService.topLevelgeneratedHppnValueHelp with {
    generatedHppn @(title: 'Pumori PN for Child');
}

annotate BOMDisplayService.topLevelfactoryPnforParentValueHelp with {
    zmpaPartno @(title: '{i18n>zmpaPartnoToplvl}');
}

annotate BOMDisplayService.topLevelmaterialNumberforChildValueHelp with {
    hppnChildPn @(title: '{i18n>hppnChildPn}');
}

annotate BOMDisplayService.topLevelidentifierforAlternateProductValueHelp with {
    sortString @(title: '{i18n>sortStr}');
}

annotate BOMDisplayService.topLevelUOMAlternateValueHelp with {
    uomAlt @(title: '{i18n>uomAlt}');
}

annotate BOMDisplayService.topLevelParentPartValueHelp with {
    topLevelParent @(title: '{i18n>topLevelParent}');
}

annotate BOMDisplayService.topLevelBomWhereUseView with @(
    UI          : {
        SelectionFields: [
            factoryNumber,
            factoryChildPn,
            mpnChildPn,
            generatedHppn
        ],
        LineItem       : [
            {
                Value: generatedHppn,
                Label: 'Pumori PN for Child',
            },
            {
                Value: factoryNumber,
                Label: '{i18n>factoryNumber}',
            },
            {
                Value: factoryChildPn,
                Label: '{i18n>factoryChildPn}',
            },
            {
                Value: mpnChildPn,
                Label: '{i18n>mpnChildPn}',
            },
            {
                Value: hppnChildPn,
                Label: '{i18n>hppnChildPn}'
            },
            {
                Value: zmpaPartno,
                Label: '{i18n>zmpaPartnoToplvl}'
            },
            {
                Value: topLevelQuantity,
                Label: '{i18n>topLevelQuantity}'
            },
            {
                Value: topLevelresultingQuantity,
                Label: '{i18n>topLevelresultingQuantity}'
            },
            {
                Value: marketShare,
                Label: '{i18n>marketShare}'
            },
            {
                Value: sortString,
                Label: '{i18n>sortStr}'
            },
            {
                Value: componentValidFrom,
                Label: '{i18n>validFrom}'
            },
            {
                Value: componentValidTo,
                Label: '{i18n>validTo}'
            }

        ]

    }

) {
    generatedHppn  @(Common: {
        Text     : {
            $value                : generatedHppn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : generatedHppn,
            CollectionPath : 'topLevelgeneratedHppnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: generatedHppn,
                ValueListProperty: 'generatedHppn'
            }]
        }
    });
    factoryNumber  @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'topLevelFacNumValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    factoryChildPn @(Common: {
        Text     : {
            $value                : factoryChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryChildPn,
            CollectionPath : 'topLevelfactoryChildPnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryChildPn,
                ValueListProperty: 'factoryChildPn'
            }]
        }
    });
    mpnChildPn     @(Common: {
        Text     : {
            $value                : mpnChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : mpnChildPn,
            CollectionPath : 'topLevelmpnChildPnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: mpnChildPn,
                ValueListProperty: 'mpnChildPn'
            }]
        }
    });
    zmpaPartno     @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'topLevelfactoryPnforParentValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    hppnChildPn     @(Common: {
        Text     : {
            $value                : hppnChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : hppnChildPn,
            CollectionPath : 'topLevelmaterialNumberforChildValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: hppnChildPn,
                ValueListProperty: 'hppnChildPn'
            }]
        }
    });
    sortString     @(Common: {
        Text     : {
            $value                : sortString,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : sortString,
            CollectionPath : 'topLevelidentifierforAlternateProductValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: sortString,
                ValueListProperty: 'sortString'
            }]
        }
    });
    uomAlt     @(Common: {
        Text     : {
            $value                : uomAlt,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : uomAlt,
            CollectionPath : 'topLevelUOMAlternateValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: uomAlt,
                ValueListProperty: 'uomAlt'
            }]
        }
    });
    topLevelParent     @(Common: {
        Text     : {
            $value                : topLevelParent,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : topLevelParent,
            CollectionPath : 'topLevelParentPartValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: topLevelParent,
                ValueListProperty: 'topLevelParent'
            }]
        }
    });
};

annotate BOMDisplayService.zmpaPartnoValueHelp with {
    zmpaPartno @(title:'{i18n>zmpaPartno}')
} ;


annotate BOMDisplayService.factoryNumberValueHelp with {
    factoryNumber @(title: '{i18n>facCode}');
}

annotate BOMDisplayService.mpnchilpnValueHelp with {
    mpnChildPn @(title: '{i18n>mpnChild}');
}

annotate BOMDisplayService.fpnchildpnValueHelp with {
    factoryChildPn @(title: '{i18n>fpnChild}');
}

annotate BOMDisplayService.pumoripnValueHelp with {
    generatedHppn @(title: '{i18n>genHPPN}');
}

annotate BOMDisplayService.BOMStructureMultiLevelView with {
    zmpaPartno @(title: '{i18n>fpnParent}');
    factoryNumber;
    @UI.HiddenFilter
    lineNo;
    @UI.HiddenFilter
    levelNo;
    factoryChildPn;
    mpnChildPn;
    @UI.HiddenFilter
    description;
    @UI.HiddenFilter
    hppnChildPn;
    generatedHppn;
    @UI.HiddenFilter
    bomVersion;
    @UI.HiddenFilter
    untUsg;
    @UI.HiddenFilter
    uomAlt;
    @UI.HiddenFilter
    materialType;
    @UI.HiddenFilter
    manufName;
    @UI.HiddenFilter
    vendorId;
    @UI.HiddenFilter
    sortString;
    @UI.HiddenFilter
    marketShare;
    @UI.HiddenFilter
    componentValidFrom;
    @UI.HiddenFilter
    componentValidTo;
    @UI.HiddenFilter
    altItemGroup;
    @UI.HiddenFilter
    scrap;
    @UI.HiddenFilter
    alternativeItem;
    @UI.HiddenFilter
    phantomBOM;
    @UI.HiddenFilter
    manufacturingOverhead;
    @UI.HiddenFilter
    costOfComponents;
    @UI.HiddenFilter
    rollUpCost;
    @UI.HiddenFilter
    bomImportDate;
    @UI.HiddenFilter
    parentGeneratedHppn;
    @UI.HiddenFilter
    requiredQuantity;
    @UI.HiddenFilter
    resultingQuantity;
    @UI.HiddenFilter
    parentmaterialtype;
}

annotate BOMDisplayService.BOMStructureMultiLevelView with @(
    UI          : {
        SelectionFields: [
            generatedHppn,
            factoryNumber,
            factoryChildPn,
            mpnChildPn,
            zmpaPartno,
        ],
        LineItem       : [

            {
                Value: parentGeneratedHppn,
                Label: '{i18n>parent}',
            },
            {
                Value: zmpaPartno,
                Label: '{i18n>fpnParent}'
            },
            {
                Value: factoryNumber,
                Label: '{i18n>factry}',
            },
            {
                Value: levelNo,
                Label: '{i18n>lvl}',
            },
            {
                Value: generatedHppn,
                Label: '{i18n>hpParent}',
            },
            {
                Value: requiredQuantity,
                Label: '{i18n>reqQnty}',
            },
            {
                Value: uomAlt,
                Label: '{i18n>Uom}',
            },
            {
                Value: resultingQuantity,
                Label: '{i18n>resQnty}',
            }
        ]
    }  
) {
    zmpaPartno  @(Common: {
        Text     : {
            $value                : zmpaPartno,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : zmpaPartno,
            CollectionPath : 'zmpaPartnoValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: zmpaPartno,
                ValueListProperty: 'zmpaPartno'
            }]
        }
    });
    factoryNumber  @(Common: {
        Text     : {
            $value                : factoryNumber,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryNumber,
            CollectionPath : 'factoryNumberValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryNumber,
                ValueListProperty: 'factoryNumber'
            }]
        }
    });
    factoryChildPn @(Common: {
        Text     : {
            $value                : factoryChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : factoryChildPn,
            CollectionPath : 'fpnchildpnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: factoryChildPn,
                ValueListProperty: 'factoryChildPn'
            }]
        }
    });
    mpnChildPn     @(Common: {
        Text     : {
            $value                : mpnChildPn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : mpnChildPn,
            CollectionPath : 'mpnchilpnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: mpnChildPn,
                ValueListProperty: 'mpnChildPn'
            }]
        }
    });
    generatedHppn  @(Common: {
        Text     : {
            $value                : generatedHppn,
            ![@UI.TextArrangement]: #TextOnly
        },
        ValueList: {
            SearchSupported: true,
            Label          : generatedHppn,
            CollectionPath : 'pumoripnValueHelp',
            Parameters     : [{
                $Type            : 'Common.ValueListParameterInOut',
                LocalDataProperty: generatedHppn,
                ValueListProperty: 'generatedHppn'
            }]
        }
    });
};



srv/jobscheduler/scheduler.js



const passport = require('passport');
const xsenv = require('@sap/xsenv');
const JWTStrategy = require('@sap/xssec').JWTStrategy;
//configure passport
const xsuaaService = xsenv.getServices({ myXsuaa: { tag: 'xsuaa' } });
const xsuaaCredentials = xsuaaService.myXsuaa;
const jwtStrategy = new JWTStrategy(xsuaaCredentials);
passport.use(jwtStrategy);
const express = require('express');
// configure express server with authentication middleware
const app = express();
app.use(passport.initialize());
app.use(passport.authenticate('JWT', { session: false }));
const https = require('https');
// access credentials from environment variable (alternatively use xsenv)
const VCAP_SERVICES = JSON.parse(process.env.VCAP_SERVICES)
const CREDENTIALS = VCAP_SERVICES.jobscheduler[0].credentials
// oauth
const UAA = CREDENTIALS.uaa
const OA_CLIENTID = UAA.clientid;
const OA_SECRET = UAA.clientsecret;
const OA_ENDPOINT = UAA.url;

const { SUCCESS_STATUS_CODE, RESULT_STATUS_CODE, ACCEPT_STATUS_CODE } = require('../config/constants');
const TextBundle = require('@sap/textbundle').TextBundle;
const bundle = new TextBundle('../_i18n/i18n');


/********************Set the status in Jobscheduler***********************/
const doUpdateStatus = function (headers, success, message) {
    return new Promise((resolve, reject) => {
        return fetchJwtToken(OA_CLIENTID, OA_SECRET)
            .then((jwtToken) => {
                const jobId = headers['x-sap-job-id']
                const scheduleId = headers['x-sap-job-schedule-id']
                const runId = headers['x-sap-job-run-id']
                const host = headers['x-sap-scheduler-host']
                const data = JSON.stringify({ success: success, message: JSON.stringify(message) })
                const options = {
                    host: host.replace('https://', ''),
                    path: `/scheduler/jobs/${jobId}/schedules/${scheduleId}/runs/${runId}`,
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Content-Length': data.length,
                        Authorization: 'Bearer ' + jwtToken
                    }
                }
                const req = https.request(options, (res) => {
                    res.setEncoding('utf8')
                    const status = res.statusCode
                    if (status !== SUCCESS_STATUS_CODE && status !== RESULT_STATUS_CODE && status !== ACCEPT_STATUS_CODE) {
                        return reject(new Error(bundle.getText('updateStatusErr')))
                    }
                    res.on('data', () => {
                        console.log(bundle.getText('callJobSuccess'))
                        resolve(message)
                    })
                });
                req.on('error', (error) => {
                    console.log(bundle.getText('errCallJob'))
                    return reject({ error: error })
                });
                req.write(data)
                req.end()
            })
            .catch((error) => {
                console.log(error)
                reject(error)
            })
    })
}
/***********************JWT token required for calling REST API ***********************/
const fetchJwtToken = function (clientId, clientSecret) {
    return new Promise((resolve, reject) => {
        const options = {
            host: OA_ENDPOINT.replace('https://', ''),
            path: '/oauth/token?grant_type=client_credentials&response_type=token',
            headers: {
                Authorization: "Basic " + Buffer.from(clientId + ':' + clientSecret).toString("base64")
            }
        }
        https.get(options, res => {
            res.setEncoding('utf8')
            let response = ''
            res.on('data', chunk => {
                response += chunk
            })
            res.on('end', () => {
                try {
                    const responseAsJson = JSON.parse(response)
                    const jwtToken = responseAsJson.access_token
                    if (!jwtToken) {
                        return reject(new Error(bundle.getText('errFetchToken')))
                    }
                    resolve(jwtToken)
                } catch (error) {
                    return reject(new Error(bundle.getText('errFetchToken')))
                }
            })
        })
            .on("error", (error) => {
                console.log("Error: " + error.message);
                return reject({ error: error })
            });
    })
}


module.exports = {
    doUpdateStatus
}



srv/helper.js


const TextBundle = require('@sap/textbundle').TextBundle;
const bundle = new TextBundle('./_i18n/i18n');
const { doUpdateStatus } = require('./jobscheduler/scheduler');
const { _callHdbProcedure, _getBulkUploadResponse, _getResponse } = require('./validation');
const { ERROR_STATUS_CODE } = require('./config/constants');
const { topLevelBom,singleLevelBom } = require('./whereused');

/************************Handle job for TransferJob *******************************/
const handleAsyncJob = async function (headers, req) {
    try {
        let result = await operationMasterUpload(req)
        if ((typeof result !== 'undefined') && (result !== null)) {
            await doUpdateStatus(headers, true, result)
            return result;
        } else {
            await operationMasterUpload(req)
        }
    } catch (error) {
        doUpdateStatus(headers, false, error.message)
            .then(() => {
                console.log(bundle.getText('successResJob'))
            }).catch((error) => {
                console.log(bundle.getText('errResJob') + error)
            })
    }
}

/***********************Operation for TransferJob *******************************/
const operationMasterUpload = async function (req) {
    try {
        let nDays = req.data.Days;
        let sFactoryNumber = req.data.FactoryNumber;
        let sServiceName = req.data.ServiceName;
        let aFactoryNumber = [];
        let aInputToProcedure = [];
        var dayscount;
        if (sFactoryNumber != null) {
            aFactoryNumber = sFactoryNumber.split(",");
            aFactoryNumber.map(item => {
                let o1 = {};
                o1.FACTORYNUMBER = item;
                aInputToProcedure.push(o1);
            });
        }
        if (nDays === null || nDays === 0 || nDays === undefined || nDays === '')
            dayscount = null;
        else
            dayscount = nDays;

        var output, result, oResponseData;
        if (sServiceName === 'TopLevel') {
            output = await topLevelBom(req)
            //result = output.outputScalar
        }
        else if (sServiceName === 'SingleLevel') {
            output = await singleLevelBom(req);
            //result = output.outputScalar
        }
        // console.log("job success!!");
        // oResponseData = _getResponse(result.INSERTED_ROWS, result.UPDATED_ROWS, result.DELETED_ROWS);
        return output;
    }
    catch (error) {
        req.error({ code: ERROR_STATUS_CODE, message: error.message });
    }
}




module.exports = {
    handleAsyncJob
}




srv/pumoripsbomdisplay-service.js



const cds = require('@sap/cds');
const TextBundle = require('@sap/textbundle').TextBundle;
const bundle = new TextBundle('./_i18n/i18n');
const { BOMStructure, BOMStructureView, BOMHeaderViewLatest, BOMStructureViewLatest, syn_FactoryStatusDashboard } = cds.entities('pumorips.bomdisplay');
const { ERROR_STATUS_CODE, VALIDATION_ERROR_CODE, JOB_NAME, ACCEPT_STATUS_CODE } = require('./config/constants');
const {
    _getBulkUploadResponse,
    _getUploadResponse,
    _convertInputForProcedure,
    _callHdbProcedure,
    _treeStructure,
    isValidHeaders,
    filterItems,
    _compareBOMTree,
    _convertToNestedJson,
    _covertCsvToJSON
} = require('./validation');
const { handleAsyncJob } = require('./helper');
const { singleLevelWhereUsed, topLevelWhereUsed, multiLevelWhereUsed } = require('./whereused');
const LOG = cds.log('display bom service');

module.exports = cds.service.impl(async function () {
    const { DownloadBOM } = cds.connect.to('BOMDisplayService');

    let securityScope = {
        "WithCost": false,
        "WithoutCost": false
    };

     /*********************** Security Check Module************************************/
     this.on("SecurityAction", async (req) => {
        var requestAuthInfo = req.req.authInfo;

        securityScope.WithCost = requestAuthInfo.checkLocalScope('WithCost');
        securityScope.WithoutCost = requestAuthInfo.checkLocalScope('WithoutCost');
        // securityScope.WithCost=true;
        return JSON.stringify(securityScope);
    });

    function _mapErrorKeys(array) {
        let mappedArray = array.map(elem => {
            return {
                "zmpaPartno": elem.ZMPAPARTNO,
                "factoryNumber": elem.FACTORYNUMBER,
                "mpnChildPn": elem.MPNCHILDPN,
                "levelNo": elem.LEVELNO,
                "errorDetails": elem.ERRORDETAILS
            }

        });
        return mappedArray;
    }

    function _mapBOMStructure(array) {
        let mappedArray = array.map(elem => {
            return {
                "zmpaPartno": elem.ZMPAPARTNO,
                "factoryNumber": elem.FACTORYNUMBER,
                "alternativeBom": elem.ALTERNATIVEBOM,
                "lineNo": elem.LINENO,
                "levelNo": elem.LEVELNO,
                "factoryChildPn": elem.FACTORYCHILDPN,
                "mpnChildPn": elem.MPNCHILDPN,
                "description": elem.DESCRIPTION, //mpn descr
                "hppnChildPn": elem.HPPNCHILDPN,
                "untUsg": elem.UNTUSG,
                "uomAlt": elem.UOMALT,
                "generatedHppn": elem.GENERATEDHPPN,
                "bomVersion": elem.BOMVERSION,
                "materialType": elem.MATERIALTYPE,
                "manufName": elem.MANUFNAME,
                "vendorId": elem.VENDORID,
                "sortString": elem.SORTSTRING,
                "marketShare": elem.MARKETSHARE,
                "altItemGroup": elem.ALTITEMGROUP,
                "scrap": elem.SCRAP,
                "componentValidFrom": elem.COMPONENTVALIDFROM,
                "componentValidTo": elem.COMPONENTVALIDTO,
                "alternativeItem": elem.ALTERNATIVEITEM,
                "phantomBOM": elem.PHANTOMBOM,
                "manufacturingOverhead": elem.MANUFACTURINGOVERHEAD,
                "costOfComponents": elem.COSTOFCOMPONENTS,
                "rollUpCost": elem.ROLLUPCOST,
                "bomImportDate": elem.BOMIMPORTDATE
            }
        });
        return mappedArray;
    }


    /*********************** Method to upload BOM data ************************/
    this.on('BOMUpload', async (req) => {
        let interface = "DisplayBOM";
        // Record start time
        let startTime = new Date();
        // Formating the date as YYYY-MM-DD
        const formattedDate = startTime.toISOString().split('T')[0];
        let booResult = true;
        let res, output, result, endTime;
        let aError = [];
        let aHeaderError = [];
        let aStructureError = [];
        let aFactoryError  = [];
        
        //capture payload
        let { FileName, BOMHeaderPayload, BOMStructurePayload } = req.data.PostingData;
        let aFilename = FileName !== undefined && FileName != null && FileName !== ""  ? FileName : 'Factory_BOM_'+BOMHeaderPayload.zmpaPartno+'_'+BOMHeaderPayload.factoryNumber+'_'+formattedDate+'.CSV';
        try {
            let aInputHeader = _convertInputForProcedure(BOMHeaderPayload);
            let aInputStructure = _convertInputForProcedure(BOMStructurePayload);
            output = await _callHdbProcedure("bomdisplay", { "I_BOMHEADER": aInputHeader, "I_BOMSTRUCTURE": aInputStructure });
            res = output.outputScalar;
            if (output.results0.length) {
                aHeaderError = _mapErrorKeys(output.results0);
                aFactoryError = aFactoryError.concat(output.results0);
            }
            if (output.results1.length) {
                aStructureError = _mapErrorKeys(output.results1);
                aFactoryError = aFactoryError.concat(output.results1);
            }
            aError = aHeaderError.concat(aStructureError);
            booResult = true;
            // Record end time
            endTime = new Date();
            if (aError.length != 0) {
                await _callHdbProcedure("FactoryStatusResponse", { "I_PAYLOAD": aFactoryError, "FACTORYID": BOMHeaderPayload.factoryNumber, "INTERFACE": interface, "FILENAME": aFilename, "UPLOADEDTIME": formattedDate});
            }
            result = await masterUpload(req, BOMStructurePayload, aFilename, startTime, endTime, booResult, res, aFactoryError, interface);
            let oResponseData = _getBulkUploadResponse(aError, BOMStructurePayload.length, res.INSERTED_ROWS, null, null, res.DELETED_ROWS);
            const timeTaken = new Date() - startTime;
            LOG.info('time taken >>', timeTaken);
            return oResponseData;

        } catch (error) {
            booResult = false;
            // Record end time
            endTime = new Date();
            const timeTaken = endTime - startTime;
            LOG.info('time taken >>', timeTaken);
            result = await masterUpload(req, BOMStructurePayload, aFilename, startTime, endTime, booResult, res, aFactoryError, interface);
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }

    });

    const masterUpload = async function (req, BOMStructurePayload, aFilename, startTime, endTime, booResult, res, aFactoryError, interface) {
        try {
            const tx = cds.transaction(req);
            let existingData = await tx.run(SELECT.from(syn_FactoryStatusDashboard).where({ fileName: aFilename })).catch((error) => {
                req.error({ "type": "Error", "message": error.message });
            });
            // Calculate processing time
            let processTime = (endTime - startTime) + "ms";
            // result success or fail
            let booleanResult = (booResult == true) ? "Success" : "Failed";
            let processResult = (booResult == true) ? "Completed" : "Error";

            const today = new Date();
            // Formating the date as YYYY-MM-DD
            const formattedDate = today.toISOString().split('T')[0];

            let insertData = {
                factoryId: BOMStructurePayload[0].factoryNumber,
                interface: interface,
                fileName: aFilename,
                date: formattedDate,
                processTime: processTime,
                status: booleanResult,
                records: BOMStructurePayload.length,
                successfulRecords: (res.INSERTED_ROWS != undefined ? res.INSERTED_ROWS : 0) + (res.UPDATED_ROWS != undefined ? res.UPDATED_ROWS : 0),
                errorRecords: aFactoryError ? aFactoryError.length : 0,
                prococessing: processResult,
                uploadedtime: startTime
            };
            if (existingData && existingData.length > 0 && existingData != undefined) {
                let existingProcessTime = parseInt(existingData[0].processTime.split('ms')[0]);
                let updateProcessTime = parseInt(processTime.split('ms')[0]);
                updateProcessTime = existingProcessTime + updateProcessTime;
                let updateData = {
                    date: formattedDate,
                    processTime: updateProcessTime + "ms",
                    status: existingData[0].status == "Success" ? booleanResult : "Failed",
                    records: existingData[0].records + BOMStructurePayload.length,
                    successfulRecords: existingData[0].successfulRecords + (res.INSERTED_ROWS != undefined ? res.INSERTED_ROWS : 0) + (res.UPDATED_ROWS != undefined ? res.UPDATED_ROWS : 0),
                    errorRecords: existingData[0].errorRecords + aFactoryError.length
                };
                await tx.run(UPDATE.entity(syn_FactoryStatusDashboard).data(updateData).where({ fileName: aFilename, })).catch((error) => {
                    req.error({ "type": "Error", "message": error.message });
                });

            } else {
                await tx.run(INSERT.into(syn_FactoryStatusDashboard).entries(insertData)).catch((error) => {                    
                 req.error({ "type": "Error", "message": error.message });
                });
            }
        }
        catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    }


    /*********************** Method to download BOM ***********************/
    this.on('READ', 'DownloadBOM', async (req) => {
        const tx = cds.transaction(req);
        //capture the payload
        const payloadFilterString = req._query.$filter;
        const apayload = payloadFilterString.split('and');
        let zmpaPartno = apayload[0].split(`'`)[1];
        let factoryNumber = apayload[1].split(`'`)[1];
        let bomVersion = apayload[2].split(`'`)[1];
        try {
            //get the data of BOM in sequence 
            const structData = await tx.run(SELECT.from(BOMStructureView).where({ zmpaPartno: zmpaPartno, factoryNumber: factoryNumber, bomVersion:parseInt(bomVersion)}).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            if (!structData.length) {
                return req.error({ code: VALIDATION_ERROR_CODE, message: bundle.getText('MissingBOMStructureData') });
            }
            //const finalResult = treeStructure(structData);
            return structData;
        } catch (err) {
            console.log(err);
            return req.error({ code: ERROR_STATUS_CODE, message: err.message });
        }
    });

    /*********************** Method to view BOM as tree struture ***********************/
    this.on('BOMTreeStructure', async (req) => {
        const tx = cds.transaction(req);
        //capture the payload
        const { zmpaPartno, factoryNumber, bomVersion } = req.data;
        try {
            //get the data of BOM in sequence 
            const structData = await tx.run(SELECT.from(BOMStructureView).where({ zmpaPartno, factoryNumber, bomVersion:parseInt(bomVersion) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            if (!structData.length) {
                return req.error({ code: VALIDATION_ERROR_CODE, message: bundle.getText('MissingBOMStructureData') });
            }
            const finalResult = _treeStructure(structData);
            let numOfLevelsExpand = [];

            let convertedNestedJson = _convertToNestedJson(finalResult);
            const response = {
                "BOMTreeData": convertedNestedJson,
                "numOfLevelsExpand": numOfLevelsExpand[0] || 0
            }
            return JSON.stringify(response);
        } catch (err) {
            console.log(err);
            return req.error({ code: ERROR_STATUS_CODE, message: err.message });
        }
    });

    /***********************BOM Mass Upload Service ************************/
    this.on('BOMMassUpload', async (req) => {
        let res, aError, aErrorPayload;
        let aHeaderError = [];
        let aStructureError = [];
        const templateName = 'BOM';
        const { payload, userEmail } = req.data;
        const startTime = new Date();
        const { BOMHeaderPayload, BOMStructurePayload } = _covertCsvToJSON(req, payload);

        try {
            let aInputHeader = _convertInputForProcedure(BOMHeaderPayload);
            let aInputStructure = _convertInputForProcedure(BOMStructurePayload);
            const output = await _callHdbProcedure("bomdisplay", { "I_BOMHEADER": aInputHeader, "I_BOMSTRUCTURE": aInputStructure });
            res = output.outputScalar;
            if (output.results0.length) {
                aHeaderError = _mapErrorKeys(output.results0);
            }
            if (output.results1.length) {
                aStructureError = _mapErrorKeys(output.results1);
            }
            aError = aHeaderError.concat(aStructureError);
            let errorLength = aError.length;
            aErrorPayload = _convertInputForProcedure(aError);
            await _callHdbProcedure("massupload", { "APPNAME": templateName, "I_PAYLOAD": aErrorPayload, "INSERTED_ROWS": res.INSERTED_ROWS || 0, "UPDATED_ROWS": 0, "ERROR_ROWS": errorLength, "USEREMAIL": userEmail, "STRUC_RECORDS": res.STRUC_RECORDS });
            let oResponseData = _getUploadResponse(aError, BOMStructurePayload.length, res.INSERTED_ROWS);
            const endTime = new Date() - startTime;
            LOG.info('time taken >>', `${endTime}ms`);
            return oResponseData;
        } catch (error) {
            const endTime = new Date() - startTime;
            LOG.info('time taken >>', `${endTime}ms`);
            return req.reject(500, bundle.getText("UploadError"+ error.message));
        }
    });

    /*********************** Method to get Similar items between two BOMs ***********************/
    this.on('BOMSimilarItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;
            const isValidHeader = await isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
                let ResultArray = filterItems(BOM1, BOM2, SIMILAR);
                return ResultArray;
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get differnece in items between two BOMs ***********************/
    this.on('BOMDifferItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;
            const isValidHeader = await isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
                let ResultArray = filterItems(BOM1, BOM2, DIFFERENCE);
                return ResultArray;
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get Unique items between two BOMs ***********************/
    this.on('BOMUniqueItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;
            const isValidHeader = await isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
                let BOM1Result = filterItems(BOM1, BOM2, UNIQUE);
                let BOM2Result = filterItems(BOM2, BOM1, UNIQUE);
                return {
                    BOM1: BOM1Result,
                    BOM2: BOM2Result
                };
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    /*********************** Method to get count of all similar,unique,difference items between two BOMs ***********************/
    this.on('BOMCountItems', async (req) => {
        try {
            const tx = cds.transaction(req);
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;
            const isValidHeader = await isValidHeaders(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
            if (isValidHeader) {
                const { BOM1, BOM2 } = await getBOMVersionData(tx, zmpaPartno, factoryNumber, bom1Version, bom2Version);
                const BOMDiff = filterItems(BOM1, BOM2, DIFFERENCE);
                const BOM1Unique = filterItems(BOM1, BOM2, UNIQUE);
                const BOM2Unique = filterItems(BOM2, BOM1, UNIQUE);
                const BOMSimilar = filterItems(BOM1, BOM2, SIMILAR);
                return {
                    commonComponents: {
                        total: BOMSimilar.length + BOMDiff.length,
                        similar: BOMSimilar.length,
                        difference: BOMDiff.length
                    },
                    uniqueComponents: {
                        total: BOM1Unique.length + BOM2Unique.length,
                        BOM1: BOM1Unique.length,
                        BOM2: BOM2Unique.length
                    }
                };
            } else {
                throw Error(bundle.getText('InvalidHeader'));
            }
        } catch (error) {
            req.error({ code: ERROR_STATUS_CODE, message: error.message });
        }
    });

    // compare app tree structure
    this.on('compareTree', async (req) => {
        const tx = cds.transaction(req);
        try {
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;

            let BOM1Data = await tx.run(SELECT.from(BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: parseInt(bom1Version) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            let BOM2Data = await tx.run(SELECT.from(BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: parseInt(bom2Version) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));

            const { BOM1DataTree, BOM2DataTree } = _compareBOMTree(BOM1Data, BOM2Data, req);

            return JSON.stringify({
                BOM1TreeData: _convertToNestedJson(BOM1DataTree, req),
                BOM2TreeData: _convertToNestedJson(BOM2DataTree, req)
            });
        } catch (error) {
            return req.error({ code: 400, message: error.message });
        }

    });

    // Download compare app tree structure
    this.on('downloadCompareTree', async (req) => {
        const tx = cds.transaction(req);
        try {
            const { zmpaPartno, factoryNumber, bom1Version, bom2Version } = req.data;

            let BOM1Data = await tx.run(SELECT.from(BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: parseInt(bom1Version) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));
            let BOM2Data = await tx.run(SELECT.from(BOMStructure).where({ zmpaPartno, factoryNumber, bomVersion: parseInt(bom2Version) }).orderBy('lineNoSequence')).catch((error) => req.error({ code: 400, message: error.message }));

            const { BOM1DataTree, BOM2DataTree } = _compareBOMTree(BOM1Data, BOM2Data, req);

            let maxRecordsLength = BOM1DataTree.length > BOM2DataTree.length ? BOM1DataTree.length : BOM2DataTree.length;
            let concatCompareBOMs = [];
            for (let record = 0; record < maxRecordsLength; record++) {
                concatCompareBOMs.push({
                    BOM1levelNo: BOM1DataTree.length > record ? BOM1DataTree[record].levelNo : null,
                    BOM1generatedHppn: BOM1DataTree.length > record ? BOM1DataTree[record].generatedHppn : null,
                    BOM1Unique: BOM1DataTree.length > record ? BOM1DataTree[record].isUnique : null,
                    BOM1Different: BOM1DataTree.length > record ? BOM1DataTree[record].isDifferent : null,
                    BOM1marketShare: BOM1DataTree.length > record ? BOM1DataTree[record].marketShare : null,
                    BOM1materialType: BOM1DataTree.length > record ? BOM1DataTree[record].materialType : null,
                    BOM1untUsg: BOM1DataTree.length > record ? BOM1DataTree[record].untUsg : null,
                    BOM1componentValidFrom: BOM1DataTree.length > record ? BOM1DataTree[record].componentValidFrom : null,
                    BOM1componentValidTo: BOM1DataTree.length > record ? BOM1DataTree[record].componentValidTo : null,
                    BOM2levelNo: BOM2DataTree.length > record ? BOM2DataTree[record].levelNo : null,
                    BOM2generatedHppn: BOM2DataTree.length > record ? BOM2DataTree[record].generatedHppn : null,
                    BOM2Unique: BOM2DataTree.length > record ? BOM2DataTree[record].isUnique : null,
                    BOM2Different: BOM2DataTree.length > record ? BOM2DataTree[record].isDifferent : null,
                    BOM2marketShare: BOM2DataTree.length > record ? BOM2DataTree[record].marketShare : null,
                    BOM2materialType: BOM2DataTree.length > record ? BOM2DataTree[record].materialType : null,
                    BOM2untUsg: BOM2DataTree.length > record ? BOM2DataTree[record].untUsg : null,
                    BOM2componentValidFrom: BOM2DataTree.length > record ? BOM2DataTree[record].componentValidFrom : null,
                    BOM2componentValidTo: BOM2DataTree.length > record ? BOM2DataTree[record].componentValidTo : null
                });
            }
            return concatCompareBOMs;
        } catch (error) {
            return req.error({ code: 400, message: error.message });
        }

    });

    this.on('BOMflushAndFill', async (req) => {
        try {
            let msgLog = [];
            let res;
            let oData = req.data;
            let output = {};
            let aPayload = oData.PostingData;
            let sOperation = oData.Operation;
            let userEmail = oData.userEmail;
            let aInputToProcedure = _convertInputForProcedure(aPayload);
            if (sOperation == "Flush") {
                output = await _callHdbProcedure("bomFlush", { "INPUT": aInputToProcedure });
            }
            if (sOperation == "Fill") {
                output = await _callHdbProcedure("bomFill", { "INPUT": aInputToProcedure, "USEREMAIL": userEmail });
            }

            msgLog.push({ "type": "Success", "message": bundle.getText("UpdateSuccess") });
            return JSON.stringify(msgLog);
        }
        catch (error) {
            return req.error(error);
        }
    });

    /*********************** multiLevel WhereUse function ***********************/
    this.on('multiLevelBom', async (req) => {
        try {
            const headerObj = {};
            const reqPayload = req.data.payload;
            const { factoryNumber, top, skip } = reqPayload;
            if (factoryNumber) {
                headerObj.factoryNumber = factoryNumber;
            }
            const bomHeaderList = await SELECT.from(BOMHeaderViewLatest).where(headerObj).limit(top, skip);
            let multiLevelArray = [];
            let records = [];
            for (let bomheaderitem of bomHeaderList) {
                const itemObj = {};
                itemObj.zmpaPartno = bomheaderitem.zmpaPartno;
                itemObj.factoryNumber = bomheaderitem.factoryNumber;
                itemObj.bomVersion = bomheaderitem.bomVersion;
                let bomstructure = await SELECT.from(BOMStructureViewLatest).where(itemObj).orderBy('lineNoSequence');
                if (bomstructure.length) {
                    multiLevelWhereUsed(bomstructure, reqPayload,multiLevelArray);
                    records.push(...multiLevelArray);
                    multiLevelArray = [];
                }
            }
            // const records = multiLevelWhereUsed(multiLevelArray, reqPayload);
            return {
                records,
                total: records.length
            }
        } catch (error) {
            req.reject({
                status: 500,
                message: error.message
            })
        }
    });

    /*********************** Background job schedular for WhereUse Calculation for Latest BOMs  ***********************/
    this.on('WhereUseJob', async (req) => {
        try {
            req.notify(ACCEPT_STATUS_CODE, bundle.getText('longRunAccept'));
            // afterwards the actual processing
            var finalResult = await handleAsyncJob(req.headers, req);
            return finalResult;
        }
        catch (error) {
            return req.error(error);
        }
    });


     /*********************** Background function call for hp bom update ***********************/
     this.on('HpBomUpdate', async (req) => {
        try {
            let msgLog = [];
            let res;
            let oData = req.data;
            let output = {};
            output = await _callHdbProcedure("hpbom", {});
            res = output.outputScalar;
            let headerCount = res.INSERTED_ROWS_H;
            msgLog.push({ "type": "Success", "message": bundle.getText(`HP Boms Created: ${headerCount}`) });
            return JSON.stringify(msgLog);
        }
        catch (error) {
            return req.error(error);
        }
    });

});



mta.yaml



_schema-version: "3.1"
ID: pumorips_bomdisp
description: A simple CAP project.
version: 1.0.0
modules:
- name: pumorips_bomdisp-srv
  type: nodejs
  path: gen/srv
  requires:
  - name: PUMORIPS_BOMDISP
  - name: uaa_pumorips_bomdisp
  - name: pumori_job-scheduling-service
  - name: pumori_app_logging-service
  provides:
  - name: srv-api
    properties:
      srv-url: ${default-url}
  parameters:
    buildpack: nodejs_buildpack
    readiness-health-check-http-endpoint: /health
    readiness-health-check-type: http
  build-parameters:
    builder: npm
    ignore: ["node_modules/"]
- name: pumorips_bomdisp-db-deployer
  type: hdb
  path: gen/db
  requires:
  - name: PUMORIPS_BOMDISP
    properties:
      TARGET_CONTAINER: PUMORIPS_BOMDISP
  - name: facprod-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-facprod-grantor
      service: ~{facprod-grantor-service}
  - name: pumoripsproduct-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-pumoripsproduct-grantor
      service: ~{pumoripsproduct-grantor-service}
  - name: pumoripsconfig-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-pumoripsconfig-grantor
      service: ~{pumoripsconfig-grantor-service}
  - name: hpbom-grantor
    group: SERVICE_REPLACEMENTS
    properties:
      key: logical-hpbom-grantor
      service: ~{hpbom-grantor-service}
  parameters:
    buildpack: nodejs_buildpack
- name: pumorips_bomdisp-destination-content
  type: com.sap.application.content
  requires:
  - name: pumorips_bomdisp-destination-service
    parameters:
      content-target: true
  - name: pumorips_bomdisp_html_repo_host
    parameters:
      service-key:
        name: pumorips_bomdisp_html_repo_host-key
  - name: uaa_pumorips_bomdisp
    parameters:
      service-key:
        name: uaa_pumorips_bomdisp-key
  parameters:
    content:
      instance:
        destinations:
        - Name: PSBOMDISP_pumorips_bomdisp_html_repo_host
          ServiceInstanceName: pumorips_bomdisp-html5-app-host-service
          ServiceKeyName: pumorips_bomdisp_html_repo_host-key
          sap.cloud.service: PSBOMDISP
        - Authentication: OAuth2UserTokenExchange
          Name: PSBOMDISP_uaa_pumorips_bomdisp
          ServiceInstanceName: pumorips_bomdisp-xsuaa-service
          ServiceKeyName: uaa_pumorips_bomdisp-key
          sap.cloud.service: PSBOMDISP
        existing_destinations_policy: update
  build-parameters:
    no-source: true
- name: pumorips_bomdisp-app-content
  type: com.sap.application.content
  path: app
  requires:
  - name: pumorips_bomdisp_html_repo_host
    parameters:
      content-target: true
  build-parameters:
    build-result: resources
    requires:
    - artifacts:
      - pumoripsbomdisplaypsbomdispui.zip
      name: pumoripsbomdisplaypsbomdispui
      target-path: resources/
    - artifacts:
      - pumoripsbomdisplaypsbomwhereusedui.zip
      name: pumoripsbomdisplaypsbomwhereusedui
      target-path: resources/
    - artifacts:
      - pumoripsbomdisplaypsbomflushandfillui.zip
      name: pumoripsbomdisplaypsbomflushandfillui
      target-path: resources/
    - artifacts:
      - pumoripsbomdisplaypsmassuploadui.zip
      name: pumoripsbomdisplaypsmassuploadui
      target-path: resources/
- name: pumoripsbomdisplaypsbomdispui
  type: html5
  path: app/psbomdispui
  requires:
  - name: uaa_pumorips_bomdisp
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
- name: pumoripsbomdisplaypsbomwhereusedui
  type: html5
  path: app/psbomwhereusedui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
- name: pumoripsbomdisplaypsbomflushandfillui
  type: html5
  path: app/psbomflushandfillui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
- name: pumoripsbomdisplaypsmassuploadui
  type: html5
  path: app/psmassuploadui
  build-parameters:
    build-result: dist
    builder: custom
    commands:
    - npm install
    - npm run build:cf
    supported-platforms: []
resources:
- name: PUMORIPS_BOMDISP
  type: com.sap.xs.hdi-container
  parameters:
    config:
      schema: PUMORIPS_BOMDISP
    service: hana
    service-plan: hdi-shared
- name: facprod-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_FACPROD
  properties:
    facprod-grantor-service: ${service-name}
- name: pumoripsproduct-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_PRODUCT
  properties:
    pumoripsproduct-grantor-service: ${service-name}
- name: pumoripsconfig-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_CONFIG
  properties:
    pumoripsconfig-grantor-service: ${service-name}
- name: pumorips_bomdisp-destination-service
  type: org.cloudfoundry.managed-service
  parameters:
    config:
      HTML5Runtime_enabled: true
      init_data:
        instance:
          destinations:
          - Authentication: NoAuthentication
            HTML5.DynamicDestination: true
            HTML5.ForwardAuthToken: true
            Name: pumorips_bomdisp-srv-api
            ProxyType: Internet
            Type: HTTP
            URL: ~{srv-api/srv-url}
          - Authentication: NoAuthentication
            Name: ui5
            ProxyType: Internet
            Type: HTTP
            URL: https://ui5.sap.com
          existing_destinations_policy: update
      version: 1.0.0
    service: destination
    service-name: pumorips_bomdisp-destination-service
    service-plan: lite
  requires:
  - name: srv-api
- name: pumorips_bomdisp_html_repo_host
  type: org.cloudfoundry.managed-service
  parameters:
    service: html5-apps-repo
    service-name: pumorips_bomdisp-html5-app-host-service
    service-plan: app-host
- name: uaa_pumorips_bomdisp
  type: org.cloudfoundry.managed-service
  parameters:
    path: ./xs-security.json
    service: xsuaa
    service-name: pumorips_bomdisp-xsuaa-service
    service-plan: application
- name: pumori_job-scheduling-service
  type: org.cloudfoundry.existing-service
  parameters:
    config:
      enable-xsuaa-support: true
    service: jobscheduler
    service-name: pumori_job-scheduling-service
    service-plan: standard
- name: pumori_app_logging-service
  type: org.cloudfoundry.existing-service
  parameters:
    service: application-logs
    service-name: pumori_app_logging-service
- name: pumoripshploc-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_HPLOC
  properties:
    pumoripshploc-grantor-service: ${service-name}
- name: hpbom-grantor
  type: org.cloudfoundry.existing-service
  parameters:
    service-name: PUMORIPS_HPBOM
  properties:
    hpbom-grantor-service: ${service-name}
parameters:
  deploy_mode: html5-repo
  enable-parallel-deployments: true
build-parameters:
  before-all:
  - builder: custom
    commands:
    - npm ci
    - npx cds build --production



    package.json


    {
  "name": "pumorips_bomdisp",
  "version": "1.0.0",
  "description": "A simple CAP project.",
  "repository": "<Add your repository here>",
  "license": "UNLICENSED",
  "private": true,
  "dependencies": {
    "@sap/cds": "^6.8.4",
    "@sap/cds-hana": "^2",
    "@sap/cds-odata-v2-adapter-proxy": "^1.9.7",
    "@sap/hana-client": "^2.19.21",
    "@sap/hdbext": "^7.6.5",
    "@sap/hdi-deploy": "^4.9.2",
    "@sap/jobs-client": "^1.8.3",
    "@sap/textbundle": "^4.3.0",
    "@sap/xsenv": "^4.2.0",
    "@sap/xssec": "3.6.1",
    "axios": "^1.7.2",
    "express": "^4",
    "hdb": "^0.19.9",
    "passport": "^0",
    "sap-hdbext-promisfied": "^2.202208.1"
  },
  "devDependencies": {
    "@sap/cds-dk": "^7",
    "@sap/ux-specification": "^1.120.10",
    "rimraf": "^3.0.2"
  },
  "scripts": {
    "start": "cds-serve",
    "watch-psbomdispui": "cds watch --open psbomdispui/webapp/index.html?sap-ui-xx-viewCache=false",
    "undeploy": "cf undeploy pumorips_bomdisp --delete-services --delete-service-keys --delete-service-brokers",
    "build": "rimraf resources mta_archives && mbt build --mtar archive",
    "deploy": "cf deploy mta_archives/archive.mtar --retries 1",
    "watch-psmassuploadui": "cds watch --open psmassuploadui/webapp/index.html?sap-ui-xx-viewCache=false",
    "watch-psbomwhereusedui": "cds watch --open psbomwhereusedui/webapp/index.html?sap-ui-xx-viewCache=false",
    "watch-psbomflushandfillui": "cds watch --open psbomflushandfillui/webapp/index.html?sap-ui-xx-viewCache=false"
  },
  "cds": {
    "requires": {
      "db": {
        "kind": "hana"
      },
      "uaa": {
        "kind": "xsuaa"
      },
      "jobScheduler": {
        "kind": "app-service"
      }
    },
    "auth": {
      "passport": {
        "strategy": "JWT"
      }
    },
    "hana": {
      "deploy-format": "hdbtable"
    }
  },
  "sapux": [
    "app/psbomflushandfillui"
  ]
}

srv/pumoripsbomdisplay-service.cds



using {pumorips.bomdisplay as BOMDisplay} from '../db/pumoripsbomdisplay-model';

service BOMDisplayService @(requires: 'authenticated-user') {
    entity BOMHeader                          as projection on BOMDisplay.BOMHeader;
    entity BOMStructure                       as projection on BOMDisplay.BOMStructure;
    entity pumoriPnValueHelpDisplayBom        as projection on BOMDisplay.pumoriPnValueHelpDisplayBom;
    entity materialNumberValueHelp            as projection on BOMDisplay.materialNumberValueHelp;
    entity factoryCodeValueHelp               as projection on BOMDisplay.factoryCodeValueHelp;
    entity hppnValueHelp                      as projection on BOMDisplay.hppnValueHelp;
    entity businessTypeValueHelp              as projection on BOMDisplay.businessTypeValueHelp;
    entity BOMHeaderView @(restrict: [{
        grant: ['*'],
        to   : [
            'WithCost',
            'WithoutCost'
        ]
    }])                                       as projection on BOMDisplay.BOMHeaderView;
    entity bomValidFromBomHeaderValueHelp     as projection on BOMDisplay.bomValidFromBomHeaderValueHelp;
    entity bomValidToBomHeaderValueHelp       as projection on BOMDisplay.bomValidToBomHeaderValueHelp;
    entity BOMHeaderViewLatest                as projection on BOMDisplay.BOMHeaderViewLatest;
    entity ViewLatest                         as projection on BOMDisplay.BOMHeaderViewLatest;
    entity BOMHeaderHistory                   as projection on BOMDisplay.BOMHeaderHistory;
    entity BOMHeaderHistoryView               as projection on BOMDisplay.BOMHeaderHistoryView;
    entity BOMWhereUsed                       as projection on BOMDisplay.BOMWhereUsed;
    entity BOMWhereUsedView                   as projection on BOMDisplay.BOMWhereUsedView;
    entity bomVersionValueHelp                as projection on BOMDisplay.bomVersionValueHelp;
    entity FactoryCodeWhereUsedValueHelp      as projection on BOMDisplay.FactoryCodeWhereUsedValueHelp;
    entity FPNWhereUsedValueHelp              as projection on BOMDisplay.FPNWhereUsedValueHelp;
    entity MPNWhereUsedValueHelp              as projection on BOMDisplay.MPNWhereUsedValueHelp;
    entity PumoriPNWhereUsedValueHelp         as projection on BOMDisplay.PumoriPNWhereUsedValueHelp;
    entity UploadHistoryView                  as projection on BOMDisplay.UploadHistoryView;
    entity UploadResponseView                 as projection on BOMDisplay.UploadResponseView;
    entity BOMUploadCombinedView              as projection on BOMDisplay.BOMUploadCombinedView;
    entity BOMHeaderFlushView                 as projection on BOMDisplay.BOMHeaderFlushView;
    entity factoryCodeFillValueHelp           as projection on BOMDisplay.factoryCodeFillValueHelp;
    entity materialNumberFillValueHelp        as projection on BOMDisplay.materialNumberFillValueHelp;
    entity alternativeBomFillValueHelp        as projection on BOMDisplay.alternativeBomFillValueHelp;
    entity prodDescFillValueHelp              as projection on BOMDisplay.prodDescFillValueHelp;
    entity zhpPartnoFillValueHelp             as projection on BOMDisplay.zhpPartnoFillValueHelp;
    entity baseunitofMeasureFillValueHelp     as projection on BOMDisplay.baseunitofMeasureFillValueHelp;
    entity planningDivFillValueHelp           as projection on BOMDisplay.planningDivFillValueHelp;
    entity factoryCodeFlushValueHelp          as projection on BOMDisplay.factoryCodeFlushValueHelp;
    entity materialNumberFlushValueHelp       as projection on BOMDisplay.materialNumberFlushValueHelp;
    entity alternativeBomFlushValueHelp       as projection on BOMDisplay.alternativeBomFlushValueHelp;
    entity prodDescFlushValueHelp             as projection on BOMDisplay.prodDescFlushValueHelp;
    entity zhpPartnoFlushValueHelp            as projection on BOMDisplay.zhpPartnoFlushValueHelp;
    entity planningDivFlushValueHelp          as projection on BOMDisplay.planningDivFlushValueHelp;
    entity alternativeBomValueHelp            as projection on BOMDisplay.alternativeBomValueHelp;
    entity prodDescValueHelp                  as projection on BOMDisplay.prodDescValueHelp;
    entity zhpPartnoValueHelp                 as projection on BOMDisplay.zhpPartnoValueHelp;
    entity baseunitofMeasureValueHelp         as projection on BOMDisplay.baseunitofMeasureValueHelp;
    entity planningDivValueHelp               as projection on BOMDisplay.planningDivValueHelp;
    entity BOMStructureMultiLevelView         as projection on BOMDisplay.BOMStructureMultiLevelView;
    entity zmpaPartnoValueHelp                as projection on BOMDisplay.zmpaPartnoValueHelp;
    entity factoryNumberValueHelp             as projection on BOMDisplay.factoryNumberValueHelp;
    entity mpnchilpnValueHelp                 as projection on BOMDisplay.mpnchilpnValueHelp;
    entity fpnchildpnValueHelp                as projection on BOMDisplay.fpnchildpnValueHelp;
    entity pumoripnValueHelp                  as projection on BOMDisplay.pumoripnValueHelp;
    entity SingleLevelFacNumValueHelp         as projection on BOMDisplay.SingleLevelFacNumValueHelp;
    entity SingleLevelfactoryChildPnValueHelp as projection on BOMDisplay.SingleLevelfactoryChildPnValueHelp;
    entity SingleLevelmpnChildPnValueHelp     as projection on BOMDisplay.SingleLevelmpnChildPnValueHelp;
    entity SingleLevelgeneratedHppnValueHelp  as projection on BOMDisplay.SingleLevelgeneratedHppnValueHelp;
    entity topLevelFacNumValueHelp            as projection on BOMDisplay.topLevelFacNumValueHelp;
    entity topLevelfactoryChildPnValueHelp    as projection on BOMDisplay.topLevelfactoryChildPnValueHelp;
    entity topLevelmpnChildPnValueHelp        as projection on BOMDisplay.topLevelmpnChildPnValueHelp;
    entity topLevelgeneratedHppnValueHelp     as projection on BOMDisplay.topLevelgeneratedHppnValueHelp;
    entity SingleLevelBomWhereUseView         as projection on BOMDisplay.SingleLevelBomWhereUseView;
    entity topLevelBomWhereUseView            as projection on BOMDisplay.topLevelBomWhereUseView;
    entity SingleLevelfactoryPnforParentValueHelp             as projection on BOMDisplay.SingleLevelfactoryPnforParentValueHelp;
    entity SingleLevelmaterialNumberforChildValueHelp         as projection on BOMDisplay.SingleLevelmaterialNumberforChildValueHelp;
    entity SingleLevelidentifierforAlternateProductValueHelp  as projection on BOMDisplay.SingleLevelidentifierforAlternateProductValueHelp;
    entity SingleLevelUOMAlternateValueHelp                   as projection on BOMDisplay.SingleLevelUOMAlternateValueHelp;
    entity SingleLevelParentPartValueHelp                     as projection on BOMDisplay.SingleLevelParentPartValueHelp;
    entity topLevelfactoryPnforParentValueHelp                as projection on BOMDisplay.topLevelfactoryPnforParentValueHelp;
    entity topLevelmaterialNumberforChildValueHelp            as projection on BOMDisplay.topLevelmaterialNumberforChildValueHelp;
    entity topLevelidentifierforAlternateProductValueHelp     as projection on BOMDisplay.topLevelidentifierforAlternateProductValueHelp;
    entity topLevelUOMAlternateValueHelp                      as projection on BOMDisplay.topLevelUOMAlternateValueHelp;
    entity topLevelParentPartValueHelp                        as projection on BOMDisplay.topLevelParentPartValueHelp;


    type BOMInput                : {
        FileName            : String;
        BOMHeaderPayload    : HeaderPayload;
        BOMStructurePayload : array of StructurePayload;
    }

    type HeaderPayload           : {
        zmpaPartno        : String(40);
        prodDesc          : String(100);
        zhpPartno         : String(40);
        alternativeBom    : String(2);
        baseQuantity      : String;
        factoryNumber     : String(20);
        baseunitofMeasure : String(3);
        bomValidFrom      : String;
        bomValidTo        : String;
        bomVersion        : String;
        planningDiv       : String(10);
        yield             : String;
        bomImportDate     : String;
        markedForDeletion : String(1);
    }

    type StructurePayload        : {
        zmpaPartno            : String(40);
        factoryNumber         : String(20);
        lineNo                : String;
        levelNo               : String;
        factoryChildPn        : String(40);
        alternativeBom        : String(2);
        mpnChildPn            : String(40);
        description           : String(80);
        hppnChildPn           : String(40);
        untUsg                : String;
        uomAlt                : String(3);
        // generatedHppn         : String(40);
        bomVersion            : String;
        materialType          : String(4);
        manufName             : String(100);
        VendorId              : String(40);
        sortString            : String(20);
        marketShare           : String;
        altItemGroup          : String(2);
        scrap                 : String;
        componentValidFrom    : String;
        componentValidTo      : String;
        alternativeItem       : String(1);
        phantomBOM            : String(1);
        manufacturingOverhead : String;
        costOfComponents      : String;
        rollUpCost            : String;
        bomImportDate         : String;
    }

    type Success                 : {
        totalRecords : String;
        created      : String;
        updated      : String;
        deleted      : String;
        duplicate    : String;
    }

    //error response type for bulkupload
    type Error                   : {
        errorFields : String;
    }

    //response type for bulkupload
    type ResponseType            : {
        success : String;
        error   : Error;

    }

    // @cds.persistence.skip
    entity DownloadBOM {
            NodeID                : String;
            HierarchyLevel        : String;
            ParentNodeID          : String;
            DrillState            : String;
            strategicFlag         : String;
            constraintFlag        : String;
            decisionFlag          : String;
            strategicAutoFlag     : String;
            constraintAutoFlag    : String;
        key zmpaPartno            : String;
        key factoryNumber         : String;
        key lineNo                : String;
            levelNo               : String;
            factoryChildPn        : String;
            mpnChildPn            : String;
            description           : String;
            hppnChildPn           : String;
            untUsg                : String;
            uomAlt                : String;
            generatedHppn         : String;
            bomVersion            : String;
            materialType          : String;
            manufName             : String;
            VendorId              : String;
            sortString            : String;
            marketShare           : String;
            altItemGroup          : String;
            scrap                 : String;
        key componentValidFrom    : String;
        key componentValidTo      : String;
            alternativeItem       : String;
            phantomBOM            : String;
            manufacturingOverhead : String;
            costOfComponents      : String;
            rollUpCost            : String;
            bomImportDate         : String;
    }


    type UniqueResponse          : {
        BOM1 : array of StructurePayload;
        BOM2 : array of StructurePayload;
    }

    type differenceResponse      : {
        BOM1zmpaPartno         : String;
        BOM1factoryNumber      : String;
        BOM1lineNo             : String;
        BOM1levelNo            : String;
        BOM1zmpaSonPartNo      : String;
        BOM1prodId             : String;
        BOM1prodDesc           : String;
        BOM1zhpPartno          : String;
        BOM1generatedHppn      : String;
        BOM1strategicFlag      : String;
        BOM1matchSetFlag       : String;
        BOM1untUsg             : String;
        BOM1uomAlt             : String;
        BOM1materialType       : String;
        BOM1zmanufId           : String;
        BOM1manufacturerLocId  : String;
        BOM1sortString         : String;
        BOM1marketShare        : String;
        BOM1componentValidFrom : String;
        BOM1componentValidTo   : String;
        BOM1custAttr1          : String;
        BOM1custAttr2          : String;
        BOM1custAttr3          : String;
        BOM1custAttr4          : String;
        BOM1custAttr5          : String;
        BOM1bomVersion         : String;
        BOM1bomImportDate      : String;
        BOM2zmpaPartno         : String;
        BOM2factoryNumber      : String;
        BOM2lineNo             : String;
        BOM2levelNo            : String;
        BOM2zmpaSonPartNo      : String;
        BOM2prodId             : String;
        BOM2prodDesc           : String;
        BOM2zhpPartno          : String;
        BOM2generatedHppn      : String;
        BOM2strategicFlag      : String;
        BOM2matchSetFlag       : String;
        BOM2untUsg             : String;
        BOM2uomAlt             : String;
        BOM2materialType       : String;
        BOM2zmanufId           : String;
        BOM2manufacturerLocId  : String;
        BOM2sortString         : String;
        BOM2marketShare        : String;
        BOM2componentValidFrom : String;
        BOM2componentValidTo   : String;
        BOM2custAttr1          : String;
        BOM2custAttr2          : String;
        BOM2custAttr3          : String;
        BOM2custAttr4          : String;
        BOM2custAttr5          : String;
        BOM2bomVersion         : String;
        BOM2bomImportDate      : String;
    }

    type ComponentCount          : {
        commonComponents : CommonCount;
        uniqueComponents : UniqueCount;
    }

    type CommonCount             : {
        total      : Integer;
        similar    : Integer;
        difference : Integer;
    }

    type UniqueCount             : {
        total : Integer;
        BOM1  : Integer;
        BOM2  : Integer;
    }

    type autoflagInput {
        prodId     : String;
        zConstrain : String;
        zStrategic : String;
    }

    type downloadCompareTreeType : {
        BOM1levelNo            : String;
        BOM1generatedHppn      : String;
        BOM1Unique             : String;
        BOM1Different          : String;
        BOM1marketShare        : String;
        BOM1materialType       : String;
        BOM1untUsg             : String;
        BOM1componentValidFrom : String;
        BOM1componentValidTo   : String;
        BOM2levelNo            : String;
        BOM2generatedHppn      : String;
        BOM2Unique             : String;
        BOM2Different          : String;
        BOM2marketShare        : String;
        BOM2materialType       : String;
        BOM2untUsg             : String;
        BOM2componentValidFrom : String;
        BOM2componentValidTo   : String;
    }

    type FlushFillBOMInput {
        factoryNumber : String;
        zmpaPartno    : String;
        bomVersion    : Integer;

    }

    type job {
        jobId      : String;
        scheduleId : String;
        runId      : String;
        host       : String;
    };

    type MultiLevelResponse {
        zmpaPartno            : String;
        factoryNumber         : String;
        lineNo                : Integer;
        levelNo               : Integer;
        factoryChildPn        : String;
        mpnChildPn            : String;
        description           : String;
        hppnChildPn           : String;
        generatedHppn         : String;
        bomVersion            : Integer;
        strategicAutoFlag     : String;
        untUsg                : Integer;
        uomAlt                : String;
        materialType          : String;
        manufName             : String;
        vendorId              : String;
        sortString            : String;
        marketShare           : Integer;
        componentValidFrom    : String;
        componentValidTo      : String;
        altItemGroup          : String;
        scrap                 : String;
        alternativeItem       : String;
        phantomBOM            : String;
        manufacturingOverhead : String;
        costOfComponents      : String;
        rollUpCost            : String;
        bomImportDate         : String;
        singleLevelParent     : String;
        singleLevelQuantity   : Integer;
        topLevelParent        : String;
        topLevelQuantity      : Integer;
        parentGeneratedHppn   : String;
        requiredQuantity      : Integer;
        resultingQuantity     : Integer;
        parentmaterialtype    : String;
        parentLevelNo         : Integer;
    }

    type MultiLevel {
        factoryNumber  : String;
        factoryChildPn : String;
        mpnChild       : String;
        generatedHppn  : String;
        top            : Integer;
        skip           : Integer;
        zmpaPartno     : String;
    }

    type MultiLevelRes {
        records : array of MultiLevelResponse;
        total   : Integer;
    }

    //Action to upload a BOM
    action   BOMUpload(PostingData : BOMInput)                                                         returns array of ResponseType;
    action   BOMMassUpload(payload : LargeString, fileName : String, userEmail : String)                                  returns array of ResponseType;
    //function to get BOM as Tree view
    function BOMTreeStructure(zmpaPartno : String, factoryNumber : String, bomVersion : Integer)                          returns LargeString;
    //Functions used for compare BOM
    function BOMSimilarItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String)     returns array of StructurePayload;
    function BOMDifferItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String)      returns array of differenceResponse;
    function BOMUniqueItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String)      returns UniqueResponse;
    function BOMCountItems(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String)       returns ComponentCount;
    function compareTree(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String)         returns LargeString;
    function downloadCompareTree(zmpaPartno : String, factoryNumber : String, bom1Version : String, bom2Version : String) returns array of downloadCompareTreeType;
    action   BOMflushAndFill(PostingData : array of FlushFillBOMInput, Operation : String, userEmail : String)            returns String;
    action   multiLevelBom(payload : MultiLevel)                                                                          returns MultiLevelRes;
    action   WhereUseJob(Days : Integer, FactoryNumber : String, ServiceName : String, limit : Integer)                   returns String;
    function HpBomUpdate()                                                                                                returns String;
    function SecurityAction()                                                                                             returns String;
}





// db/pumoripsbomdisplay-model.cds



namespace pumorips.bomdisplay;

using {managed} from '@sap/cds/common';

//Table for BOM Header
entity BOMHeader : managed {
    key zmpaPartno          : String(40);
        prodDesc            : String(100);
        zhpPartno           : String(40);
    key factoryNumber       : String(20);
    key alternativeBom      : String(2);
        baseQuantity        : Integer;
        baseunitofMeasure   : String(3);
        bomValidFrom        : Date;
        bomValidTo          : Date;
    key bomVersion          : Integer;
        planningDiv         : String(10);
        yield               : Decimal(5, 2);
        markedForDeletion   : String(1);
        bomImportDate       : DateTime;
        singleLevelWhereUse : Boolean default false;
        topLevelWhereUse    : Boolean default false;
}

//Table for BOM Structure
entity BOMStructure : managed {
    key zmpaPartno            : String(40);
    key factoryNumber         : String(20);
    key alternativeBom        : String(2);
    key lineNo                : Integer;
        levelNo               : Integer;
    key factoryChildPn        : String(40);
    key mpnChildPn            : String(40);
        description           : String(80); //mpn descr
        hppnChildPn           : String(40);
        untUsg                : Decimal(13, 3);
        uomAlt                : String(3);
        generatedHppn         : String(40);
    key bomVersion            : Integer;
        materialType          : String(4);
        manufName             : String(100);
        vendorId              : String(40);
        sortString            : String(20);
        marketShare           : Integer;
        altItemGroup          : String(2);
        scrap                 : Decimal(5, 2);
    key componentValidFrom    : Date;
    key componentValidTo      : Date;
        alternativeItem       : String(1);
        phantomBOM            : String(1);
        manufacturingOverhead : Decimal(15, 3);
        costOfComponents      : Decimal(15, 3);
        rollUpCost            : Decimal(15, 3);
        bomImportDate         : DateTime;
        singleLevelParent     : String(40);
        singleLevelQuantity   : Decimal(13, 3);
        topLevelParent        : String(40);
        topLevelQuantity      : Decimal(13, 3);
        materialTypeBTP       : String(4);
        lineNoBTP             : String(10);
        lineNoSequence        : Integer;
        untUsgBTP             : Decimal(13, 3);
        uomAltBTP             : String(3);
}
// Table for Where Used

entity BOMWhereUsed : managed {
    key hppnChildPn         : String(40);
    key factoryChildPn      : String(40);
    key mpnChildPn          : String(40);
    key factoryNumber       : String(20);
        levelNo             : Integer;
        generatedHppn       : String(40);
        parentGeneratedHppn : String(40);
    key zmpaPartno          : String(40);
        // baseunitofMeasure   : String(3);
        uomAlt              : String(3);
        requiredQuantity    : Decimal(17, 3);
        resultingQuantity   : Decimal(17, 3);
        marketShare         : Integer;
        sortString          : String(20);
    key componentValidFrom  : Date;
    key componentValidTo    : Date;
    key typeOfLevel         : String;
}

// Display BOM Header History table
entity BOMHeaderHistory : managed {
    key zmpaPartno          : String(40);
        prodDesc            : String(100);
        zhpPartno           : String(40);
    key factoryNumber       : String(20);
    key alternativeBom      : String(2);
        baseQuantity        : Integer;
        baseunitofMeasure   : String(3);
        bomValidFrom        : Date;
        bomValidTo          : Date;
    key bomVersion          : Integer;
        planningDiv         : String(10);
        yield               : Decimal(5, 2);
        markedForDeletion   : String(1);
        bomImportDate       : DateTime;
        singleLevelWhereUse : Boolean default false;
        topLevelWhereUse    : Boolean default false;
}

// Display BOM Strucutre History table
entity BOMstructureHistory : managed {
    key zmpaPartno            : String(40);
    key factoryNumber         : String(20);
    key alternativeBom        : String(2);
    key lineNo                : Integer;
        levelNo               : Integer;
    key factoryChildPn        : String(40);
    key mpnChildPn            : String(40);
        description           : String(80); //mpn descr
        hppnChildPn           : String(40);
        untUsg                : Decimal(13, 3);
        uomAlt                : String(3);
        generatedHppn         : String(40);
    key bomVersion            : Integer;
        materialType          : String(4);
        manufName             : String(100);
        vendorId              : String(40);
        sortString            : String(20);
        marketShare           : Integer;
        altItemGroup          : String(2);
        scrap                 : Decimal(5, 2);
    key componentValidFrom    : Date;
    key componentValidTo      : Date;
        alternativeItem       : String(1);
        phantomBOM            : String(1);
        manufacturingOverhead : Decimal(15, 3);
        costOfComponents      : Decimal(15, 3);
        rollUpCost            : Decimal(15, 3);
        bomImportDate         : DateTime;
        singleLevelParent     : String(40);
        singleLevelQuantity   : Decimal(13, 3);
        topLevelParent        : String(40);
        topLevelQuantity      : Decimal(13, 3);
        materialTypeBTP       : String(4);
        lineNoBTP             : String(10);
        lineNoSequence        : Integer;
        untUsgBTP             : Decimal(13, 3);
        uomAltBTP             : String(3);        
}


//Synonym for pumori products table
@cds.persistence.exists
entity syn_PumoriProducts {
    key prodId                 : String(40);
        prodDesc               : String(200);
        baseunitofMeasure      : String(3);
        materialType           : String(4);
        zplcStatus             : String(20);
        unspscCode             : String(9);
        zhfvType               : String(70);
        zhfvValue              : String(70);
        zintroDate             : Date;
        category               : String(4);
        materialGroup          : String(9);
        gatingAttribute        : String(1);
        markedforDeletion      : String(1);
        strategicautoFlag      : String(1)
        @asset.range enum {
            Strategic    = 'X';
            nonstrategic = '';
        };
        zcontrolCode           : String(40);
        zmhbigSeries           : String(70);
        zmhbigseriesDesc       : String(70);
        zmhCategory            : String(70);
        zmhcategoryDesc        : String(70);
        zmhModel               : String(70);
        zmhmodelDesc           : String(70);
        zmhSeries              : String(70);
        zmhseriesDesc          : String(70);
        zmhsubCategory         : String(70);
        zmhsubcategoryDesc     : String(70);
        zmhType                : String(70);
        zmhtypeDesc            : String(70);
        zpchbusinessGrp        : String(40);
        zpchbusinessgrpDesc    : String(40);
        zpchbusinesssubgrp     : String(30);
        zpchbusinesssubgrpDesc : String(40);
        zpchextSegment         : String(30);
        zpchextsegmentDesc     : String(40);
        zpchgBu                : String(40);
        zpchgBuDesc            : String(40);
        zpchhpCompany          : String(40);
        zpchhpcompanyDesc      : String(40);
        zpchprdcategoryDesc    : String(40);
        zpchprofitCenter       : String(10);
        zpchprofitcenterDesc   : String(40);
        zspPl                  : String(20);
        languagekey            : String(1);
        keeperFlag             : String(1);
        custAttr1              : String(10);
        custAttr2              : String(10);
        custAttr3              : String(10);
        custAttr4              : Date;
        custAttr5              : String(20);
        custAttr6              : String(20);
        custAttr7              : Integer;
        custAttr8              : Decimal(13, 3);
        custAttr9              : Decimal(5, 2);
        custAttr10             : String(40);
}

// Synonym for pumori UOM Conversion table
@cds.persistence.exists
entity syn_UOMConversion {
    key factoryNumber       : String(20); //LocationID
    key prodId              : String(50); //MPN
        zbtpComp            : String(40); //generatedhppn
    key uomAlt              : String(3);
        fbaseunitofMeasure  : String(3);
        hpbaseunitofMeasure : String(3);
        denominator         : Decimal(5, 0);
        numerator           : Decimal(5, 0);
}

/* BTP Comp Sequence table */
@cds.persistence.exists
entity syn_BTPCompSequence {
        seq           : Integer;
    key zbtpComp      : String(40);
    key factoryNumber : String(20);
    key prodId        : String(50);
    key zmpaPartno    : String(50);
        zHpPartno     : String(40);
        zoldbtpComp   : String(40);
        master        : String(10);
        status        : String(20);
        suggest       : String(40);
}

@cds.persistence.exists
entity syn_FactoryStatusDashboard {
    key factoryId         : String(20);
    key interface         : String(20);
    key fileName          : String(50);
    key uploadedtime      : Timestamp;
        date              : Date;
        processTime       : String(10);
        status            : String(10);
        records           : Integer;
        successfulRecords : Integer;
        errorRecords      : Integer;
        prococessing      : String(20);
}

/*UploadHistory table*/
@cds.persistence.exists
entity syn_UploadHistory : managed {
    key appName    : String(30);
    key processId  : String(25);
        status     : String(70);
        records    : String(100);
        createdAt  : Timestamp;
        createdBy  : String(255);
        modifiedAt : Timestamp;
        modifiedBy : String(255);
}

@cds.persistence.exists
entity syn_UploadResponse : managed {
    key appName        : String(30);
    key processId      : String(25);
    key factoryNumber  : String(40);
    key prodId         : String(40);
    key zmpaPartno     : String(40);
    key locId          : String(40);
    key uomAlt         : String(40);
    key locFr          : String(40);
    key locfrType      : String(40);
    key locTo          : String(40);
    key loctoType      : String(40);
    key locType        : String(40);
    key alternativeBom : String(2);
    key levelNo        : String(10);
    key mpnChildPn     : String(40);
    key bomVersion     : String(10);
        createdAt      : Timestamp;
        createdBy      : String(255);
        modifiedAt     : Timestamp;
        modifiedBy     : String(255);
        errordetails   : String;
}


@cds.persistence.exists
entity syn_HPBOMHeader {
    key FACTORY_CODE      : String(20);
    key PRODID_PARENT     : String(40);
        RECORDMODE        : String(1);
        FACTORY_PARENT_PN : String(40);
        ALTERNATE_BOM     : String(2);
        PARENT_PART_DESC  : String(100);
        BASE_QUANTITY     : Integer;
        BASE_UOM          : String(3);
        BOM_VALID_FROM    : String(8);
        BOM_VALID_TO      : String(8);
        BOM_VERSION       : Integer;
        BUSINESS_TYPE     : String(10);
        YIELD             : Decimal(5, 2);
        STRATEGICAUTOFLAG : String(1);
        MARKEDFORDELETION : String(1);
}

@cds.persistence.exists
entity syn_HPBOMStructure {
    key PRODID_PARENT          : String(40);
    key FACTORY_CODE           : String(20);
    key PRODID_CHILD           : String(40);
        RECORDMODE             : String(1);
        FACTORY_PARENT_PN      : String(40);
        LINE_NO                : Integer;
        LEVEL_NO               : Integer;
        FACTORY_CHILD_PN       : String(40);
        MPN_CHILD_PN           : String(40);
        DESCRIPTION            : String(100);
        UNT_USG                : Decimal(13, 3);
        UOM                    : String(3);
        SOURCE_CD              : String(4);
        VENDOR_ID              : String(40);
        MANUF_NAME             : String(100);
        SORT_STRING            : String(20);
        MARKET_SHARE           : Integer;
        ALTERNATIVE_ITEM_FLAG  : String(1);
        SCRAP                  : Decimal(5, 2);
        COMPONENT_VALID_FROM   : String(8);
        COMPONENT_VALID_TO     : String(8);
        PHANTOM_BOM            : String(10);
        MANUFACTURING_OVERHEAD : Decimal(15, 3);
        COST_OF_COMPONENTS     : Decimal(15, 3);
        ROLL_UP_COST           : Decimal(15, 3);
        ALTERNATIVE_ITEM_GRP   : String(2);
        ITEM_CATEGORY          : String(1);
        ASM                    : String(1);
}


@cds.persistence.exists
entity syn_FactoryStatusResponse : managed {
    key interface      : String(20);
    key factoryId      : String(20);
    key fileName       : String(50);
    key uploadedtime   : Timestamp;
    key factoryNumber  : String(40);
    key prodId         : String(40);
    key zmpaPartno     : String(40);
    key locId          : String(40);
    key uomAlt         : String(40);
    key locFr          : String(40);
    key locfrType      : String(40);
    key locTo          : String(40);
    key loctoType      : String(40);
    key locType        : String(40);
    key alternativeBom : String(2);
    key levelNo        : String(10);
    key mpnChildPn     : String(40);
    key bomVersion     : String(10);
        errordetails   : String;
}

@cds.persistence.exists
entity syn_HPBOM {
    key PP_SOS_ID           : String(60);
    key VERID               : String(4);
    key LOCNO               : String(20);
    key P_MATNR             : String(40);
    key C_MATNR             : String(40);
    key VALFR               : Date;
        RECORDMODE          : String(1);
        VALTO               : Date;
        ADATU               : Date;
        BDATU               : Date;
        STLAN               : String(1);
        STLAL               : String(2);
        ACTID               : String(52);
        LOGCOMP             : String(40);
        POSNR               : String(4);
        BSTMA               : Decimal(17, 3);
        BSTMI               : Decimal(17, 3);
        BMENG               : Decimal(17, 3);
        PROC_PRIO           : Decimal(17, 2);
        BSTRF               : Decimal(17, 3);
        MENGE               : Decimal(17, 3);
        MEINS               : Integer;
        LOCTYPE             : String(1);
        P_MTART             : String(4);
        P_MATKL             : String(9);
        P_STRFLG            : String(1);
        P_CAT               : String(20);
        BESKZ               : String(1);
        SOBSL               : String(2);
        C_MTART             : String(4);
        C_MATKL             : String(9);
        C_STRFLG            : String(1);
        C_CAT               : String(20);
        POSTP               : String(1);
        EWAHR               : String(3);
        SORTF               : String(10);
        ALPGR               : String(2);
        STLST               : String(2);
        VERS_TEXT           : String(40);
        PLANT_TYPE          : String(10);
        STPO_MENGE          : Decimal(17);
        REPLICATIONDATETIME : Timestamp;
}

/*Config table details*/
@cds.persistence.exists
entity syn_PumoriConfig {
    key businessGroup : String(5);
    key appName       : String(20);
    key param1        : String(25);
        param2        : String(15);
        value1        : String(15);
        value2        : String(15);
}

//view for pumoripn value help
view pumoriPnValueHelpDisplayBom as select distinct key zbtpComp from BOMHeaderView;
//view for material number/zmpaPartno valuehelp
view materialNumberValueHelp as select distinct key zmpaPartno from BOMHeaderView;
//view for factoryNumber valuehelp
view factoryCodeValueHelp as select distinct key factoryNumber from BOMHeaderView;
//view for hppn  valuehelp
view hppnValueHelp as select distinct key zhpPartno from BOMHeaderView;
// View for alternativeBom valuehelp
view alternativeBomValueHelp as select distinct key alternativeBom from BOMHeaderView;
// View for prodDesc valuehelp
view prodDescValueHelp as select distinct key prodDesc from BOMHeaderView;
// View for zhpPartno valuehelp
view zhpPartnoValueHelp as select distinct key zhpPartno from BOMHeaderView where zhpPartno is not null;
// View for baseunitofMeasure valuehelp
view baseunitofMeasureValueHelp as select distinct key baseunitofMeasure from BOMHeaderView;
// View for planningDiv valuehelp
view planningDivValueHelp as select distinct key planningDiv from BOMHeaderView;
// view for bom version valuehelp
view bomVersionValueHelp as select distinct key bomVersion from BOMHeaderView;
// view for FactoryNumber BOMHeaderHistory value help
view factoryCodeFillValueHelp as select distinct key factoryNumber from BOMHeaderHistoryView;
//view for material number/zmpaPartno Fill valuehelp
view materialNumberFillValueHelp as select distinct key zmpaPartno from BOMHeaderHistoryView;
// View for alternativeBom Fill valuehelp
view alternativeBomFillValueHelp as select distinct key alternativeBom from BOMHeaderHistoryView;
// View for prodDesc Fill valuehelp
view prodDescFillValueHelp as select distinct key prodDesc from BOMHeaderHistoryView;
// View for zhpPartno Fill valuehelp
view zhpPartnoFillValueHelp as select distinct key zhpPartno from BOMHeaderHistoryView;
// View for baseunitofMeasure Fill valuehelp
view baseunitofMeasureFillValueHelp as select distinct key baseunitofMeasure from BOMHeaderHistoryView;
// View for planningDiv Fill valuehelp
view planningDivFillValueHelp as select distinct key planningDiv from BOMHeaderHistoryView;
// view for factoryCode FlushValueHelp
view factoryCodeFlushValueHelp as select distinct key factoryNumber from BOMHeaderFlushView;
//view for material number/zmpaPartno Flush valuehelp
view materialNumberFlushValueHelp as select distinct key zmpaPartno from BOMHeaderFlushView;
// View for alternativeBom Flush valuehelp
view alternativeBomFlushValueHelp as select distinct key alternativeBom from BOMHeaderFlushView;
// View for prodDesc Flush valuehelp
view prodDescFlushValueHelp as select distinct key prodDesc from BOMHeaderFlushView;
// View for zhpPartno Flush valuehelp
view zhpPartnoFlushValueHelp as select distinct key zhpPartno from BOMHeaderFlushView where zhpPartno is not null;
// View for planningDiv Flush valuehelp
view planningDivFlushValueHelp as select distinct key planningDiv from BOMHeaderFlushView;

view businessTypeValueHelp as
    select distinct key case planningDiv
                            when
                                '10'
                            then
                                '10-PS'
                            when
                                '20'
                            then
                                '20-Print'
                            when
                                '30'
                            then
                                '30-Both'
                        end as planningDiv : String(10) from BOMHeader;

//view on BOMHeader
view BOMHeaderView as
    select distinct
            Header.createdAt,
            Header.createdBy,
            Header.modifiedAt,
            Header.modifiedBy,
        key Header.zmpaPartno,
        key Header.prodDesc,
            Header.baseQuantity,
        key Header.factoryNumber,
        key Header.alternativeBom,
        // case 
        //     when BTPseq.zbtpComp is null then Header.zhpPartno
        //     else BTPseq.zbtpComp
        //     end as zbtpComp: String(40),
            bomstruct.generatedHppn as zbtpComp,
            bomValidFrom,
            bomValidTo,
            Header.baseunitofMeasure,
            case Header.planningDiv
                when
                    '10'
                then
                    '10-PS'
                when
                    '20'
                then
                    '20-Print'
                when
                    '30'
                then
                    '30-Both'
            end as planningDiv  : String(10),
            Header.zhpPartno,
            Header.yield,
            key cast(
                Header.bomVersion as  String
            )   as bomVersion  :  String(10),
            Header.markedForDeletion,
            Header.bomImportDate
    from BOMHeader as Header
    Left outer join BOMStructure as bomstruct
    on Header.factoryNumber = bomstruct.factoryNumber
    AND Header.zmpaPartno = bomstruct.zmpaPartno
    and Header.bomVersion = bomstruct.bomVersion
    where bomstruct.levelNo = 0;


//view bom valid from value help
view bomValidFromBomHeaderValueHelp  as select distinct key bomValidFrom from BOMHeaderView;
//view bom valid to value help
view bomValidToBomHeaderValueHelp as select distinct key bomValidTo from BOMHeaderView;

//view on BOMHeader
view BOMHeaderFlushView as
    select
            createdAt,
            createdBy,
            modifiedAt,
            modifiedBy,
        key zmpaPartno,
        key prodDesc,
            baseQuantity,
        key factoryNumber,
        key alternativeBom,
            cast(
                bomValidFrom as   String
            )   as bomValidFrom : String(10),
            cast(
                bomValidTo as     String
            )   as bomValidTo   : String(10),
            case planningDiv
                when
                    '10'
                then
                    '10-PS'
                when
                    '20'
                then
                    '20-Print'
                when
                    '30'
                then
                    '30-Both'
            end as planningDiv  : String(10),
            zhpPartno,
            yield,
        key bomVersion,
            markedForDeletion,
            bomImportDate
    from BOMHeader;

//view joining BOMstructure and Pumori products
view BOMStructureView as
    select
        key BOMStruct1.zmpaPartno,
        key BOMStruct1.factoryNumber,
        key BOMStruct1.lineNo,
            BOMStruct1.levelNo,
        key BOMStruct1.factoryChildPn,
            BOMStruct1.mpnChildPn,
            BOMStruct1.description,
            BOMStruct1.hppnChildPn,
            BOMStruct1.generatedHppn,
        key BOMStruct1.bomVersion,
            PumProd.strategicautoFlag as strategicAutoFlag,
            BOMStruct1.untUsg,
            BOMStruct1.uomAlt,
            BOMStruct1.materialType,
            BOMStruct1.manufName,
            BOMStruct1.vendorId,
            BOMStruct1.sortString,
            BOMStruct1.marketShare,
        key BOMStruct1.componentValidFrom,
        key BOMStruct1.componentValidTo,
            BOMStruct1.altItemGroup,
            BOMStruct1.scrap,
            BOMStruct1.alternativeItem,
            BOMStruct1.phantomBOM,
        key BOMStruct1.manufacturingOverhead,
            BOMStruct1.costOfComponents,
            BOMStruct1.rollUpCost,
            BOMStruct1.bomImportDate,
            BOMStruct1.singleLevelParent,
            BOMStruct1.singleLevelQuantity,
            BOMStruct1.topLevelParent,
            BOMStruct1.topLevelQuantity,
            BOMStruct1.materialTypeBTP,
            BOMStruct1.lineNoBTP,
            BOMStruct1.lineNoSequence,
            untUsgBTP,
            uomAltBTP
    from BOMStructure as BOMStruct1
    left outer join syn_PumoriProducts as PumProd
        on PumProd.prodId = BOMStruct1.generatedHppn;

//view BOMstructure multi Level
view BOMStructureMultiLevelView as
    select
        key zmpaPartno,
        key factoryNumber,
        key lineNo,
            levelNo,
        key factoryChildPn,
            mpnChildPn,
            description,
            hppnChildPn,
            generatedHppn,
        key bomVersion,
            untUsg,
            uomAlt,
            materialType,
            manufName,
            vendorId,
            sortString,
            marketShare,
        key componentValidFrom,
        key componentValidTo,
            altItemGroup,
            scrap,
            alternativeItem,
            phantomBOM,
        key manufacturingOverhead,
            costOfComponents,
            rollUpCost,
            bomImportDate,
            null as parentGeneratedHppn : String,
            null as requiredQuantity    : String,
            null as resultingQuantity   : String,
            null as parentmaterialtype  : String

    from BOMStructure;

//view to get all the latest BOMHeader data
view BOMHeaderViewLatest as
    select
        key B1.zmpaPartno,
            B1.prodDesc,
        key B1.zhpPartno,
        key B1.factoryNumber,
            cast(
                B1.baseQuantity as String
            )   as baseQuantity :  String(10),
            // B1.location,
            cast(
                B1.bomValidFrom as String
            )   as bomValidFrom :  String(10),
            cast(
                B1.bomValidTo as   String
            )   as bomValidTo   :  String(10),
            // B1.bomVersionExist,
            case B1.planningDiv
                when
                    '10'
                then
                    '10-PS'
                when
                    '20'
                then
                    '20-Print'
                when
                    '30'
                then
                    '30-Both'
            end as planningDiv  :  String(10),
            B1.markedForDeletion,
            // cast(
            //     B1.bomImportDate as String) as bomImportDate : String(10),
            // B1.ecrnumber,
        key B1.bomVersion,
            B1.singleLevelWhereUse,
            B1.topLevelWhereUse
    from BOMHeader as B1
    inner join (
        select
            zmpaPartno,
            factoryNumber,
            MAX(bomVersion) as bomVersion
        from BOMHeader
        group by
            zmpaPartno,
            factoryNumber
    ) as B2
        on  B1.zmpaPartno    = B2.zmpaPartno
        and B1.factoryNumber = B2.factoryNumber
        and B1.bomVersion    = B2.bomVersion;

view BOMStructureViewLatest as
    select
        key BOMStruct1.zmpaPartno,
        key BOMStruct1.factoryNumber,
        key BOMStruct1.lineNo,
            BOMStruct1.levelNo,
        key BOMStruct1.factoryChildPn,
            BOMStruct1.mpnChildPn,
            BOMStruct1.description,
            BOMStruct1.hppnChildPn,
            BOMStruct1.generatedHppn,
        key BOMStruct1.bomVersion,
            PumProd.strategicautoFlag as strategicAutoFlag,
            BOMStruct1.untUsg,
            BOMStruct1.uomAlt,
            BOMStruct1.materialType,
            BOMStruct1.manufName,
            BOMStruct1.vendorId,
            BOMStruct1.sortString,
            BOMStruct1.marketShare,
        key BOMStruct1.componentValidFrom,
        key BOMStruct1.componentValidTo,
            BOMStruct1.altItemGroup,
            BOMStruct1.scrap,
            BOMStruct1.alternativeItem,
            BOMStruct1.phantomBOM,
        key BOMStruct1.manufacturingOverhead,
            BOMStruct1.costOfComponents,
            BOMStruct1.rollUpCost,
            BOMStruct1.bomImportDate,
            BOMStruct1.singleLevelParent,
            BOMStruct1.singleLevelQuantity,
            BOMStruct1.topLevelParent,
            BOMStruct1.topLevelQuantity,
            BOMStruct1.materialTypeBTP,
            BOMStruct1.lineNoBTP,
            BOMStruct1.lineNoSequence
    from BOMHeaderViewLatest as Hlatest
    left outer join BOMStructure as BOMStruct1
        on  Hlatest.zmpaPartno    = BOMStruct1.zmpaPartno
        and Hlatest.factoryNumber = BOMStruct1.factoryNumber
        and Hlatest.bomVersion    = BOMStruct1.bomVersion
    left outer join syn_PumoriProducts as PumProd
        on PumProd.prodId = BOMStruct1.generatedHppn;


view BOMWhereUsedView as
    select
        key M1.hppnChildPn,
        key M1.factoryChildPn,
        key M1.mpnChildPn,
        key M1.factoryNumber,
        key M2.zbtpComp,
            M1.levelNo,
            M1.generatedHppn,
            M1.parentGeneratedHppn,
            M1.zmpaPartno,
            // M1.baseunitofMeasure,
            M1.uomAlt,
            M1.requiredQuantity,
            M1.resultingQuantity,
            M1.marketShare,
            M1.sortString,
            M1.componentValidFrom,
            M1.componentValidTo
    from BOMWhereUsed as M1
    inner join syn_BTPCompSequence as M2
        on  M2.factoryNumber = M1.factoryNumber
        and M2.prodId        = M1.mpnChildPn;

view FactoryCodeWhereUsedValueHelp as select distinct key factoryNumber from BOMWhereUsedView;
view FPNWhereUsedValueHelp as select distinct key factoryChildPn from BOMWhereUsedView;
view MPNWhereUsedValueHelp as select distinct key mpnChildPn from BOMWhereUsedView;
view PumoriPNWhereUsedValueHelp as select distinct key zbtpComp from BOMWhereUsedView;

/*Upload History View*/
view UploadHistoryView as
    select
        key appName,
        key processId,
            status,
            records,
            modifiedAt,
            modifiedBy
    from syn_UploadHistory;

/*Upload Response View*/
view UploadResponseView as
    select
        key appName,
        key processId,
        key factoryNumber,
        key zmpaPartno,
        key alternativeBom,
        key levelNo,
        key mpnChildPn,
        key bomVersion,
            errordetails
    from syn_UploadResponse;

/*BOM Upload combined View*/
view BOMUploadCombinedView as
    select
        key H.appName,
        key H.processId,
            R.factoryNumber,
            R.zmpaPartno,
            R.alternativeBom,
            R.levelNo,
            R.mpnChildPn,
            R.bomVersion,
            H.status,
            H.records,
            H.modifiedAt,
            H.modifiedBy,
            R.errordetails
    from UploadHistoryView as H
    join UploadResponseView as R
        on  H.appName   = R.appName
        and H.processId = R.processId;

view BOMHeaderHistoryView as
    select
            createdAt,
            createdBy,
            modifiedAt,
            modifiedBy,
        key zmpaPartno,
        key factoryNumber,
        key alternativeBom,
            prodDesc,
            zhpPartno,
            baseQuantity,
            baseunitofMeasure,
            bomValidFrom,
            bomValidTo,
        key bomVersion,
            planningDiv,
            yield,
            markedForDeletion,
            bomImportDate
    from BOMHeaderHistory;

view SingleLevelBomWhereUseView as
    select distinct
        key Bomstruct.hppnChildPn,
        key Bomstruct.factoryChildPn,
        key Bomstruct.mpnChildPn,
        key Bomstruct.factoryNumber,
            Bomstruct.levelNo,
            Bomstruct.generatedHppn,
        key Bomstruct.singleLevelParent,
        key Bomstruct.zmpaPartno,
            Bomstruct.uomAlt,
            Bomstruct.singleLevelQuantity,
            '1.000' as singleLevelresultingQuantity : String,
            Bomstruct.marketShare,
            Bomstruct.sortString,
        key Bomstruct.componentValidFrom,
        key Bomstruct.componentValidTo
    from BOMStructureViewLatest as Bomstruct
    where
           Bomstruct.materialType <> 'FERT';

view topLevelBomWhereUseView as
    select distinct
        key Bomstruct.hppnChildPn,
        key Bomstruct.factoryChildPn,
        key Bomstruct.mpnChildPn,
        key Bomstruct.factoryNumber,
            Bomstruct.levelNo,
            Bomstruct.generatedHppn,
        key Bomstruct.topLevelParent,
        key Bomstruct.zmpaPartno,
            Bomstruct.uomAlt,
            Bomstruct.topLevelQuantity,
            '1.000' as topLevelresultingQuantity : String,
            Bomstruct.marketShare,
            Bomstruct.sortString,
        key Bomstruct.componentValidFrom,
        key Bomstruct.componentValidTo
    from BOMStructureViewLatest as Bomstruct
    where
           Bomstruct.materialType <> 'FERT';

//view for zmpaPartno valueHelp
view zmpaPartnoValueHelp as select distinct key zmpaPartno from SingleLevelBomWhereUseView;
//view for factoryNumber ValueHelp
view factoryNumberValueHelp as select distinct key factoryNumber from SingleLevelBomWhereUseView;
//view for mpnchilpn ValueHelp
view mpnchilpnValueHelp as select distinct key mpnChildPn from SingleLevelBomWhereUseView;
//view for fpnchildpn ValueHelp
view fpnchildpnValueHelp as select distinct key factoryChildPn from SingleLevelBomWhereUseView;
// View for pumoripn ValueHelp
view pumoripnValueHelp as select distinct key generatedHppn from SingleLevelBomWhereUseView;
view SingleLevelFacNumValueHelp as select distinct key factoryNumber from SingleLevelBomWhereUseView;
view SingleLevelfactoryChildPnValueHelp as select distinct key factoryChildPn from SingleLevelBomWhereUseView;
view SingleLevelmpnChildPnValueHelp as select distinct key mpnChildPn from SingleLevelBomWhereUseView;
view SingleLevelgeneratedHppnValueHelp as select distinct key generatedHppn from SingleLevelBomWhereUseView;
view SingleLevelfactoryPnforParentValueHelp as select distinct key zmpaPartno from SingleLevelBomWhereUseView;
view SingleLevelmaterialNumberforChildValueHelp as select distinct key hppnChildPn from SingleLevelBomWhereUseView;
view SingleLevelidentifierforAlternateProductValueHelp as select distinct key sortString from SingleLevelBomWhereUseView;
view SingleLevelUOMAlternateValueHelp as select distinct key uomAlt from SingleLevelBomWhereUseView;
view SingleLevelParentPartValueHelp as select distinct key singleLevelParent from SingleLevelBomWhereUseView;
view topLevelFacNumValueHelp as select distinct key factoryNumber from topLevelBomWhereUseView;
view topLevelfactoryChildPnValueHelp as select distinct key factoryChildPn from topLevelBomWhereUseView;
view topLevelmpnChildPnValueHelp as select distinct key mpnChildPn from topLevelBomWhereUseView;
view topLevelgeneratedHppnValueHelp as select distinct key generatedHppn from topLevelBomWhereUseView;
view topLevelfactoryPnforParentValueHelp as select distinct key zmpaPartno from topLevelBomWhereUseView;
view topLevelmaterialNumberforChildValueHelp as select distinct key hppnChildPn from topLevelBomWhereUseView;
view topLevelidentifierforAlternateProductValueHelp as select distinct key sortString from topLevelBomWhereUseView;
view topLevelUOMAlternateValueHelp as select distinct key uomAlt from topLevelBomWhereUseView;
view topLevelParentPartValueHelp as select distinct key topLevelParent from topLevelBomWhereUseView;

/* FactoryStatusResponse View*/
view FactoryStatusResponseView as
    select
        key interface,
        key factoryId,
        key fileName,
        key uploadedtime,
        key factoryNumber,
        key prodId,
        key zmpaPartno,
        key locId,
        key uomAlt,
        key locFr,
        key locfrType,
        key locTo,
        key loctoType,
        key locType,
        key alternativeBom,
        key levelNo,
        key mpnChildPn,
        key bomVersion,
            modifiedAt,
            modifiedBy,
            errordetails
    from syn_FactoryStatusResponse;